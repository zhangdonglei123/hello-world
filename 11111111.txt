/**
 * @Title: AdjustmentServiceSpringImpl.java
 * @Package flex.claim.adjustment.service.spring
 * @author 魏星
 * @date 2012-9-5 上午9:14:17
 * @version V1.0
 */
package flex.claim.compensate.service.spring;

import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import flex.claim.auxiliary.auxiliaryPersonBank.model.AgAuxiliaryPersonBank;
import flex.claim.carloss.model.AcCarDefLoss;
import flex.claim.carloss.model.AcCarDefLossVlHis;
import flex.claim.carloss.model.AcCarInfo;
import flex.claim.carloss.model.AcCarItemChange;
import flex.claim.carloss.model.AcCarMaterialFee;
import flex.claim.carloss.model.AcCarOuterRepair;
import flex.claim.carloss.model.AcCarRepairFee;
import flex.claim.carloss.model.AcCarSaveCharge;
import flex.claim.carloss.service.facade.CarLossService;
import flex.claim.caseSurvey.model.AcCaseSurvey;
import flex.claim.caseSurvey.model.AcCaseSurveyRecord;
import flex.claim.caseSurvey.service.facade.CaseSurveyService;
import flex.claim.claim.model.AcClaim;
import flex.claim.claim.model.AcClaimHis;
import flex.claim.claim.model.AcClaimLoss;
import flex.claim.claim.model.AcClaimLossHis;
import flex.claim.claim.model.AcClaimRejectCharge;
import flex.claim.claim.service.facade.ClaimService;
import flex.claim.common.model.AcCaseStatusInfo;
import flex.claim.common.model.AcUnpaidCause;
import flex.claim.common.model.AcUnpaidCauseSub;
import flex.claim.common.model.AgAbsDeductible;
import flex.claim.common.model.AgAbsDeductibleId;
import flex.claim.common.model.AgCustomerParameter;
import flex.claim.common.model.AgDutyDeductible;
import flex.claim.common.service.facade.CommonService;
import flex.claim.common.vo.AllocationInfoVo;
import flex.claim.common.vo.DealUserInfoVo;
import flex.claim.compensate.model.AcCharge;
import flex.claim.compensate.model.AcCoins;
import flex.claim.compensate.model.AcCompensate;
import flex.claim.compensate.model.AcCompensateHis;
import flex.claim.compensate.model.AcDeductcond;
import flex.claim.compensate.model.AcLoss;
import flex.claim.compensate.model.AcLossBill;
import flex.claim.compensate.model.AcPayPerson;
import flex.claim.compensate.model.AcPaymentInfo;
import flex.claim.compensate.model.AcPersonLoss;
import flex.claim.compensate.service.facade.BusinessInsuranceAdjustmentService;
import flex.claim.compensate.service.facade.CompensateService;
import flex.claim.compensate.service.facade.DeathAdjustmentService;
import flex.claim.compensate.service.facade.FirstVerifyService;
import flex.claim.compensate.service.facade.LossAdjustmentService;
import flex.claim.compensate.service.facade.MedicalLossService;
import flex.claim.compensate.service.facade.PaymentInfoService;
import flex.claim.compensate.vo.AbsDeductibleVo;
import flex.claim.compensate.vo.AcPayInfoVo;
import flex.claim.compensate.vo.AcPaymentInfoVo;
import flex.claim.compensate.vo.AcPaymentSubVo;
import flex.claim.compensate.vo.AccarinfoVo;
import flex.claim.compensate.vo.AcpayItemVo;
import flex.claim.compensate.vo.AutoUnderWriteVo;
import flex.claim.compensate.vo.SumAcountVo;
import flex.claim.customer.model.AcCustomerGroupInfo;
import flex.claim.customer.model.AcCustomerPerInfo;
import flex.claim.defcommon.model.AcDefLossCharge;
import flex.claim.defcommon.model.AcInterFace;
import flex.claim.defcommon.service.facade.AutoTaskService;
import flex.claim.defcommon.service.facade.DefCommonService;
import flex.claim.defcommon.vo.BackDefLossVo;
import flex.claim.defcommon.vo.BackMainVo;
import flex.claim.endcase.model.AcReCase;
import flex.claim.endcase.service.facade.RecaseService;
import flex.claim.firstauditpay.model.AcChargeQuick;
import flex.claim.firstauditpay.model.AcCoinsQuick;
import flex.claim.firstauditpay.model.AcCompensateQuick;
import flex.claim.firstauditpay.model.AcLossQuick;
import flex.claim.firstauditpay.model.AcPaymentQuick;
import flex.claim.firstauditpay.model.AcPersonLossQuick;
import flex.claim.firstauditpay.service.facade.FirstAuditPayService;
import flex.claim.firstauditpay.web.FirstAuditPayAction;
import flex.claim.hnquickpay.model.AcQuickPayReport;
import flex.claim.hnquickpay.service.facade.QuickPayhnService;
import flex.claim.operaterecord.model.AcOperateRecordInfo;
import flex.claim.operaterecord.service.facade.OperateRecordService;
import flex.claim.person.model.AcPersonInjuryCharge;
import flex.claim.person.model.AcPersonTrackMain;
import flex.claim.person.model.AcPersonTrackMainVlhis;
import flex.claim.person.service.facade.PersonTraceService;
import flex.claim.plat.model.ACSubrogationLockMain;
import flex.claim.plat.model.AcSubrogationCarInfo;
import flex.claim.policy.model.AclcCarDriver;
import flex.claim.policy.model.AclcInsured;
import flex.claim.policy.model.AclcItemCar;
import flex.claim.policy.model.AclcItemKind;
import flex.claim.policy.model.AclcMain;
import flex.claim.policy.service.facade.PolicyService;
import flex.claim.prepay.model.AcPrepay;
import flex.claim.prepay.model.AcPrepayCharge;
import flex.claim.prepay.service.facade.PrePayService;
import flex.claim.proploss.model.AcPropDefLoss;
import flex.claim.proploss.model.AcPropDefLossVlhis;
import flex.claim.proploss.model.AcPropExtCharge;
import flex.claim.proploss.model.AcPropItemChange;
import flex.claim.proploss.model.AcPropRepairFee;
import flex.claim.proploss.service.facade.PropLossService;
import flex.claim.rejectpay.service.facade.RejectPayService;
import flex.claim.report.model.AcPolicySummary;
import flex.claim.report.model.AcRepairSendFactory;
import flex.claim.report.model.AcReport;
import flex.claim.report.model.AcReportCarInfo;
import flex.claim.report.model.AcReportPersonInfo;
import flex.claim.report.model.AcReportPropInfo;
import flex.claim.report.model.AcSpCaseRule;
import flex.claim.report.service.facade.LcitemCarService;
import flex.claim.report.service.facade.ReportService;
import flex.claim.survey.model.AcSurvey;
import flex.claim.survey.service.facade.SurveyService;
import flex.claim.synthesize.model.AcBpmCaseInfo;
import flex.claim.taskaging.model.AgWorkDate;
import flex.claim.taskaging.service.facade.TaskAgingService;
import flex.claim.taskaging.vo.TaskAgingVo;
import flex.claim.underwrite.model.AcUnderWrite;
import flex.claim.underwrite.service.facade.UnderWriteService;
import flex.claim.zeroEndcase.model.AcZeroChargeQuick;
import flex.common.common.CommonMethod;
import flex.common.common.DataDictionary;
import flex.common.common.DateTime;
import flex.common.common.QueryRule;
import flex.common.dao.GenericDaoHibernate;
import flex.common.exception.BusinessException;
import flex.common.ilogRules.service.facade.RuleInterface;
import flex.common.ilogRules.vo.VerifyCalVo;
import flex.common.utils.DataUtils;
import flex.common.xmlInterface.XmlInterface;
import flex.grizzly.bpm.common.BpmConstants;
import flex.grizzly.bpm.model.ACBpmCaseInfo;
import flex.grizzly.bpm.model.ACBpmMain;
import flex.grizzly.bpm.service.facade.ACBpmCaseInfoService;
import flex.grizzly.bpm.service.facade.ACBpmMainService;
import flex.grizzly.bpm.service.facade.BpmService;
import flex.grizzly.bpm.vo.BpmTask;
import flex.grizzly.rbac.model.AgCode;

/**
 * @ClassName: AdjustmentServiceSpringImpl
 * @Description: TODO(理算业务逻辑实现类)
 * @author 魏星
 * @date 2012-9-5 上午9:14:17
 * 
 */
public class CompensateServiceSpringImpl extends GenericDaoHibernate<AcCompensate, BigDecimal> implements CompensateService {

	private BusinessInsuranceAdjustmentService businessInsuranceAdjustmentService;
	private LossAdjustmentService lossAdjustmentService;
	private DeathAdjustmentService deathAdjustmentService;
	private MedicalLossService medicalLossService;
	private ClaimService claimService;
	private CarLossService carLossService;
	private PropLossService propLossService;
	private PersonTraceService personService;
	private DefCommonService defCommonService;
	private BpmService bpmService;
	private ACBpmMainService acBpmMainService;
	private PolicyService policyService;
	private PrePayService prePayService;
	private CommonService commonService;
	private FirstVerifyService firstVerifyService;
	private OperateRecordService operateRecordService;
	private PaymentInfoService paymentInfoService;
	private RuleInterface ruleInterface;
	private ReportService reportService;
	private ACBpmCaseInfoService acBpmCaseInfoService;
	private LcitemCarService lcitemCarService;
	private UnderWriteService underWriteService;
	private FirstAuditPayService firstAuditPayService;
	/** 重开赔案查询 */
	private RecaseService recaseService;
	/** 任务时效service */
	private TaskAgingService taskAgingService;
	/** 自动任务 */
	private AutoTaskService autoTaskService;
	/** 查勘 */
	private SurveyService surveyService;
	
	private CaseSurveyService caseSurveyService;
	private RejectPayService rejectPayService;
	
	public void setBusinessInsuranceAdjustmentService(BusinessInsuranceAdjustmentService businessInsuranceAdjustmentService) {
		this.businessInsuranceAdjustmentService = businessInsuranceAdjustmentService;
	}

	/**
	 * @Title: calculateTrafficAccompensate
	 * @Description: TODO(进行互碰自赔交强险计算)
	 * @author 李科
	 * @param trafficAccompensate
	 * @return void
	 * @throws
	 * @date 2012-9-25 下午2:26:53
	 */
	public String calculateSelfLossTrafficAccompensate(List<AcpayItemVo> aclossVoList, List<AcpayItemVo> acpersonlossVoList, String reportno) {
		Double totalAmount = 0.0;
		Double sumPay = 0.0;
		for (AcpayItemVo payItemVo : aclossVoList) {
			totalAmount += payItemVo.getSumLossAmount();
			payItemVo.setDeductBzamount(0.0);
			payItemVo.setIndemnityPaid(0.0);
			payItemVo.setSumRealpay(0.0);

		}
		if (totalAmount < 0.005) {
			return "";
		}

		if (totalAmount > DataDictionary.LOSS_LIMIT) {
			sumPay = DataDictionary.LOSS_LIMIT;
		} else {
			sumPay = totalAmount;
		}
		Double realPay = 0.0;
		for (AcpayItemVo payItemVo : aclossVoList) {
			Double calPayAmount = payItemVo.getSumLossAmount() / totalAmount * sumPay;
			realPay += CommonMethod.doubleRound_Down(calPayAmount);
			payItemVo.setDeductBzamount(CommonMethod.doubleRound_Down(calPayAmount));
			Double rejectAmount = payItemVo.getRejectAmount() != null ? payItemVo.getRejectAmount() : 0.0;
			payItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(calPayAmount + rejectAmount));
			Double sumRealpay = calPayAmount + rejectAmount;
			payItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
		}

		// 调整位差
		Double reaminAmount = sumPay - realPay;

		for (AcpayItemVo payItemVo : aclossVoList) {
			if (reaminAmount < 0.005) {
				break;
			}
			if (payItemVo.getSumLossAmount() - payItemVo.getIndemnityPaid() > 0.005) {
				payItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(payItemVo.getIndemnityPaid() + 0.01));
				payItemVo.setSumRealpay(CommonMethod.doubleRound_Down(payItemVo.getSumRealpay() + 0.01));
				payItemVo.setDeductBzamount(CommonMethod.doubleRound_Down(payItemVo.getDeductBzamount() + 0.01));
				reaminAmount -= 0.01;
			}

		}

		return "";
	}

	/**
	 * @Title: findAcCompensateById
	 * @Description: TODO(根据compensateNo得到计算书书)
	 * @author Wei Xing
	 * @date 2012-12-6 下午7:12:15
	 * @param id
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findAcCompensateById(java.math.BigDecimal)
	 */
	public AcCompensate findAcCompensateByCompensateNo(String compensateNo) {
		String hql = "from AcCompensate where compensateNo=?";
		List<AcCompensate> compensateList = this.findAllByHql(hql, compensateNo);
		if (compensateList.size() > 0) {
			return compensateList.get(0);
		}
		return null;
	}

	public String calculateTrafficAccompensateSurvey(List<AcpayItemVo> aclossVoList, List<AcpayItemVo> acpersonlossVoList, String reportno,Boolean isAdvance,List<AcReportCarInfo> carLossList, AcSurvey survey) {
		String accidentDutyCode = survey.getAccidentDutyCode();
		List<AcReportCarInfo> tempcarLossList = findByHql("from AcReportCarInfo car where car.reportNo =? and car.cancelFlag <>?",
				survey.getReportNo(), "1");
		// 移出允许不保交强险信息
		List<AccarinfoVo> accarinfoVoList = new ArrayList<AccarinfoVo>();
		for (AcReportCarInfo acReportCarInfo : tempcarLossList) {
			AccarinfoVo accarinfoVo = new AccarinfoVo();
			accarinfoVo.setAcReportCarInfoId(acReportCarInfo.getId());
			accarinfoVo.setReportNo(acReportCarInfo.getReportNo());
			accarinfoVo.setLossAttrCode(acReportCarInfo.getLossAttRCode());
			accarinfoVo.setLossAttrName(acReportCarInfo.getLossAttRName());
			accarinfoVo.setLicenseNo(acReportCarInfo.getLicenseNo());
			String dutyFlag = getIsDuty(acReportCarInfo, accidentDutyCode);
			if("1".equals(dutyFlag)){
				accarinfoVo.setCiDutyFlag("1");
				accarinfoVo.setDutyFlag(true);
			}else{
				accarinfoVo.setCiDutyFlag("0");
				accarinfoVo.setDutyFlag(false);
			}
			accarinfoVoList.add(accarinfoVo);
		}

		// 财务损失计算
		// 人伤损失计算
		// 医疗费用计算
		logger.debug("开始交强险计算");
		String BZlimitFlag = commonService.find2020BZSwithcValue(reportno);
		if(!isAdvance){//垫付只赔付医疗费
			lossAdjustmentService.lossAdjustment(aclossVoList, accarinfoVoList);
			List<AcpayItemVo> acpersonDeathlossVoList = new ArrayList<AcpayItemVo>();
			
			for (int i = 0; i < acpersonlossVoList.size(); i++) {
				AcpayItemVo acpayItemVo = acpersonlossVoList.get(i);
	
				if (DataDictionary.ACPERSONLOSS_DEATH.equals(acpayItemVo.getFeeTypeCode())) {
					acpersonDeathlossVoList.add(acpayItemVo);
				}
			}
			if (acpersonDeathlossVoList.size() > 0) {
				deathAdjustmentService.deathAdjustment(acpersonDeathlossVoList, accarinfoVoList,BZlimitFlag);
			}
		}
		List<AcpayItemVo> acpersonMedialossVoList = new ArrayList<AcpayItemVo>();
		for (int i = 0; i < acpersonlossVoList.size(); i++) {
			AcpayItemVo acpayItemVo = acpersonlossVoList.get(i);

			if (!DataDictionary.ACPERSONLOSS_DEATH.equals(acpayItemVo.getFeeTypeCode())) {
				acpersonMedialossVoList.add(acpayItemVo);
			}
		}
		if (acpersonMedialossVoList.size() > 0) {

			medicalLossService.medicaAdjustment(acpersonMedialossVoList, accarinfoVoList,BZlimitFlag);
		}
		// 减去扣减金额
		for (AcpayItemVo aclossVo : aclossVoList) {
			if (aclossVo.getRejectAmount() != null) {
				if (aclossVo.getSumRealpay() == null)
					aclossVo.setSumRealpay(0.0);
				if (aclossVo.getIndemnityPaid() == null)
					aclossVo.setIndemnityPaid(0.0);
				if (aclossVo.getDeductBzamount() == null)
					aclossVo.setDeductBzamount(0.0);
				aclossVo.setSumRealpay(CommonMethod.doubleRound_Down(aclossVo.getSumRealpay() + aclossVo.getRejectAmount()));
				aclossVo.setIndemnityPaid(CommonMethod.doubleRound_Down(aclossVo.getIndemnityPaid() + aclossVo.getRejectAmount()));
				aclossVo.setDeductBzamount(CommonMethod.doubleRound_Down(aclossVo.getDeductBzamount() + aclossVo.getRejectAmount()));
			}
		}
		for (int i = 0; i < acpersonlossVoList.size(); i++) {
			AcpayItemVo aclossVo = acpersonlossVoList.get(i);
			if (aclossVo.getRejectAmount() != null) {
				if (aclossVo.getSumRealpay() == null)
					aclossVo.setSumRealpay(0.0);
				if (aclossVo.getIndemnityPaid() == null)
					aclossVo.setIndemnityPaid(0.0);
				if (aclossVo.getDeductBzamount() == null)
					aclossVo.setDeductBzamount(0.0);
				aclossVo.setSumRealpay(CommonMethod.doubleRound_Down(aclossVo.getSumRealpay() + aclossVo.getRejectAmount()));
				aclossVo.setIndemnityPaid(CommonMethod.doubleRound_Down(aclossVo.getIndemnityPaid() + aclossVo.getRejectAmount()));
				aclossVo.setDeductBzamount(CommonMethod.doubleRound_Down(aclossVo.getDeductBzamount() + aclossVo.getRejectAmount()));
			}
		}
		return checkTrafficResult(accarinfoVoList, aclossVoList, acpersonlossVoList);

	}
	/**
	 * @Title: calculateTrafficAccompensate
	 * @Description: TODO(进行交强险计算)
	 * @author 李科
	 * @param trafficAccompensate
	 * @return void
	 * @throws
	 * @date 2012-9-25 下午2:26:53
	 */
	public String calculateTrafficAccompensate(List<AcpayItemVo> aclossVoList, List<AcpayItemVo> acpersonlossVoList, String reportno,Boolean isAdvance) {

		// 获得车辆信息
		List<AcCarInfo> accarinfoList = carLossService.findAccarinfoByReportNo(reportno);
		// 移出允许不保交强险信息
		List<AccarinfoVo> accarinfoVoList = new ArrayList<AccarinfoVo>();
		for (AcCarInfo acCarInfo : accarinfoList) {
			if (DataDictionary.ACCARINFO_ALLOWNOCI_YES.equals(acCarInfo.getAllowNoCi())) {
				continue;
			}
			AccarinfoVo accarinfoVo = new AccarinfoVo();

			CommonMethod.copyObjectToObject(acCarInfo, accarinfoVo);

			accarinfoVoList.add(accarinfoVo);
		}
		lossAdjustmentService.initDutyFlagCarInfo(accarinfoVoList);

		// 财务损失计算
		// 人伤损失计算
		// 医疗费用计算
		logger.debug("开始交强险计算");
		
		String BZlimitFlag = commonService.find2020BZSwithcValue(reportno);
		if(!isAdvance){//垫付只赔付医疗费
			lossAdjustmentService.lossAdjustment(aclossVoList, accarinfoVoList);
			List<AcpayItemVo> acpersonDeathlossVoList = new ArrayList<AcpayItemVo>();
			
			for (int i = 0; i < acpersonlossVoList.size(); i++) {
				AcpayItemVo acpayItemVo = acpersonlossVoList.get(i);
	
				if (DataDictionary.ACPERSONLOSS_DEATH.equals(acpayItemVo.getFeeTypeCode())) {
					acpersonDeathlossVoList.add(acpayItemVo);
				}
			}
			if (acpersonDeathlossVoList.size() > 0) {
				deathAdjustmentService.deathAdjustment(acpersonDeathlossVoList, accarinfoVoList,BZlimitFlag);
			}
		}
		List<AcpayItemVo> acpersonMedialossVoList = new ArrayList<AcpayItemVo>();
		for (int i = 0; i < acpersonlossVoList.size(); i++) {
			AcpayItemVo acpayItemVo = acpersonlossVoList.get(i);

			if (!DataDictionary.ACPERSONLOSS_DEATH.equals(acpayItemVo.getFeeTypeCode())) {
				acpersonMedialossVoList.add(acpayItemVo);
			}
		}
		if (acpersonMedialossVoList.size() > 0) {
			medicalLossService.medicaAdjustment(acpersonMedialossVoList, accarinfoVoList,BZlimitFlag);
		}
		// 减去扣减金额
		for (AcpayItemVo aclossVo : aclossVoList) {
			if (aclossVo.getRejectAmount() != null) {
				if (aclossVo.getSumRealpay() == null)
					aclossVo.setSumRealpay(0.0);
				if (aclossVo.getIndemnityPaid() == null)
					aclossVo.setIndemnityPaid(0.0);
				if (aclossVo.getDeductBzamount() == null)
					aclossVo.setDeductBzamount(0.0);
				aclossVo.setSumRealpay(CommonMethod.doubleRound_Down(aclossVo.getSumRealpay() + aclossVo.getRejectAmount()));
				aclossVo.setIndemnityPaid(CommonMethod.doubleRound_Down(aclossVo.getIndemnityPaid() + aclossVo.getRejectAmount()));
				aclossVo.setDeductBzamount(CommonMethod.doubleRound_Down(aclossVo.getDeductBzamount() + aclossVo.getRejectAmount()));
			}
		}
		for (int i = 0; i < acpersonlossVoList.size(); i++) {
			AcpayItemVo aclossVo = acpersonlossVoList.get(i);
			if (aclossVo.getRejectAmount() != null) {
				if (aclossVo.getSumRealpay() == null)
					aclossVo.setSumRealpay(0.0);
				if (aclossVo.getIndemnityPaid() == null)
					aclossVo.setIndemnityPaid(0.0);
				if (aclossVo.getDeductBzamount() == null)
					aclossVo.setDeductBzamount(0.0);
				aclossVo.setSumRealpay(CommonMethod.doubleRound_Down(aclossVo.getSumRealpay() + aclossVo.getRejectAmount()));
				aclossVo.setIndemnityPaid(CommonMethod.doubleRound_Down(aclossVo.getIndemnityPaid() + aclossVo.getRejectAmount()));
				aclossVo.setDeductBzamount(CommonMethod.doubleRound_Down(aclossVo.getDeductBzamount() + aclossVo.getRejectAmount()));
			}
		}
		return checkTrafficResult(accarinfoVoList, aclossVoList, acpersonlossVoList);

	}

	/**
	 * @Title: findCIAcCompensateByReportNo
	 * @Description: TODO(根据报案号查找交强理算书)
	 * @author Wei Xing
	 * @date 2012-12-7 下午2:43:02
	 * @param reportNo
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findCIAcCompensateByReportNo(java.lang.String)
	 */
	public List<AcCompensate> findCIAcCompensateByReportNo(String reportNo) {
		String hql = "from AcCompensate where reportNo=? and riskCode=? and underwriteflag not in ('5','6')";
		return this.findAllByHql(hql, reportNo, DataDictionary.RISKCODE_CI);
	}

	/**
	 * @Title: findBIAcCompensateByReportNo
	 * @Description: TODO(根据报案号查找商业理算书)
	 * @author Wei Xing
	 * @date 2012-12-7 下午2:44:34
	 * @param reportNo
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findBIAcCompensateByReportNo(java.lang.String)
	 */
	@SuppressWarnings("unchecked")
	public List<AcCompensate> findBIAcCompensateByReportNo(String reportNo) {
		String hql = "from AcCompensate where reportNo=? and riskCode <> ? and underwriteflag not in('5','6')";
		return this.findAllByHql(hql, reportNo, DataDictionary.RISKCODE_CI);
	}

    /**
     * @Title: findCAIAcCompensateByReportNo
     * @Description: TODO(根据报案号查找驾意险理算书)
     */
    @SuppressWarnings("unchecked")
    public List<AcCompensate> findCAIAcCompensateByReportNo(String reportNo) {
        String hql = "from AcCompensate where reportNo=? and riskCode = ? and underwriteflag not in('5','6')";
        return this.findAllByHql(hql, reportNo, DataDictionary.RISKCODE_0550);
    }

	/**
	 * @Title: findAccompensateByClaimNo
	 * @Description: TODO(立案号查询理算)
	 * @author 莫浩锋
	 * @param claimno
	 * @return
	 * @return AcCompensate
	 * @throws
	 * @date Dec 21, 2012 2:50:31 PM
	 */
	public AcCompensate findAccompensateByClaimNo(String claimno) {
		String hql = " from AcCompensate where claimno=? and (underWriteFlag=? or underWriteFlag=?) ";
		List accompensateList = this.findAllByHql(hql, claimno, DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_INIT,
				DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_RETURN);
		if (accompensateList.size() > 0) {
			return (AcCompensate) accompensateList.get(0);
		}
		return null;
	}
	public void calculateBiAccompensateSurvey(List<AcpayItemVo> bivoList,boolean isThirdSelect,String newRiskCodeFlag) {
		String reportNo= bivoList.get(0).getReportNo();
		// 首先按照险种汇总
		Iterator<String> kindcodes = findAllKindCode(bivoList);
		// 赔偿限额
		List<AclcItemKind> lcItemKindList = findLcItemKindList(reportNo);
		Boolean overLimitFlag=false;
		while (kindcodes.hasNext()) {
			String kindcode = kindcodes.next();
			// 进行三者险计算
			if (DataDictionary.KINDCODE_B.equals(kindcode)||DataDictionary.KINDCODE_20B.equals(kindcode)) {
				overLimitFlag =  calculate_B_Survey(bivoList, lcItemKindList);
			}
			// 车辆损失险
			if (DataDictionary.KINDCODE_A.equals(kindcode)) {
				calculate_A(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			if (DataDictionary.KINDCODE_20A.equals(kindcode)) {
				calculate_20A(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			if (DataDictionary.KINDCODE_A1.equals(kindcode)){
				calculate_A1(bivoList, lcItemKindList,newRiskCodeFlag);
				AclcItemCar itemCar = lcitemCarService.findBILcItemCarByReportNo(reportNo);
				if (itemCar.getCarDeviceAmount()!=null &&Double.valueOf(itemCar.getCarDeviceAmount())>0){
					calculate_A1X(bivoList,newRiskCodeFlag,Double.valueOf(itemCar.getCarDeviceAmount()));
				}
			}
			
			// 无法找到第三方特约险赔款
			if (DataDictionary.KINDCODE_I.equals(kindcode)) {
				calculate_I(bivoList, lcItemKindList,isThirdSelect,newRiskCodeFlag);
			}
			
			// 粤港、粤澳两地车区域扩展条款
			if (DataDictionary.KINDCODE_AH.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_AH,newRiskCodeFlag);
			}
			// 节假日行驶区域扩展特约条款
			if (DataDictionary.KINDCODE_C10.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_C10,newRiskCodeFlag);
			}
			// 异地出险住宿交通费特约条款
			if (DataDictionary.KINDCODE_C5.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_C5,newRiskCodeFlag);
			}
			// 车上货物责任险
			if (DataDictionary.KINDCODE_D2.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_D2,newRiskCodeFlag);
			}
			// 驾驶员责任险
			if (DataDictionary.KINDCODE_D3.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_D3,newRiskCodeFlag);
			}
			// 乘客责任险
			if (DataDictionary.KINDCODE_D4.equals(kindcode)) {
				calculate_D4(bivoList, lcItemKindList);
			}
			// 火灾、爆炸、自燃损失险
			if (DataDictionary.KINDCODE_E.equals(kindcode)) {
				calculate_E(bivoList, lcItemKindList);
			}
			// 玻璃单独破碎险
			if (DataDictionary.KINDCODE_F.equals(kindcode)) {
				calculate_F(bivoList, lcItemKindList);
			}
			// 全车盗抢附加高尔夫球具盗窃险//全车盗抢附加高尔夫球具盗窃险
			if (DataDictionary.KINDCODE_G0.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_G0,newRiskCodeFlag);
			}
			// 全车盗抢保险
			if (DataDictionary.KINDCODE_G1.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_G1,newRiskCodeFlag);
			}
			// 救助特约条款
			if (DataDictionary.KINDCODE_J.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_J,newRiskCodeFlag);
			}
			// 起重、装卸、挖掘车辆损失扩展条款
			if (DataDictionary.KINDCODE_K1.equals(kindcode)) {
				calculate_K1(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 特种车辆固定设备、仪器损坏扩展条款
			if (DataDictionary.KINDCODE_K2.equals(kindcode)) {
				calculate_K2(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 车身划痕损失险
			if (DataDictionary.KINDCODE_L.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_L,newRiskCodeFlag);
			}
			// 免税车辆关税责任险
			if (DataDictionary.KINDCODE_PA.equals(kindcode)) {
				// calculate_PA(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_PA,newRiskCodeFlag);
			}
			// 可选免赔额特约条款
			if (DataDictionary.KINDCODE_Q.equals(kindcode)) {
				calculate_Q(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 多次事故增加绝对免赔率保费优待特约条款
			if (DataDictionary.KINDCODE_Q1.equals(kindcode)) {
				calculate_Q1(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 指定专修厂特约条款
			if (DataDictionary.KINDCODE_Q3.equals(kindcode)) {
				calculate_Q3(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 交通事故精神损害赔偿责任险
			if (DataDictionary.KINDCODE_R.equals(kindcode)) {
				// calculate_R(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_R,newRiskCodeFlag);
			}
			// 精神损害抚慰金责任险
			if (DataDictionary.KINDCODE_R1.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_R1,newRiskCodeFlag);
			}
			// 机动车出境保险条款
			if (DataDictionary.KINDCODE_S.equals(kindcode)) {
				calculate_S(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 新车更换特约条款
			if (DataDictionary.KINDCODE_S1.equals(kindcode)) {
				// calculate_S1(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_S1,newRiskCodeFlag);
			}
			// 车辆停驶损失险
			if (DataDictionary.KINDCODE_T.equals(kindcode)) {
				// calculate_T(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_T,newRiskCodeFlag);
			}
			
			// 修理期间费用补偿险
			if (DataDictionary.KINDCODE_T1.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_T1,newRiskCodeFlag);
			}
			
			// 换件特约条款
			if (DataDictionary.KINDCODE_U.equals(kindcode)) {
				// calculate_U(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_U,newRiskCodeFlag);
			}
			// 污染责任保险
			if (DataDictionary.KINDCODE_V1.equals(kindcode)) {
				// calculate_V1(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_V1,newRiskCodeFlag);
			}
			// 发动机特别损失险
			if (DataDictionary.KINDCODE_X1.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_X1,newRiskCodeFlag);
			}
			
			// 发动机涉水损失险
			if (DataDictionary.KINDCODE_X3.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_X3,newRiskCodeFlag);
			}
			
			// 教练车特约条款
			if (DataDictionary.KINDCODE_Y3.equals(kindcode)) {
				// calculate_Y3(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_Y3,newRiskCodeFlag);
			}
			// 新增加设备损失险
			if (DataDictionary.KINDCODE_X.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_X,newRiskCodeFlag);
			}
			// 自燃损失险
			if (DataDictionary.KINDCODE_Z.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_Z,newRiskCodeFlag);
			}
			
			//20D3	机动车车上人员责任保险（驾驶员）
			if (DataDictionary.KINDCODE_20D3.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20D3);
			}
			//20D4	机动车车上人员责任保险（乘客）
			if (DataDictionary.KINDCODE_20D4.equals(kindcode)) {
				calculate_20D4(bivoList, lcItemKindList);
			}
			//20D2	附加车上货物责任险
			if (DataDictionary.KINDCODE_20D2.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20D2);
			}
			//20X	附加新增加设备损失险
			if (DataDictionary.KINDCODE_20X.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20X);
			}
			
			//20E2	附加车轮单独损失险
			if (DataDictionary.KINDCODE_20E2.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList,DataDictionary.KINDCODE_20E2);
			}
			//20E1	附加绝对免赔率特约险(机动车损失保险)
			//20E3	附加绝对免赔率特约险(机动车第三者责任保险)
			//20E4	附加绝对免赔率特约险(机动车车上人员责任保险（司机）)
			//20E5	附加绝对免赔率特约险(机动车车上人员责任保险（乘客）)
			
			//20R1	附加精神损害抚慰金责任险（机动车第三者责任保险）
			if (DataDictionary.KINDCODE_20R1.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20R1);
			}
			//20R2	附加精神损害抚慰金责任险（机动车车上人员责任保险（司机））
			if (DataDictionary.KINDCODE_20R2.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20R2);
			}
			//20R3	附加精神损害抚慰金责任险（机动车车上人员责任保险（乘客））
			if (DataDictionary.KINDCODE_20R3.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20R3);
			}
			//20Q6	附加特种车辆固定设备、仪器损坏扩展条款
			//无需计算公式
			//20Q5	附加起重、装卸、挖掘车辆损失扩展条款
			//无需计算公式
			//20T1	附加修理期间费用补偿险
			if (DataDictionary.KINDCODE_20T1.equals(kindcode)) {
				calculate_20T1(bivoList, lcItemKindList);
			}
			//20G1	机动车盗抢保险
			if (DataDictionary.KINDCODE_20G1.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20G1);
			}
			//20L	附加车身划痕损失险
			if (DataDictionary.KINDCODE_20L.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20L);
			}
			
			//20Y	附加医保外用药责任险（机动车第三者责任保险）
			if (DataDictionary.KINDCODE_20Y.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20Y);
			}
			//20Y1	附加医保外用药责任险（机动车车上人员责任保险（司机））
			if (DataDictionary.KINDCODE_20Y1.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20Y1);
			}
			//20Y2	附加医保外用药责任险（机动车车上人员责任保险（乘客））
			if (DataDictionary.KINDCODE_20Y2.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20Y2);
			}
			
			
			//20J	附加法定节假日限额翻倍险
		//三者险超过限额，则进行节假日翻倍判断
		if(overLimitFlag){
			String KindCode_J ="";
			//判断是否投保第三者责任保险法定节假日限额翻倍险并且是法定节假日
			for (AclcItemKind lcItemKind : lcItemKindList) {
				if(DataDictionary.RISKCODE_0518.equals(lcItemKind.getRiskCode())
						&&(DataDictionary.KINDCODE_J.equals(lcItemKind.getKindCode())||DataDictionary.KINDCODE_20J.equals(lcItemKind.getKindCode()))) {
					AcReport acReport = reportService.findByReportNo(lcItemKind.getReportNo());
					SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd");
					AgWorkDate  startDate = this.findUnique(AgWorkDate.class, "day", fmt.format(acReport.getDamageTime()));
					if(startDate==null ||startDate.getIsWorkDay()==null){
						throw new BusinessException("出险日期"+acReport.getDamageTime()+"未维护法定节假日基础数据，请联系管理员!", null);
					}
					if("1".equals(startDate.getIsWorkDay())){
						KindCode_J = lcItemKind.getKindCode();
					}
					break;
				}
			}
			//投保节假日翻倍险，并且家假日范围出险，计算节假日翻倍险赔款
			if(!"".equals(KindCode_J)){
				List<AcpayItemVo> acpayItemVoList_J=new ArrayList<AcpayItemVo>();
				//复制B险记录，险别调整为J险进行计算,调整金额设置为B险对应计算结果
				for (int i = bivoList.size()-1; i>=0 ;i--) {
					AcpayItemVo acpayItemVo = bivoList.get(i);
					if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_B)||acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20B)) {
						AcpayItemVo acpayItemVo_J= new AcpayItemVo();
		    			DataUtils.copySimpleObjectToTargetFromSource(acpayItemVo_J, acpayItemVo);
		    			acpayItemVo_J.setId(null);
		    			acpayItemVo_J.setKindCode(KindCode_J);
		    			acpayItemVo_J.setRejectAmount(-acpayItemVo_J.getSumRealpay());
		    			acpayItemVoList_J.add(acpayItemVo_J);
					}
					if (acpayItemVo.getKindCode().equals(KindCode_J)) {
						bivoList.remove(i);
					}
				}
				bivoList.addAll(acpayItemVoList_J);
				if(DataDictionary.KINDCODE_20J.equals(KindCode_J)){
					calculate_20J(bivoList, lcItemKindList);
				}else{
					calculate_J(bivoList, lcItemKindList);
				}
			}
		  }
		}
		
		// 调整调整金额
		for (AcpayItemVo acpayItemVo : bivoList) {
			Double rejectAmount = acpayItemVo.getRejectAmount() == null ? 0.0 : acpayItemVo.getRejectAmount();
			Double indemnityPaid = acpayItemVo.getIndemnityPaid();
			indemnityPaid = indemnityPaid + rejectAmount;
			Double exceDeductKindPaid = acpayItemVo.getExceDeductKindPaid() == null ? 0.0 : acpayItemVo.getExceDeductKindPaid();
			Double sumRealPay = indemnityPaid + exceDeductKindPaid;
			//modify by likuifu  20160703  LBUG-760  计算金额和不计免赔金额不能为负数  BEGIN
			if (acpayItemVo.getSumCalcuPay() != null && acpayItemVo.getSumCalcuPay() < 0.0) {
				acpayItemVo.setSumCalcuPay(0.0);
			}
			if (exceDeductKindPaid < 0.0) {
				acpayItemVo.setExceDeductKindPaid(0.0);
			}
			//modify by likuifu  20160703  LBUG-760  计算金额和不计免赔金额不能为负数    END
			if (sumRealPay < 0.0) {
				sumRealPay = 0.0;
			}
			if (indemnityPaid < 0.0) {
				indemnityPaid = 0.0;
			}
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealPay));
		}
	}

	/**
	 * @Title: CalculateBiAccompensate
	 * @Description: TODO(进行商业险计算)
	 * @author 李科
	 * @param trafficAccompensate
	 * @param isThirdSelect 是否选择无法找到第三方
	 * @return void
	 * @throws
	 * @date 2012-9-26 上午9:02:27
	 */
	public void calculateBiAccompensate(List<AcpayItemVo> bivoList,boolean isThirdSelect,String newRiskCodeFlag) {
		String reportNo= bivoList.get(0).getReportNo();
		// 首先按照险种汇总
		Iterator<String> kindcodes = findAllKindCode(bivoList);
		// 赔偿限额
		List<AclcItemKind> lcItemKindList = findLcItemKindList(reportNo);
		Boolean overLimitFlag=false;
		while (kindcodes.hasNext()) {
			String kindcode = kindcodes.next();
			// 进行三者险计算
			if (DataDictionary.KINDCODE_B.equals(kindcode)||DataDictionary.KINDCODE_20B.equals(kindcode)) {
				overLimitFlag =  calculate_B(bivoList, lcItemKindList);
			}
			// 车辆损失险
			if (DataDictionary.KINDCODE_A.equals(kindcode)) {
				calculate_A(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			if (DataDictionary.KINDCODE_20A.equals(kindcode)) {
				calculate_20A(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			if (DataDictionary.KINDCODE_A1.equals(kindcode)){
				calculate_A1(bivoList, lcItemKindList,newRiskCodeFlag);
				AclcItemCar itemCar = lcitemCarService.findBILcItemCarByReportNo(reportNo);
				if (itemCar.getCarDeviceAmount()!=null &&Double.valueOf(itemCar.getCarDeviceAmount())>0){
					calculate_A1X(bivoList,newRiskCodeFlag,Double.valueOf(itemCar.getCarDeviceAmount()));
				}
			}
			
			// 无法找到第三方特约险赔款
			if (DataDictionary.KINDCODE_I.equals(kindcode)) {
				calculate_I(bivoList, lcItemKindList,isThirdSelect,newRiskCodeFlag);
			}
			
			// 粤港、粤澳两地车区域扩展条款
			if (DataDictionary.KINDCODE_AH.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_AH,newRiskCodeFlag);
			}
			// 节假日行驶区域扩展特约条款
			if (DataDictionary.KINDCODE_C10.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_C10,newRiskCodeFlag);
			}
			// 异地出险住宿交通费特约条款
			if (DataDictionary.KINDCODE_C5.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_C5,newRiskCodeFlag);
			}
			// 车上货物责任险
			if (DataDictionary.KINDCODE_D2.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_D2,newRiskCodeFlag);
			}
			// 驾驶员责任险
			if (DataDictionary.KINDCODE_D3.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_D3,newRiskCodeFlag);
			}
			// 乘客责任险
			if (DataDictionary.KINDCODE_D4.equals(kindcode)) {
				calculate_D4(bivoList, lcItemKindList);
			}
			// 火灾、爆炸、自燃损失险
			if (DataDictionary.KINDCODE_E.equals(kindcode)) {
				calculate_E(bivoList, lcItemKindList);
			}
			// 玻璃单独破碎险
			if (DataDictionary.KINDCODE_F.equals(kindcode)) {
				calculate_F(bivoList, lcItemKindList);
			}
			// 全车盗抢附加高尔夫球具盗窃险//全车盗抢附加高尔夫球具盗窃险
			if (DataDictionary.KINDCODE_G0.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_G0,newRiskCodeFlag);
			}
			// 全车盗抢保险
			if (DataDictionary.KINDCODE_G1.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_G1,newRiskCodeFlag);
			}
			// 救助特约条款
			if (DataDictionary.KINDCODE_J.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_J,newRiskCodeFlag);
			}
			// 起重、装卸、挖掘车辆损失扩展条款
			if (DataDictionary.KINDCODE_K1.equals(kindcode)) {
				calculate_K1(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 特种车辆固定设备、仪器损坏扩展条款
			if (DataDictionary.KINDCODE_K2.equals(kindcode)) {
				calculate_K2(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 车身划痕损失险
			if (DataDictionary.KINDCODE_L.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_L,newRiskCodeFlag);
			}
			// 免税车辆关税责任险
			if (DataDictionary.KINDCODE_PA.equals(kindcode)) {
				// calculate_PA(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_PA,newRiskCodeFlag);
			}
			// 可选免赔额特约条款
			if (DataDictionary.KINDCODE_Q.equals(kindcode)) {
				calculate_Q(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 多次事故增加绝对免赔率保费优待特约条款
			if (DataDictionary.KINDCODE_Q1.equals(kindcode)) {
				calculate_Q1(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 指定专修厂特约条款
			if (DataDictionary.KINDCODE_Q3.equals(kindcode)) {
				calculate_Q3(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 交通事故精神损害赔偿责任险
			if (DataDictionary.KINDCODE_R.equals(kindcode)) {
				// calculate_R(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_R,newRiskCodeFlag);
			}
			// 精神损害抚慰金责任险
			if (DataDictionary.KINDCODE_R1.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_R1,newRiskCodeFlag);
			}
			// 机动车出境保险条款
			if (DataDictionary.KINDCODE_S.equals(kindcode)) {
				calculate_S(bivoList, lcItemKindList,newRiskCodeFlag);
			}
			// 新车更换特约条款
			if (DataDictionary.KINDCODE_S1.equals(kindcode)) {
				// calculate_S1(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_S1,newRiskCodeFlag);
			}
			// 车辆停驶损失险
			if (DataDictionary.KINDCODE_T.equals(kindcode)) {
				// calculate_T(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_T,newRiskCodeFlag);
			}
			
			// 修理期间费用补偿险
			if (DataDictionary.KINDCODE_T1.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_T1,newRiskCodeFlag);
			}
			
			// 换件特约条款
			if (DataDictionary.KINDCODE_U.equals(kindcode)) {
				// calculate_U(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_U,newRiskCodeFlag);
			}
			// 污染责任保险
			if (DataDictionary.KINDCODE_V1.equals(kindcode)) {
				// calculate_V1(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_V1,newRiskCodeFlag);
			}
			// 发动机特别损失险
			if (DataDictionary.KINDCODE_X1.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_X1,newRiskCodeFlag);
			}
			
			// 发动机涉水损失险
			if (DataDictionary.KINDCODE_X3.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_X3,newRiskCodeFlag);
			}
			
			// 教练车特约条款
			if (DataDictionary.KINDCODE_Y3.equals(kindcode)) {
				// calculate_Y3(bivoList, lcItemKindList);
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_Y3,newRiskCodeFlag);
			}
			// 新增加设备损失险
			if (DataDictionary.KINDCODE_X.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_X,newRiskCodeFlag);
			}
			// 自燃损失险
			if (DataDictionary.KINDCODE_Z.equals(kindcode)) {
				calculate_Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_Z,newRiskCodeFlag);
			}
			
			//20D3	机动车车上人员责任保险（驾驶员）
			if (DataDictionary.KINDCODE_20D3.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20D3);
			}
			//20D4	机动车车上人员责任保险（乘客）
			if (DataDictionary.KINDCODE_20D4.equals(kindcode)) {
				calculate_20D4(bivoList, lcItemKindList);
			}
			//20D2	附加车上货物责任险
			if (DataDictionary.KINDCODE_20D2.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20D2);
			}
			//20X	附加新增加设备损失险
			if (DataDictionary.KINDCODE_20X.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20X);
			}
			
			
			//20E1	附加绝对免赔率特约险(机动车损失保险)
			//20E3	附加绝对免赔率特约险(机动车第三者责任保险)
			//20E4	附加绝对免赔率特约险(机动车车上人员责任保险（司机）)
			//20E5	附加绝对免赔率特约险(机动车车上人员责任保险（乘客）)
			
			//20E2	附加车轮单独损失险
			if (DataDictionary.KINDCODE_20E2.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList,DataDictionary.KINDCODE_20E2);
			}
			//20G1	机动车盗抢保险
			if (DataDictionary.KINDCODE_20G1.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20G1);
			}
			//20L	附加车身划痕损失险
			if (DataDictionary.KINDCODE_20L.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20L);
			}
			//20R1	附加精神损害抚慰金责任险（机动车第三者责任保险）
			if (DataDictionary.KINDCODE_20R1.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20R1);
			}
			//20R2	附加精神损害抚慰金责任险（机动车车上人员责任保险（司机））
			if (DataDictionary.KINDCODE_20R2.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20R2);
			}
			//20R3	附加精神损害抚慰金责任险（机动车车上人员责任保险（乘客））
			if (DataDictionary.KINDCODE_20R3.equals(kindcode)) {
				calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20R3);
			}
			//20Q6	附加特种车辆固定设备、仪器损坏扩展条款
			//无需计算公式
			//20Q5	附加起重、装卸、挖掘车辆损失扩展条款
			//无需计算公式
			//20T1	附加修理期间费用补偿险
			if (DataDictionary.KINDCODE_20T1.equals(kindcode)) {
				calculate_20T1(bivoList, lcItemKindList);
			}
			
			//20Y	附加医保外用药责任险（机动车第三者责任保险）
            if (DataDictionary.KINDCODE_20Y.equals(kindcode)) {
                calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20Y);
            }
            //20Y1	附加医保外用药责任险（机动车车上人员责任保险（司机））
            if (DataDictionary.KINDCODE_20Y1.equals(kindcode)) {
                calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20Y1);
            }
            //20Y2	附加医保外用药责任险（机动车车上人员责任保险（乘客））
            if (DataDictionary.KINDCODE_20Y2.equals(kindcode)) {
                calculate_20Normal(bivoList, lcItemKindList, DataDictionary.KINDCODE_20Y2);
            }
			
			//20J	附加法定节假日限额翻倍险
		//三者险超过限额，则进行节假日翻倍判断
		if(overLimitFlag){
			String KindCode_J ="";
			//判断是否投保第三者责任保险法定节假日限额翻倍险并且是法定节假日
			for (AclcItemKind lcItemKind : lcItemKindList) {
				if(DataDictionary.RISKCODE_0518.equals(lcItemKind.getRiskCode())
						&&(DataDictionary.KINDCODE_J.equals(lcItemKind.getKindCode())||DataDictionary.KINDCODE_20J.equals(lcItemKind.getKindCode()))) {
					AcReport acReport = reportService.findByReportNo(lcItemKind.getReportNo());
					SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd");
					AgWorkDate  startDate = this.findUnique(AgWorkDate.class, "day", fmt.format(acReport.getDamageTime()));
					if(startDate==null ||startDate.getIsWorkDay()==null){
						throw new BusinessException("出险日期"+acReport.getDamageTime()+"未维护法定节假日基础数据，请联系管理员!", null);
					}
					if("1".equals(startDate.getIsWorkDay())){
						KindCode_J = lcItemKind.getKindCode();
					}
					break;
				}
			}
			//投保节假日翻倍险，并且家假日范围出险，计算节假日翻倍险赔款
			if(!"".equals(KindCode_J)){
				List<AcpayItemVo> acpayItemVoList_J=new ArrayList<AcpayItemVo>();
				//复制B险记录，险别调整为J险进行计算,调整金额设置为B险对应计算结果
				for (int i = bivoList.size()-1; i>=0 ;i--) {
					AcpayItemVo acpayItemVo = bivoList.get(i);
					if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_B)||acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20B)) {
						AcpayItemVo acpayItemVo_J= new AcpayItemVo();
		    			DataUtils.copySimpleObjectToTargetFromSource(acpayItemVo_J, acpayItemVo);
		    			acpayItemVo_J.setId(null);
		    			acpayItemVo_J.setKindCode(KindCode_J);
		    			acpayItemVo_J.setRejectAmount(-acpayItemVo_J.getSumRealpay());
		    			acpayItemVoList_J.add(acpayItemVo_J);
					}
					if (acpayItemVo.getKindCode().equals(KindCode_J)) {
						bivoList.remove(i);
					}
				}
				bivoList.addAll(acpayItemVoList_J);
				if(DataDictionary.KINDCODE_20J.equals(KindCode_J)){
					calculate_20J(bivoList, lcItemKindList);
				}else{
					calculate_J(bivoList, lcItemKindList);
				}
			}
		  }
		}
		
		
		
		// 调整调整金额
		for (AcpayItemVo acpayItemVo : bivoList) {
			Double rejectAmount = acpayItemVo.getRejectAmount() == null ? 0.0 : acpayItemVo.getRejectAmount();
			Double indemnityPaid = acpayItemVo.getIndemnityPaid();
			indemnityPaid = indemnityPaid + rejectAmount;
			Double exceDeductKindPaid = acpayItemVo.getExceDeductKindPaid() == null ? 0.0 : acpayItemVo.getExceDeductKindPaid();
			Double sumRealPay = indemnityPaid + exceDeductKindPaid;
			//modify by likuifu  20160703  LBUG-760  计算金额和不计免赔金额不能为负数  BEGIN
			if (acpayItemVo.getSumCalcuPay() != null && acpayItemVo.getSumCalcuPay() < 0.0) {
				acpayItemVo.setSumCalcuPay(0.0);
			}
			if (exceDeductKindPaid < 0.0) {
				acpayItemVo.setExceDeductKindPaid(0.0);
			}
			//modify by likuifu  20160703  LBUG-760  计算金额和不计免赔金额不能为负数    END
			if (sumRealPay < 0.0) {
				sumRealPay = 0.0;
			}
			if (indemnityPaid < 0.0) {
				indemnityPaid = 0.0;
			}
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealPay));
		}
	}

	/**
	 * @Title: calculate_Z
	 * @Description: TODO(自燃损失险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:41:35 AM
	 */
	private void calculate_Z(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		Double limitPay = 0.0;
		// 限额
		for (AclcItemKind aclcItem : lcItemKindList) {
			if (aclcItem.getKindCode().equals(DataDictionary.KINDCODE_Z)) {
				limitPay = aclcItem.getAmount();
				break;
			}
		}

		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_Z)) {

				Double lossamount = this.calculateAcpayItemVoSingleSumpay(acpayItemVo); // 赔款金额
				// 受损金额: 核定金额不超过保险金额
				Double sumdefpay = lossamount > limitPay ? limitPay : lossamount;
				// 实际施救费用×（保险财产价值÷实际施救财产总价值）×（1－20％）

				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;

				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;
				Double compensateRate = acpayItemVo.getCompensateRate() != null ? 100 : acpayItemVo.getCompensateRate();
				Double sumCalcuPay = sumdefpay * compensateRate / 100 * (100 - dutyDeductibleRate) / 100 * (100 - absDeductibleRate) / 100
						- absDeductibleAmount;

				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					Double exceDeductKindPaid = sumdefpay * compensateRate / 100 * (dutyDeductibleRate) / 100
							* ((100 - absDeductibleRate) / 100) * (dutyDeductibleRate / 100);
					acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
					logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
					// 调整位差

					Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
					Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
					if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
						if (resumCalcuPay > reExceDeductKindPaid) {
							acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));

						} else {
							acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
						}
					}
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}

				// 赔款金额
				Double indemnityPaid = acpayItemVo.getSumCalcuPay();
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();

				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
				logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
			}
		}
	}

	/**
	 * @Title: calculate_X
	 * @Description: TODO(新增加设备损失险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:41:20 AM
	 */
	private void calculate_X(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcItemKind = null;
		// 保险金额
		for (AclcItemKind aclcitemKind : lcItemKindList) {
			if (aclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_X)) {
				aclcItemKind = aclcitemKind;
				break;
			}
		}
		if (aclcItemKind == null) {
			return;
		}
		for (AcpayItemVo acpayItemVo : bivoList) {

			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_X)) {
				Double lossmount = acpayItemVo.getSumLossAmount() == null ? 0.0 : acpayItemVo.getSumLossAmount(); // 损失金额
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0; // 责任赔对率
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0; // 绝对免赔率

				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0; // 绝对免赔额
				Double compensateRate = acpayItemVo.getCompensateRate() != null ? 100 : acpayItemVo.getCompensateRate();
				Double realcarMoney = commonService.findActualValue(acpayItemVo.getReportNo()); // 出险时实际价值
				// 损失金额与出险时实际价值对比取小值
				Double reallossmount = lossmount > realcarMoney ? realcarMoney : lossmount;
				acpayItemVo.setSumLossAmount(reallossmount);
				Double realLossAmount = this.calculateAcpayItemVoSingleSumpay(acpayItemVo); // 损失金额
				acpayItemVo.setSumLossAmount(lossmount);

				// 受损金额 与保额 取小值
				Double sumdefpay = realLossAmount > aclcItemKind.getAmount() ? aclcItemKind.getAmount() : realLossAmount;
				// 赔款=（核定修理费用－残值）×事故责任比例×(1－免赔率之和)
				Double sumCalcuPay = sumdefpay * compensateRate / 100 * (100 - dutyDeductibleRate) / 100 * (100 - absDeductibleRate) / 100
						- absDeductibleAmount;

				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));

				// 免赔额
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					Double exceDeductKindPaid = sumdefpay * compensateRate / 100 * (100 - absDeductibleRate / 100)
							* (dutyDeductibleRate / 100);
					BigDecimal bd3 = new BigDecimal(exceDeductKindPaid);
					bd3 = bd3.setScale(2, bd3.ROUND_HALF_UP);
					acpayItemVo.setExceDeductKindPaid(bd3.doubleValue());

					logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
					// 调整位差

					Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
					Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
					if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
						if (resumCalcuPay > reExceDeductKindPaid) {
							acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));

						} else {
							acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
						}
					}
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}

				// 赔款金额
				Double indemnityPaid = acpayItemVo.getSumCalcuPay();
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				// 实际价值
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));

			}
		}
	}

	/**
	 * @Title: calculate_Y3
	 * @Description: TODO(教练车特约条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:41:07 AM
	 */
	private void calculate_Y3(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_Y3)) {

				Double lossmount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
				acpayItemVo.setIndemnityPaid(lossmount);
				// 比较赔偿金额与保险金额返回最小值
				Double minRealpay = findMinRealpay(acpayItemVo, lcItemKindList);
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(minRealpay));
				// 赔款金额
				Double indemnityPaid = minRealpay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				// 实际价值
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}

	/**
	 * @Title: calculate_X1
	 * @Description: TODO(发动机特别损失险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:40:53 AM
	 */
	private void calculate_X1(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		AclcItemKind aclcItemKind = null;
		// 保险金额
		for (AclcItemKind aclcitemKind : lcItemKindList) {
			if (aclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_X1)) {
				aclcItemKind = aclcitemKind;
				break;
			}
		}
		if (aclcItemKind == null) {
			return;
		}

		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_X1)) {
				// 核定发动机修理费用＋车辆其他部分核定修理费用”应小于等于被保险机动车出险时的实际价值
				// Double realcarMoney =
				// commonService.findActualValue(acpayItemVo.getReportNo()); //

				// 赔偿计算金额
				Double lossamount = calculateAcpayItemVoSingleSumpyForA(acpayItemVo, aclcItemKind.getAmount(),newRiskCodeFlag);

				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;
				Double compensateRate = acpayItemVo.getCompensateRate() != null ? 100 : acpayItemVo.getCompensateRate();
				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double liabilityrate = acpayItemVo.getLiabilityRate() == null ? 100.0 : acpayItemVo.getLiabilityRate();
				// 车损险限额比较后取低者计算赔款
				lossamount = lossamount > aclcItemKind.getAmount() ? aclcItemKind.getAmount() : lossamount;
				// 核定损失×事故责任比例×赔付比例×分摊比例×（1-事故免赔率）×(1-绝对免赔率之和)
				Double sumCalcuPay = lossamount * liabilityrate / 100 * (100 - dutyDeductibleRate) / 100 * (100 - absDeductibleRate) / 100	- absDeductibleAmount;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));

				// 不计免赔赔款
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					Double exceDeductKindPaid = lossamount * compensateRate / 100 * dutyDeductibleRate / 100 * (100 - absDeductibleRate)/ 100;
					acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
					logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
					// 调整位差

					Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
					Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
					if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
						if (resumCalcuPay > reExceDeductKindPaid) {
							acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));

						} else {
							acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
						}
					}
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}

				// 赔款金额
				Double indemnityPaid = acpayItemVo.getSumCalcuPay();
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}

	/**
	 * @Title: calculate_V1
	 * @Description: TODO(污染责任保险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:40:26 AM
	 */
	private void calculate_V1(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_V1)) {

				Double lossmount = calculateAcpayItemVoSingleSumpay(acpayItemVo); // 损失金额
				acpayItemVo.setIndemnityPaid(lossmount);

				// 比较赔偿金额与保险金额返回最小值
				Double minRealpay = findMinRealpay(acpayItemVo, lcItemKindList);
				minRealpay = minRealpay * 0.8;// 赔款=责任限额×（1－20％）
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(minRealpay));
				// 赔款金额
				Double indemnityPaid = minRealpay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				// 实际价值
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}

	/**
	 * @Title: calculate_U
	 * @Description: TODO(换件特约条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:40:09 AM
	 */
	private void calculate_U(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_U)) {
				// 残值
				// 赔偿计算金额
				Double sumdefpay = calculateAcpayItemVoSingleSumpay(acpayItemVo);
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;

				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;

				Double sumCalcuPay = sumdefpay * (100 - dutyDeductibleRate) / 100 * (100 - absDeductibleRate) / 100 - absDeductibleAmount;

				Double indemnityPaid = sumCalcuPay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					Double exceDeductKindPaid = sumdefpay * (absDeductibleRate / 100) * ((100 - dutyDeductibleRate) / 100);
					acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
					logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}

	/**
	 * @Title: calculate_T
	 * @Description: TODO(车辆停驶损失险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:39:45 AM
	 */
	private void calculate_T(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_T)) {

				Double sumdefpay = acpayItemVo.getSumLossAmount() != null ? acpayItemVo.getSumLossAmount() : 0.0;
				Double sumCalcuPay = sumdefpay;// 直接赔付
				Double indemnityPaid = sumCalcuPay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				Double sumRealpay = indemnityPaid;
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
				logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
			}
		}
	}

	/**
	 * @Title: calculate_S1
	 * @Description: TODO(新车更换特约条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:38:10 AM
	 */
	private void calculate_S1(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_S1)) {

				Double lossmount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
				acpayItemVo.setIndemnityPaid(lossmount);
				// 比较赔偿金额与保险金额返回最小值
				Double minRealpay = findMinRealpay(acpayItemVo, lcItemKindList);
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(minRealpay));
				// 赔款金额
				Double indemnityPaid = minRealpay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				// 实际价值
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}

	/**
	 * @Title: calculate_S
	 * @Description: TODO(机动车出境保险条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:36:42 AM
	 */
	private void calculate_S(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_S,newRiskCodeFlag);
	}

	/**
	 * @Title: calculate_R
	 * @Description: TODO(交通事故精神损害赔偿责任险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:36:16 AM
	 */
	private void calculate_R(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcItemKind = null;
		// 保险金额
		for (AclcItemKind aclcitemKind : lcItemKindList) {
			if (aclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_R)) {
				aclcItemKind = aclcitemKind;
				break;
			}
		}
		if (aclcItemKind == null) {
			return;
		}

		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_R)) {
				// 赔偿计算金额
				Double lossamount = this.calculateAcpayItemVoSingleSumpay(acpayItemVo);

				// 取低者计算赔款
				lossamount = lossamount > aclcItemKind.getAmount() ? aclcItemKind.getAmount() : lossamount;
				// 赔款=（应由被保险人承担的精神损害赔偿-交强险精神损失的赔款）×（1－20％）
				Double sumCalcuPay = lossamount * 0.8;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));

				// 赔款金额
				Double indemnityPaid = sumCalcuPay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				// 实际价值
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}

	/**
	 * @Title: calculate_Q3
	 * @Description: TODO(指定专修厂特约条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:35:55 AM
	 */
	private void calculate_Q3(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_Q3,newRiskCodeFlag);
	}

	/**
	 * @Title: calculate_Q1
	 * @Description: TODO(多次事故增加免赔率)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:21:38 AM
	 */
	private void calculate_Q1(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_Q1,newRiskCodeFlag);
	}

	/**
	 * @Title: calculate_Q
	 * @Description: TODO(可选免赔额特约条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:35:02 AM
	 */
	private void calculate_Q(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_Q,newRiskCodeFlag);
	}

	/**
	 * @Title: calculate_PA
	 * @Description: TODO(免税机动车关税责任险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:35:08 AM
	 */
	private void calculate_PA(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_PA)) {
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;

				Double compensateRate = acpayItemVo.getCompensateRate() != null ? 100 : acpayItemVo.getCompensateRate();
				Double lossmount = calculateAcpayItemVoSingleSumpay(acpayItemVo);

				// 取最小金额
				acpayItemVo.setIndemnityPaid(lossmount);
				Double tmpSumCalcuPay = findMinRealpay(acpayItemVo, lcItemKindList);
				// 赔款金额
				Double sumCalcuPay = 0.0;
				sumCalcuPay = tmpSumCalcuPay * (compensateRate / 100) * ((100 - dutyDeductibleRate) / 100)
						* ((100 - absDeductibleRate) / 100);
				Double indemnityPaid = sumCalcuPay;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				// 实际价值
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}

	/**
	 * @Title: calculate_L
	 * @Description: TODO(车身划痕损失险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date Dec 10, 2012 10:35:32 AM
	 */
	private void calculate_L(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {

			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_L)) {
				Double sumdefpay = calculateAcpayItemVoSingleSumpay(acpayItemVo);

				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;

				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;
				acpayItemVo.setIndemnityPaid(sumdefpay);
				Double tmpSumCalcuPay = findMinRealpay(acpayItemVo, lcItemKindList);
				// 取剩余限额,目前取不到
				Double surLimitPay = tmpSumCalcuPay;
				tmpSumCalcuPay = tmpSumCalcuPay > surLimitPay ? surLimitPay : tmpSumCalcuPay;

				Double sumCalcuPay = tmpSumCalcuPay * (100 - dutyDeductibleRate) / 100 * (100 - absDeductibleRate) / 100
						- absDeductibleAmount;

				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					Double exceDeductKindPaid = tmpSumCalcuPay * (100 - absDeductibleRate / 100) * (dutyDeductibleRate / 100);
					acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
					logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
					// 调整位差
					Double remainPay = tmpSumCalcuPay - absDeductibleAmount - acpayItemVo.getSumCalcuPay()
							- acpayItemVo.getExceDeductKindPaid();
					if (remainPay > 0.005) {
						Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
						Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
						if (resumCalcuPay > reExceDeductKindPaid) {
							acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));

						} else {
							acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
						}
					}
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}

				// 赔款金额
				Double indemnityPaid = acpayItemVo.getSumCalcuPay();
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();

				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
				logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
			}
		}
	}

	/**
	 * @Title: calculate_K2
	 * @Description: TODO(特种车辆固定设备、仪器损坏扩展条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:42:36 PM
	 */
	private void calculate_K2(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_K2,newRiskCodeFlag);
	}

	/**
	 * @Title: calculate_K1
	 * @Description: TODO(起重、装卸、挖掘车辆损失扩展条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:40:16 PM
	 */
	private void calculate_K1(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_K1,newRiskCodeFlag);
	}

	/**
	 * 
	 * @Title: calculate_LossCar
	 * @Description: TODO(车辆损失险赔款计算)
	 * @author 何颖
	 * @param bivoList
	 * @param lcItemKindList
	 * @param kindCode
	 * @return void
	 * @throws
	 * @date Dec 7, 2012 5:19:11 PM
	 */
	private void calculate_LossCar(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList, String kindCode,String newRiskCodeFlag) {
		Double limitPay = 0.0; // 限额
		// 车损险限额
		for (AclcItemKind lcItemKind : lcItemKindList) {
			if (kindCode.equals(lcItemKind.getKindCode())) {
				limitPay = lcItemKind.getAmount();
				break;
			}
		}

		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				// 赔偿计算金额
				Double lossamount = calculateAcpayItemVoSingleSumpyForA(acpayItemVo, limitPay,newRiskCodeFlag);
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;
				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double liabilityrate = acpayItemVo.getLiabilityRate() == null ? 100.0 : acpayItemVo.getLiabilityRate();
				acpayItemVo.setIndemnityPaid(lossamount);
				lossamount = findMinRealpay(acpayItemVo, lcItemKindList);
				Double sumCalcuPay = 0.0;
				if(kindCode.startsWith(DataDictionary.KINDCODE_20)){
					sumCalcuPay = lossamount  * liabilityrate / 100 * (100 - absDeductibleRate) / 100;
				}else{
					sumCalcuPay = lossamount  * liabilityrate / 100 * (100 - dutyDeductibleRate) / 100 * (100 - absDeductibleRate) / 100;
				}
				// 扣绝对免赔额考虑不计免赔条款的赔款，并且只能车损损失赔偿，施救费不扣除
				if (acpayItemVo.getRescueFee() <= 0.005) {
					sumCalcuPay = sumCalcuPay - absDeductibleAmount;
				}
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));

				if(!kindCode.startsWith(DataDictionary.KINDCODE_20)){
					// 不计免赔赔款
					if (acpayItemVo.isExceDeductKindPaidFlag()) {
						Double exceDeductKindPaid = lossamount  * liabilityrate / 100 * (dutyDeductibleRate / 100) * ((100 - absDeductibleRate) / 100);
						acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
						// 调整位差
						Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
						Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
						if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
							if (resumCalcuPay > reExceDeductKindPaid) {
								acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));
								
							} else {
								acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
							}
						}
					} else {
						acpayItemVo.setExceDeductKindPaid(0.0);
					}
				}

				// 赔款金额
				Double indemnityPaid = acpayItemVo.getSumCalcuPay();
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				// 最终损失
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				// 判断最终赔款是否有超保险金额
				if (sumRealpay > limitPay) {
					sumRealpay = limitPay;
				}

				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}
	private void calculate_I(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,boolean isThirdSelect,String newRiskCodeFlag) {
		Double limitPay = 0.0; // 限额
		// 车损险限额  限额用a险的， 无法找到第三方责任险
		for (AclcItemKind lcItemKind : lcItemKindList) {
			if (DataDictionary.KINDCODE_A.equals(lcItemKind.getKindCode())) {
				limitPay = lcItemKind.getAmount();
				break;
			}
		}
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_I)) {
				acpayItemVo.setIndemnityPaid(0.0);
				acpayItemVo.setSumCalcuPay(0.0);
				acpayItemVo.setExceDeductKindPaid(0.0);
				acpayItemVo.setSumRealpay(0.0);
				// 赔偿计算金额
				Double lossamount = calculateAcpayItemVoSingleSumpyForA(acpayItemVo, limitPay,newRiskCodeFlag);
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;
				Double liabilityrate = acpayItemVo.getLiabilityRate() == null ? 100.0 : acpayItemVo.getLiabilityRate();
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;
				acpayItemVo.setIndemnityPaid(lossamount);
				lossamount = findMinRealpay(acpayItemVo, lcItemKindList);
				Double sumCalcuPay = lossamount  * liabilityrate / 100  * (100 - dutyDeductibleRate)/100* absDeductibleRate/100; 
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				acpayItemVo.setExceDeductKindPaid(0.0);
				// 赔款金额
				Double indemnityPaid = acpayItemVo.getSumCalcuPay();
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				// 最终损失
				Double sumRealpay = indemnityPaid;
				// 判断最终赔款是否有超保险金额
				if (sumRealpay > limitPay) {
					sumRealpay = limitPay;
				}
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}
	/**
	 * @Title: calculate_J
	 * @Description: TODO(第三者责任保险法定节假日限额翻倍险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:37:09 PM
	 */
	private void calculate_J(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		Double sumPay = 0.0;
		// 计算总损失
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_J)) {
				sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
				kindLossList.add(acpayItemVo);
			}
		}
		// 设置限额
		Double limitPay = 0.0;
		for (AclcItemKind lcItemKind : lcItemKindList) {
			if (DataDictionary.KINDCODE_B.equals(lcItemKind.getKindCode())) {
				limitPay = lcItemKind.getAmount() * 2;
				break;
			}
		}

		List<AcCarInfo> accarinfoList = carLossService.findAccarinfoByReportNo(bivoList.get(0).getReportNo());
		AcCarInfo itemCarInfo = this.findItemCarInfo(accarinfoList);// 标的车
		Double shareRatio = 1.0;
		if (DataDictionary.MAINTRAILERCODE_MAIN.equals(itemCarInfo.getMainTrailerCode())) {
			shareRatio = limitPay / (limitPay + itemCarInfo.getMainTrailerLimit());
			limitPay = limitPay * shareRatio;
		}
		if (DataDictionary.MAINTRAILERCODE_TRAILER.equals(itemCarInfo.getMainTrailerCode())) {
			shareRatio = limitPay / (limitPay + itemCarInfo.getMainTrailerLimit());
			limitPay = itemCarInfo.getMainTrailerLimit() * shareRatio;
		}
		Double sumRealPay = 0.0;
		Double remainPay = 0.0; // 实际尾差

		for (int i = 0; i < kindLossList.size(); i++) {
			AcpayItemVo acpayItemVo = kindLossList.get(i);
			Double lossamount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
			Double sumdefpay = acpayItemVo.getSumLossAmount();
			Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate();
			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();

			if (sumdefpay == null)
				sumdefpay = 0.0;
			if (dutyDeductibleRate == null)
				dutyDeductibleRate = 100.0;
			if (absDeductibleRate == null)
				absDeductibleRate = 100.0;
			if (absDeductibleAmount == null)
				absDeductibleAmount = 0.0;
			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;
			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
				lossamount = CommonMethod.doubleRound_Down(lossamount);
			}

			Double preSumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
			// 调节尾差
			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				preSumCalcuPay += remainPay;
				preSumCalcuPay = CommonMethod.doubleRound_Down(preSumCalcuPay);
				remainPay = 0.0;
			}
			Double sumCalcuPay = preSumCalcuPay * (100 - dutyDeductibleRate) / 100 - absDeductibleAmount;

			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
			Double exceDeductKindPaid = preSumCalcuPay * dutyDeductibleRate / 100;

			remainPay += sumCalcuPay + exceDeductKindPaid - CommonMethod.doubleRound_Down(exceDeductKindPaid) - CommonMethod.doubleRound_Down(sumCalcuPay);
			if (acpayItemVo.isExceDeductKindPaidFlag()) {
				acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
				Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
				Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
				if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
					if (resumCalcuPay > reExceDeductKindPaid) {
						acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));
						remainPay -= 0.01;
					} else {
						remainPay -= 0.01;
						acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
					}
				}
				logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
			} else {
				acpayItemVo.setExceDeductKindPaid(0.0);
			}
			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
		}
	}
	private void calculate_20J(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		Double sumPay = 0.0;
		// 计算总损失
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20J)) {
				sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
				kindLossList.add(acpayItemVo);
			}
		}
		// 设置限额
		Double limitPay = 0.0;
		for (AclcItemKind lcItemKind : lcItemKindList) {
			if (DataDictionary.KINDCODE_20B.equals(lcItemKind.getKindCode())) {
				limitPay = lcItemKind.getAmount() * 2;
				break;
			}
		}
		
		List<AcCarInfo> accarinfoList = carLossService.findAccarinfoByReportNo(bivoList.get(0).getReportNo());
		AcCarInfo itemCarInfo = this.findItemCarInfo(accarinfoList);// 标的车
		Double shareRatio = 1.0;
		if (DataDictionary.MAINTRAILERCODE_MAIN.equals(itemCarInfo.getMainTrailerCode())) {
			shareRatio = limitPay / (limitPay + itemCarInfo.getMainTrailerLimit());
			limitPay = limitPay * shareRatio;
		}
		if (DataDictionary.MAINTRAILERCODE_TRAILER.equals(itemCarInfo.getMainTrailerCode())) {
			shareRatio = limitPay / (limitPay + itemCarInfo.getMainTrailerLimit());
			limitPay = itemCarInfo.getMainTrailerLimit() * shareRatio;
		}
		Double sumRealPay = 0.0;
		
		for (int i = 0; i < kindLossList.size(); i++) {
			AcpayItemVo acpayItemVo = kindLossList.get(i);
			Double lossamount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
			Double sumdefpay = acpayItemVo.getSumLossAmount();
			Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate();
			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
			
			if (sumdefpay == null)
				sumdefpay = 0.0;
			if (dutyDeductibleRate == null)
				dutyDeductibleRate = 100.0;
			if (absDeductibleRate == null)
				absDeductibleRate = 100.0;
			if (absDeductibleAmount == null)
				absDeductibleAmount = 0.0;
			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;
			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
				lossamount = CommonMethod.doubleRound_Down(lossamount);
			}

			Double sumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100 - absDeductibleAmount;
			
			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
			acpayItemVo.setExceDeductKindPaid(0.0);
			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
		}
	}

	/**
	 * @Title: calculate_G1
	 * @Description: TODO(全车盗抢保险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param robberBackFlag
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:36:50 PM
	 */
	private void calculate_G1(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_G1)) {
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;
				Double liabilityrate = acpayItemVo.getLiabilityRate() == null ? 100.0 : acpayItemVo.getLiabilityRate();
				Double compensateRate = acpayItemVo.getCompensateRate() != null ? 100 : acpayItemVo.getCompensateRate();

				// 赔偿计算金额
				Double lossamount = this.calculateAcpayItemVoSingleSumpayForInsAmount(acpayItemVo);
				acpayItemVo.setIndemnityPaid(lossamount);
				Double tmpSumCalcuPay = findMinRealpay(acpayItemVo, lcItemKindList);

				// 赔款金额
				Double sumCalcuPay = 0.0;
				sumCalcuPay = tmpSumCalcuPay * liabilityrate / 100 * (compensateRate / 100) * ((100 - dutyDeductibleRate) / 100)	* ((100 - absDeductibleRate) / 100);
				Double indemnityPaid = sumCalcuPay;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				// 不计免赔赔款
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					Double exceDeductKindPaid = tmpSumCalcuPay * liabilityrate / 100 * (compensateRate / 100) * (dutyDeductibleRate / 100) ;
					acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}

				// 实际价值
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}

	/**
	 * @Title: calculate_G0
	 * @Description: TODO(全车盗抢附加高尔夫球具盗窃险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:34:42 PM
	 */
	private void calculate_G0(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcItemKind = null;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_G0)) {
				aclcItemKind = tmpaclcitemKind;
				break;
			}
		}
		if (aclcItemKind == null) {
			return;
		}

		for (AcpayItemVo acpayitem : bivoList) {
			if (acpayitem.getKindCode().equals(DataDictionary.KINDCODE_G0)) {

				Double lossAmount = this.calculateAcpayItemVoSingleSumpay(acpayitem);
				// 高尔夫损失与保额相比取小额
				Double sumpay = lossAmount > aclcItemKind.getAmount() ? aclcItemKind.getAmount() : lossAmount;
				// 高尔夫球×（1－20％）
				sumpay = sumpay * 0.8;
				// 计算金额
				acpayitem.setSumRealpay(CommonMethod.doubleRound_Down(sumpay));
				// 赔款金额
				Double indemnityPaid = sumpay;
				acpayitem.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				// 实际赔偿
				acpayitem.setSumRealpay(CommonMethod.doubleRound_Down(indemnityPaid));

			}
		}
	}

	/**
	 * @Title: calculate_F
	 * @Description: TODO(玻璃险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:34:47 PM
	 */
	private void calculate_F(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_F)) {
				// 赔偿计算金额
				Double sumdefpay = calculateAcpayItemVoSingleSumpay(acpayItemVo);

				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;

				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();

				Double sumCalcuPay = sumdefpay * compensateRate / 100 * (100 - absDeductibleRate) / 100 - absDeductibleAmount;

				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				acpayItemVo.setExceDeductKindPaid(0.0);

				Double indemnityPaid = acpayItemVo.getSumCalcuPay();
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();

				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));

			}
		}
	}
	/**
	 * @Title: calculate_20E2
	 * @Description: TODO(附加车轮单独损失险  计算)
	 * @author 李魁服
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date 2020-9-5 下午3:36:34
	 */
	private void calculate_20E2(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20E2)) {
				// 赔偿计算金额
				Double sumdefpay = calculateAcpayItemVoSingleSumpay(acpayItemVo);
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;
				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
				Double sumCalcuPay = sumdefpay * compensateRate / 100 * (100 - absDeductibleRate) / 100 - absDeductibleAmount;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				acpayItemVo.setExceDeductKindPaid(0.0);
				
				Double indemnityPaid = acpayItemVo.getSumCalcuPay();
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}
	}
	
	/**
	 * @Title: calculate_20T1
	 * @Description: TODO(附加修理期间费用补偿险   计算)
	 * @author 李魁服
	 * @param bivoList
	 * @param lcItemKindList
	 * @return void
	 * @throws
	 * @date 2020-9-15 下午4:27:48
	 */
	private void calculate_20T1(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcitemKind = null;
		// 比较赔偿金额与保险金额返回最小值
		Double limitPay = 0.0;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if (DataDictionary.KINDCODE_20T1.equals(tmpaclcitemKind.getKindCode())) {
				aclcitemKind =tmpaclcitemKind;
				limitPay = tmpaclcitemKind.getAmount();;
				break;
			}
		}
	   //20T1附加修理期间费用补偿险
	   Double lPay = commonService.getSumRealpayLbyPolicyNo(aclcitemKind.getPolicyNo(),DataDictionary.KINDCODE_20T1);
	   limitPay = limitPay -lPay;
	   logger.debug(aclcitemKind.getReportNo()+"-"+aclcitemKind.getPolicyNo()+"-"+lPay+"|||--->"+limitPay);
	   if(limitPay<0.0){
		  limitPay =0.0;
	   }
		Double sumPay = 0.0;
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		// 计算总损失
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20T1)) {
				sumPay +=  acpayItemVo.getSumLossAmount() == null ? 0.0 : acpayItemVo.getSumLossAmount();
				kindLossList.add(acpayItemVo);
			}
		}
		Double sumRealPay = 0.0;
		for (int i = 0; i < kindLossList.size(); i++) {
			AcpayItemVo acpayItemVo = kindLossList.get(i);
			if (!acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20T1)) {
				continue;
			}
			Double lossamount=acpayItemVo.getSumLossAmount() == null ? 0.0 : acpayItemVo.getSumLossAmount();
			acpayItemVo.setDeductBzamount(0.0);
			acpayItemVo.setShareRate(100.0);
			acpayItemVo.setLiabilityRate(100.0);
			acpayItemVo.setAbsDeductibleRate(0.0);
			acpayItemVo.setAbsDeductibleAmount(0.0);
			acpayItemVo.setCompensateRate(100.0);
			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;
			
			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
			}
			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(lossamount));
			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			logger.debug(acpayItemVo.getLossItemName() + "获赔" + lossamount);
			
		}
	
		
	}

	/**
	 * @Title: calculate_E
	 * @Description: TODO(火灾、爆炸、自燃损失险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:34:02 PM
	 */
	private void calculate_E(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcitemKind = null;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_E)) {
				aclcitemKind = tmpaclcitemKind;
				break;
			}
		}
		if (aclcitemKind == null) {
			return;
		}
		// 比较赔偿金额与保险金额返回最小值
		Double limitPay = aclcitemKind.getAmount();

		Double sumPay = 0.0;
		Double remainPay = 0.0; // 实际尾差
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		// 计算总损失
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_E)) {
				sumPay += this.calculateAcpayItemVoSingleSumpayForInsAmount(acpayItemVo);
				kindLossList.add(acpayItemVo);
			}
		}
		Double sumRealPay = 0.0;

		for (int i = 0; i < kindLossList.size(); i++) {

			AcpayItemVo acpayItemVo = kindLossList.get(i);
			if (!acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_E)) {
				continue;
			}
			Double lossamount = this.calculateAcpayItemVoSingleSumpayForInsAmount(acpayItemVo);
			Double liabilityrate = acpayItemVo.getLiabilityRate() == null ? 100.0 : acpayItemVo.getLiabilityRate();
			Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() == null ? 100.0 : acpayItemVo.getDutyDeductibleRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() == null ? 100.0 : acpayItemVo.getAbsDeductibleRate();
			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() == null ? 0.0 : acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();

			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;

			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
			}
			Double presumCalcuPay = lossamount * liabilityrate / 100  * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
			// 调节尾差
			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				presumCalcuPay += remainPay;
			}
			Double sumCalcuPay = presumCalcuPay * (100 - dutyDeductibleRate) / 100 - absDeductibleAmount;
			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
			Double exceDeductKindPaid = presumCalcuPay * (dutyDeductibleRate / 100);
			remainPay += sumCalcuPay + exceDeductKindPaid - CommonMethod.doubleRound_Down(exceDeductKindPaid)
					- CommonMethod.doubleRound_Down(sumCalcuPay);

			if (acpayItemVo.isExceDeductKindPaidFlag()) {
				acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
				Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
				Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
				if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
					if (resumCalcuPay > reExceDeductKindPaid) {
						remainPay -= 0.01;
						acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));
					} else {
						remainPay -= 0.01;
						acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
					}
				}
				logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
			} else {
				acpayItemVo.setExceDeductKindPaid(0.0);
			}

			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
		}
	}

	/**
	 * @Title: calculate_D4
	 * @Description: TODO(乘客责任险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:31:43 PM
	 */
	private void calculate_D4(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcitemKind = null;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_D4)) {
				aclcitemKind = tmpaclcitemKind;
				break;
			}
		}
		if (aclcitemKind == null) {
			return;
		}

		Map<BigDecimal, List<AcpayItemVo>> itemMap = new HashMap<BigDecimal, List<AcpayItemVo>>();
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_D4)) {
				List<AcpayItemVo> itemList = itemMap.get(acpayItemVo.getDefLossTaskId());
				if (itemList != null) {
					itemList.add(acpayItemVo);
				} else {
					itemList = new ArrayList<AcpayItemVo>();
					itemList.add(acpayItemVo);
					itemMap.put(acpayItemVo.getDefLossTaskId(), itemList);

				}
			}
		}
		Iterator<List<AcpayItemVo>> itemIterator = itemMap.values().iterator();
		Double limitMount = aclcitemKind.getUnitAmount();
		int personNum = itemMap.keySet().size();

		// 如果车上人数量大于投保座位数量,则设置限额等于=限额*投保数量/人数
		if (personNum > aclcitemKind.getQuantity()) {
			limitMount = limitMount * (aclcitemKind.getQuantity() / personNum);
		}
		while (itemIterator.hasNext()) {
			List<AcpayItemVo> itemList = itemIterator.next();
			calculate_D(itemList, limitMount);
		}

	}
	/**
	 * @Title: calculate_20D4
	 * @Description: TODO(乘客责任险)
	 * @author
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:31:43 PM
	 */
	private void calculate_20D4(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcitemKind = null;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_20D4)) {
				aclcitemKind = tmpaclcitemKind;
				break;
			}
		}
		if (aclcitemKind == null) {
			return;
		}

		Map<BigDecimal, List<AcpayItemVo>> itemMap = new HashMap<BigDecimal, List<AcpayItemVo>>();
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20D4)) {
				List<AcpayItemVo> itemList = itemMap.get(acpayItemVo.getDefLossTaskId());
				if (itemList != null) {
					itemList.add(acpayItemVo);
				} else {
					itemList = new ArrayList<AcpayItemVo>();
					itemList.add(acpayItemVo);
					itemMap.put(acpayItemVo.getDefLossTaskId(), itemList);
				}
			}
		}
		Iterator<List<AcpayItemVo>> itemIterator = itemMap.values().iterator();
		Double limitMount = aclcitemKind.getUnitAmount();
		int personNum = itemMap.keySet().size();

		// 如果车上人数量大于投保座位数量,则设置限额等于=限额*投保数量/人数
		if (personNum > aclcitemKind.getQuantity()) {
			limitMount = limitMount * (aclcitemKind.getQuantity() / personNum);
		}
		while (itemIterator.hasNext()) {
			List<AcpayItemVo> itemList = itemIterator.next();
			calculate_20D(itemList, limitMount);
		}
	}

	/**
	 * @Title: calculate_D4
	 * @Description: TODO(乘客责任险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:31:43 PM
	 */
	private void calculate_D3(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcitemKind = null;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_D3)) {
				aclcitemKind = tmpaclcitemKind;
				break;
			}
		}
		if (aclcitemKind == null) {
			return;
		}

		Map<BigDecimal, List<AcpayItemVo>> itemMap = new HashMap<BigDecimal, List<AcpayItemVo>>();
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_D3)) {
				List<AcpayItemVo> itemList = itemMap.get(acpayItemVo.getDefLossTaskId());
				if (itemList != null) {
					itemList.add(acpayItemVo);
				} else {
					itemList = new ArrayList<AcpayItemVo>();
					itemList.add(acpayItemVo);
					itemMap.put(acpayItemVo.getDefLossTaskId(), itemList);

				}
			}
		}
		Iterator<List<AcpayItemVo>> itemIterator = itemMap.values().iterator();
		while (itemIterator.hasNext()) {
			List<AcpayItemVo> itemList = itemIterator.next();
			calculate_D(itemList, aclcitemKind.getAmount());
		}

	}

	/**
	 * @Title: calculate_D2
	 * @Description: TODO(车上货物责任险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:29:37 PM
	 */
	private void calculate_D2(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		AclcItemKind aclcitemKind = null;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_D2)) {
				aclcitemKind = tmpaclcitemKind;
				break;
			}
		}
		if (aclcitemKind == null) {
			return;
		}

		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_D2)) {

				// 赔偿计算金额
				Double sumdefpay = calculateAcpayItemVoSingleSumpay(acpayItemVo);
				// （核定财产损失+核定施救费用-残值-交强险赔款）×事故责任比例”大于等于保险金额时：赔款＝保险金额×（1－20%）
				if (sumdefpay > aclcitemKind.getAmount()) {
					sumdefpay = aclcitemKind.getAmount();
				}

				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;

				// Double absDeductibleAmount =
				// acpayItemVo.getAbsDeductibleAmount() != null ?
				// acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() != null ? acpayItemVo.getDutyDeductibleRate() : 0.0;
				Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() == null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				// Double sumCalcuPay = sumdefpay * (100 - dutyDeductibleRate) /
				// 100 * (100 - absDeductibleRate) / 100 - absDeductibleAmount;
				Double sumCalcuPay = sumdefpay * (compensateRate / 100) * (100 - 20) / 100 * (100 - absDeductibleRate) / 100
						- absDeductibleAmount;

				Double indemnityPaid = sumCalcuPay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					Double exceDeductKindPaid = sumdefpay * (compensateRate / 100) * 20 / 100 * (100 - absDeductibleRate) / 100;
					acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
					logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();

				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
				logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);

			}
		}
	}

	/**
	 * @Title: calculate_C5
	 * @Description: TODO(异地出险住宿费特约条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:26:57 PM
	 */
	private void calculate_C5(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {

		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_C5)) {

				Double sumdefpay = acpayItemVo.getSumLossAmount() != null ? acpayItemVo.getSumLossAmount() : 0.0;
				Double sumCalcuPay = sumdefpay;// 直接赔付
				Double indemnityPaid = sumCalcuPay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				Double sumRealpay = indemnityPaid;
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
				logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
			}
		}
	}

	/**
	 * @Title: calculate_C10
	 * @Description: TODO(节假日行驶区域扩展特约条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:16:51 PM
	 */
	private void calculate_C10(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_C10)) {

				Double lossmount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
				acpayItemVo.setIndemnityPaid(lossmount);
				// 比较赔偿金额与保险金额返回最小值
				Double minRealpay = findMinRealpay(acpayItemVo, lcItemKindList);
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(minRealpay));
				// 赔款金额
				Double indemnityPaid = minRealpay;
				acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

				// 实际价值
				Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
				acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			}
		}

	}

	/**
	 * @Title: calculate_AH
	 * @Description: TODO(粤港、粤澳两地车区域扩展条款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:27:50 PM
	 */
	private void calculate_Normal(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList, String kindCode,String newRiskCodeFlag) {
		AclcItemKind aclcitemKind = null;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if(DataDictionary.KINDCODE_X1.equals(kindCode)||DataDictionary.KINDCODE_X3.equals(kindCode)){//发动机涉水损失险使用车险保险金额
				if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_A)) {
					aclcitemKind = tmpaclcitemKind;
					break;
				}
			}else{
				if (tmpaclcitemKind.getKindCode().equals(kindCode)) {
					aclcitemKind = tmpaclcitemKind;
					break;
				}
			}
		}
		if (aclcitemKind == null) {
			return;
		}
		// 比较赔偿金额与保险金额返回最小值
		Double limitPay = aclcitemKind.getAmount();
		if(DataDictionary.KINDCODE_L.equals(kindCode)){
			Double lPay = commonService.getSumRealpayLbyPolicyNo(aclcitemKind.getPolicyNo(),DataDictionary.KINDCODE_L);
			limitPay = limitPay -lPay;
			logger.debug(aclcitemKind.getReportNo()+"-"+aclcitemKind.getPolicyNo()+"-"+lPay+"|||--->"+limitPay);
			if(limitPay<0.0){
				limitPay =0.0;
			}
		}

		Double sumPay = 0.0;
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		// 计算总损失
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				if(DataDictionary.KINDCODE_G1.equals(kindCode)||DataDictionary.KINDCODE_E.equals(kindCode)
						||DataDictionary.KINDCODE_Z.equals(kindCode)||DataDictionary.KINDCODE_X1.equals(kindCode)||DataDictionary.KINDCODE_X3.equals(kindCode)){
					sumPay += calculateAcpayItemVoSingleSumpayForInsAmount(acpayItemVo);
				}else{
					sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
				}
				kindLossList.add(acpayItemVo);
			}
		}
		Double sumRealPay = 0.0;
		Double remainPay = 0.0; // 实际尾差
		for (int i = 0; i < kindLossList.size(); i++) {
			AcpayItemVo acpayItemVo = kindLossList.get(i);
			if (!acpayItemVo.getKindCode().equals(kindCode)) {
				continue;
			}
			
			Double lossamount=0.0;
			if(DataDictionary.KINDCODE_G1.equals(kindCode)||DataDictionary.KINDCODE_E.equals(kindCode)
					||DataDictionary.KINDCODE_Z.equals(kindCode)||DataDictionary.KINDCODE_X1.equals(kindCode)||DataDictionary.KINDCODE_X3.equals(kindCode)){
				lossamount = calculateAcpayItemVoSingleSumpayForInsAmount(acpayItemVo);
			}else{
				lossamount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
			}
			
			Double liabilityrate = acpayItemVo.getLiabilityRate() == null ? 100.0 : acpayItemVo.getLiabilityRate();
			Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() == null ? 100.0 : acpayItemVo.getDutyDeductibleRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() == null ? 100.0 : acpayItemVo.getAbsDeductibleRate();
			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() == null ? 0.0 : acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();

			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;

			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
			}

			Double presumCalcuPay=0.0;
			if(DataDictionary.KINDCODE_G1.equals(kindCode)||DataDictionary.KINDCODE_E.equals(kindCode)
					||DataDictionary.KINDCODE_Z.equals(kindCode)||DataDictionary.KINDCODE_X1.equals(kindCode)||DataDictionary.KINDCODE_X3.equals(kindCode)){
				if(DataDictionary.KINDCODE_G1.equals(kindCode) && "1".equals(newRiskCodeFlag)){//新条款G1计算公式为：
					presumCalcuPay = lossamount * liabilityrate / 100 * (compensateRate / 100) ;
				}else{
					presumCalcuPay = lossamount * liabilityrate / 100 * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
				}
			}else{
				presumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
			}
			// 调节尾差
			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				presumCalcuPay += remainPay;
			}
			Double sumCalcuPay =0.0;
			if(DataDictionary.KINDCODE_G1.equals(kindCode) && "1".equals(newRiskCodeFlag)){//新条款G1计算公式为：
				sumCalcuPay = presumCalcuPay * (100 - absDeductibleRate - dutyDeductibleRate) / 100 - absDeductibleAmount;
			}else{
				sumCalcuPay = presumCalcuPay * (100 - dutyDeductibleRate) / 100 - absDeductibleAmount;
			}

			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));

			Double exceDeductKindPaid = presumCalcuPay * (dutyDeductibleRate / 100);
			remainPay += sumCalcuPay + exceDeductKindPaid - CommonMethod.doubleRound_Down(exceDeductKindPaid) - CommonMethod.doubleRound_Down(sumCalcuPay);

			if (acpayItemVo.isExceDeductKindPaidFlag()) {
				acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
				Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
				Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
				if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
					if (resumCalcuPay > reExceDeductKindPaid) {
						remainPay -= 0.01;
						acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));
					} else {
						remainPay -= 0.01;
						acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
					}
				}
				logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
			} else {
				acpayItemVo.setExceDeductKindPaid(0.0);
			}

			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);

		}
	}
	/**
	 * @Title: calculate_20Normal
	 * @Description: TODO(2020车险综合改革 公共计算公式)
	 * @author 李魁服
	 * @param bivoList
	 * @param lcItemKindList
	 * @param kindCode
	 * @return void
	 * @throws
	 * @date 2020-9-5 下午3:04:10
	 */
	private void calculate_20Normal(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList, String kindCode) {
		AclcItemKind aclcitemKind = null;
		// 保险金额
		for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
			if(DataDictionary.KINDCODE_X1.equals(kindCode)||DataDictionary.KINDCODE_X3.equals(kindCode)){//发动机涉水损失险使用车险保险金额
				if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_A)) {
					aclcitemKind = tmpaclcitemKind;
					break;
				}
			}else{
				if (tmpaclcitemKind.getKindCode().equals(kindCode)) {
					aclcitemKind = tmpaclcitemKind;
					break;
				}
			}
		}
		if (aclcitemKind == null) {
			return;
		}
		// 比较赔偿金额与保险金额返回最小值
		Double limitPay = aclcitemKind.getAmount();

		//20L附加划痕损失险  20T1附加修理期间费用补偿险   20E2附加车轮单独损失险
		if(DataDictionary.KINDCODE_20L.equals(kindCode) || DataDictionary.KINDCODE_20T1.equals(kindCode)
				|| DataDictionary.KINDCODE_20E2.equals(kindCode)){
			Double lPay = commonService.getSumRealpayLbyPolicyNo(aclcitemKind.getPolicyNo(),kindCode);
			limitPay = limitPay -lPay;
			logger.debug(aclcitemKind.getReportNo()+"-"+aclcitemKind.getPolicyNo()+"-"+lPay+"|||--->"+limitPay);
			if(limitPay<0.0){
				limitPay =0.0;
			}
		}

		Double sumPay = 0.0;
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		// 计算总损失
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				if(DataDictionary.KINDCODE_20G1.equals(kindCode)){   //20盗抢险
					sumPay += calculateAcpayItemVoSingleSumpayForInsAmount(acpayItemVo);
				}else{
					sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
				}
				kindLossList.add(acpayItemVo);
			}
		}
		Double sumRealPay = 0.0;
		for (int i = 0; i < kindLossList.size(); i++) {
			AcpayItemVo acpayItemVo = kindLossList.get(i);
			if (!acpayItemVo.getKindCode().equals(kindCode)) {
				continue;
			}
			Double lossamount=0.0;
			if(DataDictionary.KINDCODE_20G1.equals(kindCode)){//20盗抢险
				lossamount = calculateAcpayItemVoSingleSumpayForInsAmount(acpayItemVo);
			}else{
				lossamount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
			}

			Double liabilityrate = acpayItemVo.getLiabilityRate() == null ? 100.0 : acpayItemVo.getLiabilityRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() == null ? 100.0 : acpayItemVo.getAbsDeductibleRate();
			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() == null ? 0.0 : acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;
			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
			}
			Double presumCalcuPay=0.0;
			if(DataDictionary.KINDCODE_20G1.equals(kindCode)){   //20盗抢险
				presumCalcuPay = lossamount * liabilityrate / 100 * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
			}else{
				presumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
			}
			Double sumCalcuPay =0.0;
			sumCalcuPay = presumCalcuPay  - absDeductibleAmount;
			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
			acpayItemVo.setIndemnityPaid(acpayItemVo.getSumCalcuPay());
			acpayItemVo.setSumRealpay(acpayItemVo.getSumCalcuPay());
			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
		}
	}

	/**
	 * @Title: calculate_A
	 * @Description: TODO(车辆损失险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 3:49:04 PM
	 */
	private void calculate_A(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_A,newRiskCodeFlag);
	}
	private void calculate_A1(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_A1,newRiskCodeFlag);
	}
	
	private void calculate_20A(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList,String newRiskCodeFlag) {
		calculate_LossCar(bivoList, lcItemKindList, DataDictionary.KINDCODE_20A,newRiskCodeFlag);
	}
	
	/**
	 * @Title: calculate_A1X
	 * @Description: TODO(全面型条款新增设备计算方法)
	 * @author 张东磊
	 * @param bivoList
	 * @param newRiskCodeFlag
	 * @param limitPay
	 * @return void
	 * @throws
	 * @date 2018-3-2 下午3:33:07
	 */
	private void calculate_A1X(List<AcpayItemVo> bivoList,String newRiskCodeFlag,Double limitPay) {
		Double sumPay = 0.0;
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		// 计算总损失
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_A1)&&acpayItemVo.getDeviceItemLoss()!=null &&acpayItemVo.getDeviceItemLoss()>0) {
				sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
				kindLossList.add(acpayItemVo);
			}
		}
		Double sumRealPay = 0.0;
		Double remainPay = 0.0; // 实际尾差
		for (int i = 0; i < kindLossList.size(); i++) {
			AcpayItemVo acpayItemVo = kindLossList.get(i);
			if (acpayItemVo.getDeviceItemLoss()==null) {
				continue;
			}
			Double lossamount= calculateAcpayItemVoSingleSumpay(acpayItemVo);
			Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate() == null ? 100.0 : acpayItemVo.getDutyDeductibleRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() == null ? 100.0 : acpayItemVo.getAbsDeductibleRate();
			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() == null ? 0.0 : acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;

			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
			}

			Double presumCalcuPay=0.0;
			presumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
			// 调节尾差
			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				presumCalcuPay += remainPay;
			}
			Double sumCalcuPay =0.0;
			sumCalcuPay = presumCalcuPay * (100 - dutyDeductibleRate) / 100 - absDeductibleAmount;
			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));

			Double exceDeductKindPaid = presumCalcuPay * (dutyDeductibleRate / 100);
			remainPay += sumCalcuPay + exceDeductKindPaid - CommonMethod.doubleRound_Down(exceDeductKindPaid) - CommonMethod.doubleRound_Down(sumCalcuPay);

			if (acpayItemVo.isExceDeductKindPaidFlag()) {
				acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
				Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
				Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
				if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
					if (resumCalcuPay > reExceDeductKindPaid) {
						remainPay -= 0.01;
						acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));
					} else {
						remainPay -= 0.01;
						acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
					}
				}
				logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
			} else {
				acpayItemVo.setExceDeductKindPaid(0.0);
			}
			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);

		}
	}
	
	/**
	 * @Title: findMinRealpay
	 * @Description: TODO(比较赔偿金额与保额大小)
	 * @author 莫浩锋
	 * @param acpayItemVo
	 * @return
	 * @return Double
	 * @throws
	 * @date Oct 8, 2012 5:02:08 PM
	 */
	private Double findMinRealpay(AcpayItemVo acpayItemVo, List<AclcItemKind> lcItemKindList) {
		Double indemnityPaid = acpayItemVo.getIndemnityPaid();// 赔偿金额
		Double amount = 0.00;
		for (AclcItemKind lcItemKind : lcItemKindList) {
			if(DataDictionary.KINDCODE_I.equals(acpayItemVo.getKindCode())){//如果是I险则取A险限额
				if (lcItemKind.getKindCode().equals(DataDictionary.KINDCODE_A)) {
					amount = lcItemKind.getAmount();
					break;
				}
			}else{
				if (lcItemKind.getKindCode().equals(acpayItemVo.getKindCode())) {
					amount = lcItemKind.getAmount();
					break;
				}
			}
		}
		return indemnityPaid < amount ? indemnityPaid : amount;
	}

	private Boolean calculate_B_Survey(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList){
		Boolean overLimitFlag=false;
		Double sumPay = 0.0;
		// 计算总损失
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_B)||acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20B)) {
				sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
				kindLossList.add(acpayItemVo);
			}
		}
		// 设置限额
		Double limitPay = 0.0;
		for (AclcItemKind lcItemKind : lcItemKindList) {
			if (DataDictionary.KINDCODE_B.equals(lcItemKind.getKindCode())||DataDictionary.KINDCODE_20B.equals(lcItemKind.getKindCode())) {
				limitPay = lcItemKind.getAmount();
				break;
			}
		}

		//List<AcCarInfo> accarinfoList = carLossService.findAccarinfoByReportNo(bivoList.get(0).getReportNo());
		//AcCarInfo itemCarInfo = this.findItemCarInfo(accarinfoList);// 标的车
		Double shareRatio = 1.0;
		if (DataDictionary.MAINTRAILERCODE_MAIN.equals("1")) {
			shareRatio = limitPay / (limitPay + 0);
			limitPay = limitPay * shareRatio;
		}

		Double sumRealPay = 0.0;
		Double remainPay = 0.0; // 实际尾差

		for (int i = 0; i < kindLossList.size(); i++) {
			AcpayItemVo acpayItemVo = kindLossList.get(i);
			Double lossamount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
			Double sumdefpay = acpayItemVo.getSumLossAmount();
			Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate();

			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
			// Double deductamount = acpayItemVo.getDeductamount();

			if (sumdefpay == null)
				sumdefpay = 0.0;
			if (dutyDeductibleRate == null)
				dutyDeductibleRate = 100.0;
			if (absDeductibleRate == null)
				absDeductibleRate = 100.0;

			if (absDeductibleAmount == null)
				absDeductibleAmount = 0.0;
			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
				overLimitFlag=true;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;

			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
				lossamount = CommonMethod.doubleRound_Down(lossamount);

			}
			Double sumCalcuPay=0.0;
			if(acpayItemVo.getKindCode().startsWith(DataDictionary.KINDCODE_20)){
				sumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100  - absDeductibleAmount;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				acpayItemVo.setExceDeductKindPaid(0.0);
			}else{
				Double preSumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
				// 调节尾差
				if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
					preSumCalcuPay += remainPay;
					preSumCalcuPay = CommonMethod.doubleRound_Down(preSumCalcuPay);
					remainPay = 0.0;
				}
				sumCalcuPay = preSumCalcuPay * (100 - dutyDeductibleRate) / 100 - absDeductibleAmount;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				Double exceDeductKindPaid = preSumCalcuPay * dutyDeductibleRate / 100;
				remainPay += sumCalcuPay + exceDeductKindPaid - CommonMethod.doubleRound_Down(exceDeductKindPaid)
						- CommonMethod.doubleRound_Down(sumCalcuPay);
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
					Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
					Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
					if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
						if (resumCalcuPay > reExceDeductKindPaid) {
							acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));
							remainPay -= 0.01;
						} else {
							remainPay -= 0.01;
							acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
						}
					}
					logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}
			}

			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));

			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
		}

		/*
		 * //如果有绝对免赔率，绝对免赔额，调整系数不一致，不进行调尾差 Double recompensateRate=null; Double
		 * reabsDeductibleRate=null; Double redutyDeductibleRate=null; for
		 * (AcpayItemVo acpayItemVo: bivoList) { if
		 * (DataDictionary.KINDCODE_B.equals(acpayItemVo.getKindCode())) {
		 * if(recompensateRate==null){
		 * recompensateRate=acpayItemVo.getCompensateRate(); } else{
		 * if((recompensateRate-acpayItemVo.getCompensateRate())>0.00001){ } }
		 * if(reabsDeductibleRate==null){
		 * reabsDeductibleRate=acpayItemVo.getAbsDeductibleAmount(); }
		 * if(redutyDeductibleRate==null){
		 * redutyDeductibleRate=acpayItemVo.getDutyDeductibleRate(); } } }
		 * 
		 * if (sumPay > limitPay) { sumPay=limitPay; } // 调整位差 Double remainPay =
		 * sumPay - calPay; if (remainPay > 0.005 && sumPay > limitPay) { for
		 * (AcpayItemVo acpayItemVo : bivoList) { if (remainPay < 0.005) {
		 * break; } System.out.println("wcccc="+acpayItemVo.getLossItemName()+"
		 * ="+acpayItemVo.getSumLossAmount() +" "+
		 * acpayItemVo.getDeductBzamount() +" "+acpayItemVo.getSumRealpay()); if
		 * (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_B) &&
		 * ((acpayItemVo.getSumLossAmount() - acpayItemVo.getDeductBzamount() -
		 * acpayItemVo.getSumRealpay()) > 0.005)) {
		 * System.out.println("jjjjrr"+remainPay);
		 * acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(acpayItemVo.getIndemnityPaid() +
		 * 0.01));
		 * acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() +
		 * 0.01));
		 * acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(acpayItemVo.getSumRealpay() +
		 * 0.01)); remainPay -= 0.01; } } }
		 */
		/*
		 * // 调整位差 if (sumPay > limitPay) { if ((limitPay - sumRealPay) > 0.01) {
		 * for (int i = 0; i < bivoList.size(); i++) { AcpayItemVo acpayItemVo =
		 * bivoList.get(i); if
		 * (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_B)) {
		 * Double remainPay = limitPay - sumRealPay;
		 * 
		 * acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(acpayItemVo.getIndemnityPaid() +
		 * remainPay));
		 * acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() +
		 * remainPay));
		 * acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(acpayItemVo.getSumRealpay() +
		 * remainPay)); break; } } } }
		 */
		return overLimitFlag;
	
		
	}
	
	/**
	 * @Title: calculateThird
	 * @Description: TODO(计算三者)
	 * @author 李科
	 * @return void
	 * @throws
	 * @date 2012-9-26 上午9:31:54
	 */
	private Boolean calculate_B(List<AcpayItemVo> bivoList, List<AclcItemKind> lcItemKindList) {
		Boolean overLimitFlag=false;
		Double sumPay = 0.0;
		// 计算总损失
		List<AcpayItemVo> kindLossList = new ArrayList<AcpayItemVo>();
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);

			if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_B)||acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_20B)) {
				sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
				kindLossList.add(acpayItemVo);
			}
		}
		// 设置限额
		Double limitPay = 0.0;
		for (AclcItemKind lcItemKind : lcItemKindList) {
			if (DataDictionary.KINDCODE_B.equals(lcItemKind.getKindCode())||DataDictionary.KINDCODE_20B.equals(lcItemKind.getKindCode())) {
				limitPay = lcItemKind.getAmount();
				break;
			}
		}

		List<AcCarInfo> accarinfoList = carLossService.findAccarinfoByReportNo(bivoList.get(0).getReportNo());
		AcCarInfo itemCarInfo = this.findItemCarInfo(accarinfoList);// 标的车
		Double shareRatio = 1.0;
		if (DataDictionary.MAINTRAILERCODE_MAIN.equals(itemCarInfo.getMainTrailerCode())) {
			shareRatio = limitPay / (limitPay + itemCarInfo.getMainTrailerLimit());
			limitPay = limitPay * shareRatio;
		}
		if (DataDictionary.MAINTRAILERCODE_TRAILER.equals(itemCarInfo.getMainTrailerCode())) {
			shareRatio = limitPay / (limitPay + itemCarInfo.getMainTrailerLimit());
			limitPay = itemCarInfo.getMainTrailerLimit() * shareRatio;
		}

		Double sumRealPay = 0.0;
		Double remainPay = 0.0; // 实际尾差

		for (int i = 0; i < kindLossList.size(); i++) {
			AcpayItemVo acpayItemVo = kindLossList.get(i);
			Double lossamount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
			Double sumdefpay = acpayItemVo.getSumLossAmount();
			Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate();

			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
			// Double deductamount = acpayItemVo.getDeductamount();

			if (sumdefpay == null)
				sumdefpay = 0.0;
			if (dutyDeductibleRate == null)
				dutyDeductibleRate = 100.0;
			if (absDeductibleRate == null)
				absDeductibleRate = 100.0;

			if (absDeductibleAmount == null)
				absDeductibleAmount = 0.0;
			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
				overLimitFlag=true;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);

			sumRealPay += lossamount;

			if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
				lossamount = CommonMethod.doubleRound_Down(lossamount);

			}
			Double preSumCalcuPay =0.0;
			Double sumCalcuPay =0.0;
			Double exceDeductKindPaid = 0.0;
			if(acpayItemVo.getKindCode().startsWith(DataDictionary.KINDCODE_20)){
				preSumCalcuPay = lossamount * (compensateRate / 100)  * (100 - absDeductibleRate) / 100;
				// 调节尾差
				if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
					preSumCalcuPay += remainPay;
					preSumCalcuPay = CommonMethod.doubleRound_Down(preSumCalcuPay);
					remainPay = 0.0;
				}
				sumCalcuPay = preSumCalcuPay - absDeductibleAmount;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
			}else{
				preSumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
				// 调节尾差
				if (sumPay > limitPay && i == (kindLossList.size() - 1)) {
					preSumCalcuPay += remainPay;
					preSumCalcuPay = CommonMethod.doubleRound_Down(preSumCalcuPay);
					remainPay = 0.0;
				}
				sumCalcuPay = preSumCalcuPay * (100 - dutyDeductibleRate) / 100 - absDeductibleAmount;
				acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
				exceDeductKindPaid = preSumCalcuPay * dutyDeductibleRate / 100;
				remainPay += sumCalcuPay + exceDeductKindPaid - CommonMethod.doubleRound_Down(exceDeductKindPaid) - CommonMethod.doubleRound_Down(sumCalcuPay);
				if (acpayItemVo.isExceDeductKindPaidFlag()) {
					acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));
					Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
					Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();
					if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
						if (resumCalcuPay > reExceDeductKindPaid) {
							acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));
							remainPay -= 0.01;
						} else {
							remainPay -= 0.01;
							acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
						}
					}
					logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
				} else {
					acpayItemVo.setExceDeductKindPaid(0.0);
				}
			}

			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));

			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
		}

		/*
		 * //如果有绝对免赔率，绝对免赔额，调整系数不一致，不进行调尾差 Double recompensateRate=null; Double
		 * reabsDeductibleRate=null; Double redutyDeductibleRate=null; for
		 * (AcpayItemVo acpayItemVo: bivoList) { if
		 * (DataDictionary.KINDCODE_B.equals(acpayItemVo.getKindCode())) {
		 * if(recompensateRate==null){
		 * recompensateRate=acpayItemVo.getCompensateRate(); } else{
		 * if((recompensateRate-acpayItemVo.getCompensateRate())>0.00001){ } }
		 * if(reabsDeductibleRate==null){
		 * reabsDeductibleRate=acpayItemVo.getAbsDeductibleAmount(); }
		 * if(redutyDeductibleRate==null){
		 * redutyDeductibleRate=acpayItemVo.getDutyDeductibleRate(); } } }
		 * 
		 * if (sumPay > limitPay) { sumPay=limitPay; } // 调整位差 Double remainPay =
		 * sumPay - calPay; if (remainPay > 0.005 && sumPay > limitPay) { for
		 * (AcpayItemVo acpayItemVo : bivoList) { if (remainPay < 0.005) {
		 * break; } System.out.println("wcccc="+acpayItemVo.getLossItemName()+"
		 * ="+acpayItemVo.getSumLossAmount() +" "+
		 * acpayItemVo.getDeductBzamount() +" "+acpayItemVo.getSumRealpay()); if
		 * (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_B) &&
		 * ((acpayItemVo.getSumLossAmount() - acpayItemVo.getDeductBzamount() -
		 * acpayItemVo.getSumRealpay()) > 0.005)) {
		 * System.out.println("jjjjrr"+remainPay);
		 * acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(acpayItemVo.getIndemnityPaid() +
		 * 0.01));
		 * acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() +
		 * 0.01));
		 * acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(acpayItemVo.getSumRealpay() +
		 * 0.01)); remainPay -= 0.01; } } }
		 */
		/*
		 * // 调整位差 if (sumPay > limitPay) { if ((limitPay - sumRealPay) > 0.01) {
		 * for (int i = 0; i < bivoList.size(); i++) { AcpayItemVo acpayItemVo =
		 * bivoList.get(i); if
		 * (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_B)) {
		 * Double remainPay = limitPay - sumRealPay;
		 * 
		 * acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(acpayItemVo.getIndemnityPaid() +
		 * remainPay));
		 * acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() +
		 * remainPay));
		 * acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(acpayItemVo.getSumRealpay() +
		 * remainPay)); break; } } } }
		 */
		return overLimitFlag;
	}

	/**
	 * @Title: calculateThird
	 * @Description: TODO(计算单个人D险)
	 * @author 李科
	 * @return void
	 * @throws
	 * @date 2012-9-26 上午9:31:54
	 */
	private void calculate_D(List<AcpayItemVo> bivoList, Double limitPay) {
		Double sumPay = 0.0;
		// 计算总损失
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
		}

		Double sumRealPay = 0.0;
		Double remainPay = 0.0;
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			Double lossamount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
			Double sumdefpay = acpayItemVo.getSumLossAmount();
			Double dutyDeductibleRate = acpayItemVo.getDutyDeductibleRate();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate();

			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
			// Double deductamount = acpayItemVo.getDeductamount();

			if (sumdefpay == null)
				sumdefpay = 0.0;
			if (dutyDeductibleRate == null)
				dutyDeductibleRate = 100.0;
			if (absDeductibleRate == null)
				absDeductibleRate = 100.0;

			if (absDeductibleAmount == null)
				absDeductibleAmount = 0.0;
			if (sumPay > limitPay) {

				lossamount = lossamount * limitPay / sumPay;

			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;

			if (sumPay > limitPay && i == (bivoList.size() - 1)) {

				lossamount = lossamount + limitPay - sumRealPay;

			}

			Double presumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100;
			// 调节尾差
			if (sumPay > limitPay && i == (bivoList.size() - 1)) {
				presumCalcuPay += remainPay;
			}
			Double sumCalcuPay = presumCalcuPay * (100 - dutyDeductibleRate) / 100 - absDeductibleAmount;

			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
			Double exceDeductKindPaid = presumCalcuPay * (dutyDeductibleRate / 100);
			remainPay += sumCalcuPay + exceDeductKindPaid - CommonMethod.doubleRound_Down(exceDeductKindPaid)
					- CommonMethod.doubleRound_Down(sumCalcuPay);

			if (acpayItemVo.isExceDeductKindPaidFlag()) {

				acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(exceDeductKindPaid));

				Double reExceDeductKindPaid = exceDeductKindPaid - acpayItemVo.getExceDeductKindPaid();
				Double resumCalcuPay = sumCalcuPay - acpayItemVo.getSumCalcuPay();

				if ((reExceDeductKindPaid + resumCalcuPay) > 0.009) {
					if (resumCalcuPay > reExceDeductKindPaid) {
						remainPay -= 0.01;
						acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(acpayItemVo.getSumCalcuPay() + 0.01));
					} else {
						remainPay -= 0.01;
						acpayItemVo.setExceDeductKindPaid(CommonMethod.doubleRound_Down(acpayItemVo.getExceDeductKindPaid() + 0.01));
					}
				}
				logger.debug(acpayItemVo.getLossItemName() + "获赔不计免赔" + exceDeductKindPaid);
			} else {
				acpayItemVo.setExceDeductKindPaid(0.0);

			}

			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));

			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();

			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));

			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);

		}

	}
	/**
	 * @Title: calculateThird
	 * @Description: TODO(计算单个人20D险)
	 * @author 李科
	 * @return void
	 * @throws
	 * @date 2012-9-26 上午9:31:54
	 */
	private void calculate_20D(List<AcpayItemVo> bivoList, Double limitPay) {
		Double sumPay = 0.0;
		// 计算总损失
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			sumPay += calculateAcpayItemVoSingleSumpay(acpayItemVo);
		}

		Double sumRealPay = 0.0;
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			Double lossamount = calculateAcpayItemVoSingleSumpay(acpayItemVo);
			Double sumdefpay = acpayItemVo.getSumLossAmount();
			Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate();

			Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount();
			Double compensateRate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();

			if (sumdefpay == null)
				sumdefpay = 0.0;
			if (absDeductibleRate == null)
				absDeductibleRate = 100.0;

			if (absDeductibleAmount == null)
				absDeductibleAmount = 0.0;
			if (sumPay > limitPay) {
				lossamount = lossamount * limitPay / sumPay;
			}
			lossamount = CommonMethod.doubleRound_Down(lossamount);
			sumRealPay += lossamount;
			if (sumPay > limitPay && i == (bivoList.size() - 1)) {
				lossamount = lossamount + limitPay - sumRealPay;
			}
			Double sumCalcuPay = lossamount * (compensateRate / 100) * (100 - absDeductibleRate) / 100 - absDeductibleAmount;
			acpayItemVo.setSumCalcuPay(CommonMethod.doubleRound_Down(sumCalcuPay));
			acpayItemVo.setExceDeductKindPaid(0.0);
			Double indemnityPaid = acpayItemVo.getSumCalcuPay();
			acpayItemVo.setIndemnityPaid(CommonMethod.doubleRound_Down(indemnityPaid));
			Double sumRealpay = indemnityPaid + acpayItemVo.getExceDeductKindPaid();
			acpayItemVo.setSumRealpay(CommonMethod.doubleRound_Down(sumRealpay));
			logger.debug(acpayItemVo.getLossItemName() + "获赔" + sumCalcuPay);
		}
		
	}

	/**
	 * @Title: calculateAcpayItemVoSingleSumpay
	 * @Description: TODO(计算总损失--责任险相关的责任限额)
	 * @author 李科
	 * @param acpayItemVo
	 * @return
	 * @return Double
	 * @throws
	 * @date 2012-10-23 下午3:52:22
	 */
	private Double calculateAcpayItemVoSingleSumpay(AcpayItemVo acpayItemVo) {
		Double sumdefpay = acpayItemVo.getSumLossAmount() == null ? 0.0 : acpayItemVo.getSumLossAmount();
		Double deductbzamount = acpayItemVo.getDeductBzamount() == null ? 0.0 : acpayItemVo.getDeductBzamount();
		Double shareRate = acpayItemVo.getShareRate() == null ? 100.0 : acpayItemVo.getShareRate();
		Double liabilityrate = acpayItemVo.getLiabilityRate() == null ? 100.0 : acpayItemVo.getLiabilityRate();
		// 核定金额－∑各肇事机动车交强险赔偿总金额×协商赔偿比例×赔偿责任比例
		Double sumPay = (sumdefpay - deductbzamount) * liabilityrate / 100 * shareRate / 100;
		return sumPay;
	}
	
	/**
	 * @Title: calculateAcpayItemVoSingleSumpayForInsuranceAmount
	 * @Description: TODO(计算总损失-车损险相关的保险金额)
	 * @author 李科
	 * @param acpayItemVo
	 * @return
	 * @return Double
	 * @throws
	 * @date 2012-10-23 下午3:52:22
	 */
	private Double calculateAcpayItemVoSingleSumpayForInsAmount(AcpayItemVo acpayItemVo) {
		Double sumdefpay = acpayItemVo.getSumLossAmount() == null ? 0.0 : acpayItemVo.getSumLossAmount();
		Double deductbzamount = acpayItemVo.getDeductBzamount() == null ? 0.0 : acpayItemVo.getDeductBzamount();
		Double shareRate = acpayItemVo.getShareRate() == null ? 100.0 : acpayItemVo.getShareRate();
		// 核定金额－∑各肇事机动车交强险赔偿总金额×协商赔偿比例×赔偿责任比例
		Double sumPay = (sumdefpay - deductbzamount) * shareRate / 100;
		return sumPay;
	}

	/**
	 * @Title: calculateAcpayItemVoSingleSumpyForA
	 * @Description: TODO(计算车损险损失)
	 * @author 何颖
	 * @param acpayItemVo
	 * @return
	 * @return Double
	 * @throws
	 * @date 2012-10-23 下午3:52:22
	 */
	private Double calculateAcpayItemVoSingleSumpyForA(AcpayItemVo acpayItemVo, Double limitpay ,String newRiskCodeFlag) {
		Double compensaterate = acpayItemVo.getCompensateRate() == null ? 100.0 : acpayItemVo.getCompensateRate();
		Double shareRate = acpayItemVo.getShareRate() == null ? 100.0 : acpayItemVo.getShareRate();
		// （核定修理费用－残值－交强险赔偿金额）
		Double realLossAmount = acpayItemVo.getSumLossAmount()
				- (acpayItemVo.getDeductBzamount() == null ? 0.0 : acpayItemVo.getDeductBzamount());
		// 赔偿计算金额
		AclcItemCar itemCar = lcitemCarService.findBILcItemCarByReportNo(acpayItemVo.getReportNo());
		Double purchasePrice = itemCar.getPurchasePrice();
		Double sumPay = 0.0;
		// 核定金额－∑各肇事机动车交强险赔偿总金额）×协商赔偿比例×赔偿责任比例×（保险金额÷投保时保险车辆的新车购置价）
		if (acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_X1)||acpayItemVo.getKindCode().equals(DataDictionary.KINDCODE_X3)||"1".equals(newRiskCodeFlag)) {
			sumPay = realLossAmount  * compensaterate / 100 * shareRate / 100;
		} else {
			//保险金额÷投保时保险车辆的新车购置价
			Double limitpayPerPurchasePrice = limitpay/purchasePrice;
			if(limitpayPerPurchasePrice.compareTo(0.0)<0  || limitpayPerPurchasePrice.compareTo(1.0)>0){//控制比例在0
				limitpayPerPurchasePrice=1.0;
			}
			if(purchasePrice <= 0.0){//新车购置价小于0时，且是互碰自赔时   （保险金额÷投保时保险车辆的新车购置价）: 1
				List<AcCarInfo> carInfoList = carLossService.findAccarinfoByReportNo(acpayItemVo.getReportNo());
				if(checkIsPaidSelfLossFlag(acpayItemVo.getReportNo(), carInfoList)){
					sumPay = realLossAmount * compensaterate / 100 * shareRate / 100 ;
				}else{
					sumPay = realLossAmount  * compensaterate / 100 * shareRate / 100 * limitpayPerPurchasePrice;
				}
			}else{
				sumPay = realLossAmount  * compensaterate / 100 * shareRate / 100 * limitpayPerPurchasePrice;
			}
		}
		return sumPay;
	}

	/**
	 * @Title: findAllKindCode
	 * @Description: TODO(险别分类)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return
	 * @return Iterator<String>
	 * @throws
	 * @date Nov 26, 2012 10:53:10 AM
	 */
	private Iterator<String> findAllKindCode(List<AcpayItemVo> bivoList) {
		Map<String, String> map = new HashMap<String, String>();
		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (map.get(acpayItemVo.getKindCode()) == null) {
				map.put(acpayItemVo.getKindCode(), acpayItemVo.getKindCode());
			}

		}

		return map.keySet().iterator();
	}

	public List<AcpayItemVo> doInitTraLossdataSurvey(List<AcReportCarInfo> carLossList, List<AcReportPropInfo> proplossList,Map<String, String> kindCodeMap, String flag,AcSurvey survey) {

		/***********************************************************************
		 * 需要根据报案表，查勘表，立案表，资料初始化理算书
		 */
		List<AcpayItemVo> aclossList = new ArrayList<AcpayItemVo>();
		if ("1".equals(survey.getIsPaidSelf())) {//是互碰自赔
			// 互碰自赔 汇总标的车数据
			//aclossList = this.initCarDefLoss(isPaidSelfLossList, carInfoList, kindCodeMap, flag);
		} else {
			// 正常汇总车辆数据
			aclossList = this.initCarDefLossSuv(carLossList, kindCodeMap, flag,survey);
		}

		// ******************************计算物损交强险***********************************************
		for (AcReportPropInfo acproploss : proplossList) {
			String accidentDutyCode = survey.getAccidentDutyCode();
			// 互碰自赔只汇总标的车上物
			if ("1".equals(survey.getIsPaidSelf())) {
				// 三者车上物
				if (DataDictionary.LOSSATTRCODE_THIRD_CARPROP.equals(acproploss.getLossAttRCode())) {
					continue;
				}
				// 车外物
				if (DataDictionary.LOSSATTRCODE_PROP.equals(acproploss.getLossAttRCode())) {
					continue;
				}
			}
			List<AcpayItemVo> tmpaclossList = new ArrayList<AcpayItemVo>();
			// 物损其它费用
			AcpayItemVo aclossItem = new AcpayItemVo();
			initAclossItem(aclossItem);
			// 判断是否B险，是即改成BZ险
			String kindCode =this.getDefaultSurveyRiskCode(null, acproploss, null, kindCodeMap, survey, DataDictionary.RISK_SURVEY_FLAG_CI);
			if(kindCode==null||"".equals(kindCode)){
				continue;
			}
			aclossItem.setOrder("2");
			aclossItem.setReportNo(acproploss.getReportNo());
			aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
			aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
			aclossItem.setKindCode(kindCode);
			aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
			aclossItem.setLossType(DataDictionary.LOSSTYPE_PROPERTY);// 表示财产
			aclossItem.setDefLossTaskId(acproploss.getId());

			String liabilityRate ="100";
			BigDecimal acReportCarInfoId = acproploss.getAcReportCarInfoId();
			if(acReportCarInfoId!=null){
				AcReportCarInfo acReportCarInfo = reportService.findAcReportCarInfoById(acReportCarInfoId);
				String isciDuty ="";
				if("1".equals(acReportCarInfo.getIsDuty())){//有责
					isciDuty ="1";
				}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
					isciDuty ="0";
				}else{
					isciDuty = "5".equals(accidentDutyCode)?"0":"1";
				}
				liabilityRate =DataDictionary.DutyMap.get(accidentDutyCode);
				aclossItem.setReportCarInfoId(acReportCarInfoId);
				aclossItem.setLicenseNo(acReportCarInfo.getLicenseNo());
			}
			aclossItem.setLiabilityRate(Double.valueOf(liabilityRate));// 赔偿责任比例
			aclossItem.setLossItemName(acproploss.getLossPropName());// 项目名称
			aclossItem.setLossPropName(acproploss.getLossPropName());// 物品名称
			aclossItem.setSumLossAmount(acproploss.getEstimatedLossAmount());// 初始化总金额等于物损其它费用
			aclossItem.setLossAttrCode(acproploss.getLossAttRCode());
			aclossItem.setLossAttrName(acproploss.getLossAttRName());
			AcpayItemVo temAcloss = findSampleacproploss(tmpaclossList, aclossItem, null);

			if (temAcloss != null) {
				temAcloss.setMaterialFee(aclossItem.getMaterialFee() + (temAcloss.getMaterialFee() != null ? temAcloss.getMaterialFee() : 0.0));
				temAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + temAcloss.getSumLossAmount());
			} else {
				tmpaclossList.add(aclossItem);
			}

			aclossList.addAll(tmpaclossList);
		}
		// Double金额四舍五入
		this.initLosslist(aclossList);
		return aclossList;
	
		
	}
	/**
	 * @Title: doInitTraLossdata
	 * @Description: TODO(汇总交强险Loss信息)
	 * @author 莫浩锋
	 * @param carLossList
	 * @param proplossList
	 * @param carInfoList
	 * @param kindCodeMap
	 * @param flag
	 * @return
	 * @return List<AcpayItemVo>
	 * @throws
	 * @date Dec 13, 2013 10:58:24 AM
	 */
	public List<AcpayItemVo> doInitTraLossdata(List<AcCarDefLoss> carLossList, List<AcPropDefLoss> proplossList,
			List<AcCarInfo> carInfoList, Map<String, String> kindCodeMap, String flag) {
		//确认是否2020新条款交强险,默认BZ险别
		String BZ_kindcode=DataDictionary.KINDCODE_BZ;
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20BZ)){
			BZ_kindcode=DataDictionary.KINDCODE_20BZ;
		}
		/***********************************************************************
		 * 需要根据报案表，查勘表，立案表，资料初始化理算书
		 */
		List<AcpayItemVo> aclossList = new ArrayList<AcpayItemVo>();
		// 判断是否标的车并且是互碰自赔
		List<AcCarDefLoss> isPaidSelfLossList = this.findIsPaidSelfFlag(carLossList, carInfoList);
		if (isPaidSelfLossList.size() > 0) {
			// 互碰自赔 汇总标的车数据
			aclossList = this.initCarDefLoss(isPaidSelfLossList, carInfoList, kindCodeMap, flag);
		} else {
			// 正常汇总车辆数据
			aclossList = this.initCarDefLoss(carLossList, carInfoList, kindCodeMap, flag);
		}

		// ******************************计算物损交强险***********************************************
		for (AcPropDefLoss acproploss : proplossList) {
			// 判断任务是否未定损或者核损通过、存在任务在定损、或核损时，取最新轨迹数据。
			if (checkTask(acproploss.getId()) && !DataDictionary.CASEFLOWCODE_G.equals(flag) && !DataDictionary.CASEFLOWCODE_P.equals(flag)) {
				AcPropDefLoss proploss = this.copyAcPropDefLossVlhis(acproploss.getId());
				if(proploss.getId() != null && !"".equals(proploss.getId())){
					acproploss = proploss;
				}
			}

			// 互碰自赔只汇总标的车上物
			if (isPaidSelfLossList.size() > 0) {
				// 三者车上物
				if (DataDictionary.LOSSATTRCODE_THIRD_CARPROP.equals(acproploss.getLossAttrCode())) {
					continue;
				}
				// 车外物
				if (DataDictionary.LOSSATTRCODE_PROP.equals(acproploss.getLossAttrCode())) {
					continue;
				}
			}
			List<AcpayItemVo> tmpaclossList = new ArrayList<AcpayItemVo>();
			// 物损其它费用
			List<AcPropExtCharge> acproplossextchargeList = acproploss.getAcPropExtCharges();
			for (AcPropExtCharge extcharge : acproplossextchargeList) {
				if (extcharge.getValidFlag() != null && extcharge.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				// 判断是否B险，是即改成BZ险
				String kindCode = changeKindCodeToBZ(extcharge.getKindCode(), null, aclossItem,BZ_kindcode,null,null);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = findKindCodeInMap(kindCodeMap, extcharge.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					extcharge.setVerifyLossAmount(extcharge.getDefLossAmount());
				}
				aclossItem.setReportNo(acproploss.getReportNo());
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setKindCode(kindCode);
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_PROPERTY);// 表示财产
				aclossItem.setDefLossTaskId(acproploss.getId());
				aclossItem.setLicenseNo(acproploss.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(acproploss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acproploss.getShareRate());// 赔偿分摊比例
				aclossItem.setOtherFee(extcharge.getVerifyLossAmount() != null ? extcharge.getVerifyLossAmount() : 0.0);// 物损其它费用
				aclossItem.setLossItemName(acproploss.getLossPropName());// 项目名称
				aclossItem.setLossPropName(acproploss.getLossPropName());// 物品名称
				aclossItem.setSumLossAmount(aclossItem.getOtherFee());// 初始化总金额等于物损其它费用
				aclossItem.setLossAttrCode(acproploss.getLossAttrCode());
				aclossItem.setLossAttrName(acproploss.getLossAttrName());
				aclossItem.setReportCarInfoId(acproploss.getReportCarInfoId());
				AcpayItemVo temAcloss = findSampleacproploss(tmpaclossList, aclossItem, acproploss);

				if (temAcloss != null) {
					temAcloss.setOtherFee(aclossItem.getOtherFee() + (temAcloss.getOtherFee() != null ? temAcloss.getOtherFee() : 0.0));
					temAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + temAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
			}

			// 更换项目费用
			List<AcPropItemChange> acpropitemchangelist = acproploss.getAcPropItemChanges();
			for (int x = 0; x < acpropitemchangelist.size(); x++) {
				AcPropItemChange itemchangelist = acpropitemchangelist.get(x);
				if (itemchangelist.getValidFlag() != null && itemchangelist.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);

				// 判断是否B险，是即改成BZ险
				String kindCode = changeKindCodeToBZ(itemchangelist.getKindCode(), null, aclossItem,BZ_kindcode,null,null);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = findKindCodeInMap(kindCodeMap, itemchangelist.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					itemchangelist.setVerifyLossAmount(itemchangelist.getDefLossAmount());
				}
				aclossItem.setReportNo(acproploss.getReportNo());
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setKindCode(kindCode);
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setDefLossTaskId(acproploss.getId());
				aclossItem.setLicenseNo(acproploss.getLicenseNo());// 车牌号
				aclossItem.setLossType(DataDictionary.LOSSTYPE_PROPERTY);// 表示财产
				aclossItem.setMaterialFee(itemchangelist.getVerifyLossAmount() != null ? itemchangelist.getVerifyLossAmount() : 0.0);// 物损项目费用
				aclossItem.setLossItemName(acproploss.getLossPropName());// 项目名称
				aclossItem.setLossPropName(acproploss.getLossPropName());// 物品名称
				aclossItem.setSumLossAmount(aclossItem.getMaterialFee());// 初始化总金额等于物损费用
				aclossItem.setLiabilityRate(acproploss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acproploss.getShareRate());// 赔偿分摊比例
				aclossItem.setLossAttrCode(acproploss.getLossAttrCode());
				aclossItem.setLossAttrName(acproploss.getLossAttrName());
				aclossItem.setReportCarInfoId(acproploss.getReportCarInfoId());
				AcpayItemVo temAcloss = findSampleacproploss(tmpaclossList, aclossItem, acproploss);

				if (temAcloss != null) {
					temAcloss.setMaterialFee(aclossItem.getMaterialFee() + temAcloss.getMaterialFee());
					temAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + temAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
			}

			// 物损维修费用
			List<AcPropRepairFee> reparfeelist = acproploss.getAcPropRepairFees();
			for (AcPropRepairFee acpropreparfee : reparfeelist) {
				AcpayItemVo aclossItem = new AcpayItemVo();
				if (acpropreparfee.getValidFlag() != null && acpropreparfee.getValidFlag().equals("0")) {
					continue;
				}
				initAclossItem(aclossItem);
				// 判断是否B险，是即改成BZ险
				String kindCode = this.changeKindCodeToBZ(acpropreparfee.getKindCode(), null, aclossItem,BZ_kindcode,null,null);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = this.findKindCodeInMap(kindCodeMap, acpropreparfee.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acpropreparfee.setVerifyLossAmount(acpropreparfee.getDefLossAmount());
				}
				aclossItem.setReportNo(acproploss.getReportNo());
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setKindCode(kindCode);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_PROPERTY);// 表示财产
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setLicenseNo(acproploss.getLicenseNo());// 车牌号
				aclossItem.setDefLossTaskId(acproploss.getId());
				aclossItem.setHourFee(acpropreparfee.getVerifyLossAmount() != null ? acpropreparfee.getVerifyLossAmount() : 0.0);// 物损项目费用
				aclossItem.setLossItemName(acproploss.getLossPropName());// 项目名称
				aclossItem.setLossPropName(acproploss.getLossPropName());// 物品名称
				aclossItem.setSumLossAmount(aclossItem.getHourFee());// 初始化总金额等于物损费用
				aclossItem.setLiabilityRate(acproploss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acproploss.getShareRate());// 赔偿分摊比例
				aclossItem.setLossAttrCode(acproploss.getLossAttrCode());
				aclossItem.setLossAttrName(acproploss.getLossAttrName());
				aclossItem.setReportCarInfoId(acproploss.getReportCarInfoId());
				AcpayItemVo temAcloss = findSampleacproploss(tmpaclossList, aclossItem, acproploss);
				if (temAcloss != null) {
					temAcloss.setHourFee(aclossItem.getHourFee() + temAcloss.getHourFee());// 险别相同费用相加
					temAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + temAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
			}
			aclossList.addAll(tmpaclossList);
		}
		// Double金额四舍五入
		this.initLosslist(aclossList);
		return aclossList;
	}

	/**
	 * @Title: copyAcPropDefLossVlhis
	 * @Description: TODO(物损his表数据转换)
	 * @author 莫浩锋
	 * @param id
	 * @return
	 * @return AcPropDefLoss
	 * @throws
	 * @date Jan 18, 2014 5:11:04 PM
	 */
	public AcPropDefLoss copyAcPropDefLossVlhis(BigDecimal id) {
		AcPropDefLoss proploss = new AcPropDefLoss();
		BigDecimal minIdValue = id.multiply(new BigDecimal(1000));
		BigDecimal maxIdValue = minIdValue.add(new BigDecimal(999));
		String hql = " from AcPropDefLossVlhis where id > ? and id< ?   and (verifyLossFlag = ? or verifyLossFlag = ? or eVerifyLossFlag = ? or eVerifyLossFlag = ?) order by id desc";
		List<AcPropDefLossVlhis> propDefLossVlhisList = this.findByHql(hql, minIdValue,maxIdValue,DataDictionary.FLAG_1, DataDictionary.FLAG_3,DataDictionary.FLAG_1, DataDictionary.FLAG_3);
		if (propDefLossVlhisList.size() > 0) {
			proploss = (AcPropDefLoss) sourceToTarget1(propDefLossVlhisList.get(0), propDefLossVlhisList.get(0).getId(),AcPropDefLoss.class);
		}
		return proploss;
	}

	/**
	 * @Title: checkTask
	 * @Description: TODO(判断任务是否为未核损通过的)
	 * @author 莫浩锋
	 * @param id
	 * @param string
	 * @return
	 * @return Boolean
	 * @throws
	 * @date Jan 16, 2014 4:16:56 PM
	 */
	public Boolean checkTask(BigDecimal lossId) {
		String hql = " from ACBpmMain where businessId=? and taskStatus in ('0','2','7') and nodeId not in('230','340','345','350') ";
		List list = this.findByHql(hql, lossId);
		if (list.size() > 0) {
			return true;
		}
		return false;
	}

	/**
	 * @Title: initLosslist
	 * @Description: TODO(Double类型金额四舍五入)
	 * @author 莫浩锋
	 * @param aclossList
	 * @return void
	 * @throws
	 * @date Dec 17, 2012 3:18:47 PM
	 */
	private void initLosslist(List<AcpayItemVo> lossList) {
		for (AcpayItemVo vo : lossList) {
			vo.setAccessoriesFee(CommonMethod.doubleRound_Down(vo.getAccessoriesFee()));
			vo.setOuterRepairFee(CommonMethod.doubleRound_Down(vo.getOuterRepairFee()));
			vo.setMaterialFee(CommonMethod.doubleRound_Down(vo.getMaterialFee()));
			vo.setRescueFee(CommonMethod.doubleRound_Down(vo.getRescueFee()));
			vo.setManagerFee(CommonMethod.doubleRound_Down(vo.getManagerFee()));
			vo.setHourFee(CommonMethod.doubleRound_Down(vo.getHourFee()));
			vo.setOtherFee(CommonMethod.doubleRound_Down(vo.getOtherFee()));
			vo.setSumLossAmount(CommonMethod.doubleRound_Down(vo.getSumLossAmount()));
			vo.setAbsDeductibleAmount(CommonMethod.doubleRound_Down(vo.getAbsDeductibleAmount()));
		}
	}

	/**
	 * @Title: initIsPaidSelfLoss
	 * @Description: TODO(汇总车辆损失数据)
	 * @author 莫浩锋
	 * @param accardeflossList
	 * @param kindCodeMap
	 * @param reportNo
	 * @param accarinfoList
	 * @param flag
	 * @return
	 * @return List<AcpayItemVo>
	 * @throws
	 * @date Nov 28, 2012 8:11:22 PM
	 */
	private List<AcpayItemVo> initCarDefLoss(List<AcCarDefLoss> accardeflossList, List<AcCarInfo> accarinfoList,
			Map<String, String> kindCodeMap, String flag) {
		String BZ_kindcode=DataDictionary.KINDCODE_BZ;
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20BZ)){
			BZ_kindcode=DataDictionary.KINDCODE_20BZ;
		}
		List<AcpayItemVo> lossList = new ArrayList<AcpayItemVo>();
		for (AcCarDefLoss acCarDefLoss : accardeflossList) {
			// 判断任务是否未定损或者核损通过、存在任务在定损、或核损时，取最新轨迹数据。
			if (checkTask(acCarDefLoss.getId()) && !DataDictionary.CASEFLOWCODE_G.equals(flag)
					&& !DataDictionary.CASEFLOWCODE_P.equals(flag)) {
				AcCarDefLoss carDefLoss = this.copyAcCarInfoVlHis(acCarDefLoss.getId());
				if(carDefLoss.getId() != null && !"".equals(carDefLoss.getId())){
					acCarDefLoss = carDefLoss;
				}
			}

			List<AcpayItemVo> tmpaclossList = new ArrayList<AcpayItemVo>();
			AcCarInfo acCarInfo = this.findAccarInfo(accarinfoList, acCarDefLoss.getAcReportCarInfoId());
			String isciDuty = "";
			if (DataDictionary.ACCARINFO_CIDUTYFLAG.equals(acCarInfo.getCiDutyFlag())) {
				isciDuty = DataDictionary.ACCOMPENSATE_LOSS_ISDUTY;
			} else {
				isciDuty = DataDictionary.ACCOMPENSATE_LOSS_NODUTY;
			}
			// 施救费用
			List<AcCarSaveCharge> acsavechargeList = acCarDefLoss.getAcCarSaveCharges();
			for (int j = 0; j < acsavechargeList.size(); j++) {
				AcCarSaveCharge acCarSaveCharge = acsavechargeList.get(j);
				if (acCarSaveCharge.getValidFlag() != null && acCarSaveCharge.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				this.initAclossItem(aclossItem);
				// 判断是否B险，是即改成BZ险
				String kindCode = this.changeKindCodeToBZ(acCarSaveCharge.getKindCode(), null, aclossItem,BZ_kindcode,null,null);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = this.findKindCodeInMap(kindCodeMap, acCarSaveCharge.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarSaveCharge.setVerifyLossAmount(acCarSaveCharge.getDefLossAmount());
				}
				aclossItem.setReportNo(acCarDefLoss.getReportNo());
				aclossItem.setIsciduty(isciDuty);// 是否有责
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setKindCode(kindCode);
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())) {
					aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_CARSAVE);
				}
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setFeeTypeName(acCarSaveCharge.getFeeTypeName());// 受损车辆属性
				aclossItem.setRescueFee(acCarSaveCharge.getVerifyLossAmount() != null ? acCarSaveCharge.getVerifyLossAmount() : 0.0);// 施救费
				aclossItem.setSumLossAmount(aclossItem.getRescueFee());// 总定损金额，初始化时设金额等于施救费
				AcpayItemVo tmpAclossItem = this.findSampleFeeAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
				if (tmpAclossItem != null) {
					tmpAclossItem.setHourFee(aclossItem.getRescueFee() + tmpAclossItem.getRescueFee());
					tmpAclossItem.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAclossItem.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
			}

			// 换件费用
			List<AcCarItemChange> acitemchangeList = acCarDefLoss.getAcCarItemChanges();
			for (int k = 0; k < acitemchangeList.size(); k++) {
				AcCarItemChange acCarItemChange = acitemchangeList.get(k);
				if (acCarItemChange.getValidFlag() != null && acCarItemChange.getValidFlag().equals("0")) {
					continue;
				}

				AcpayItemVo aclossItem = new AcpayItemVo();
				this.initAclossItem(aclossItem);
				// 判断是否B险，是即改成BZ险
				String kindCode = this.changeKindCodeToBZ(acCarItemChange.getKindCode(), null, aclossItem,BZ_kindcode,null,null);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = this.findKindCodeInMap(kindCodeMap, acCarItemChange.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarItemChange.setVerifyLossAmount(acCarItemChange.getDefLossAmount());
				}
				aclossItem.setReportNo(acCarDefLoss.getReportNo());
				aclossItem.setIsciduty(isciDuty);// 是否有责
				aclossItem.setKindCode(kindCode);
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setMaterialFee(acCarItemChange.getVerifyLossAmount() != null ? acCarItemChange.getVerifyLossAmount() : 0.0);// 换件核损金额
				aclossItem.setSumLossAmount(aclossItem.getMaterialFee());// 总定损金额，初始化时设金额等于换件费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.KINDCODE_A1.equals(acCarItemChange.getKindCode())&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())){
					if (DataDictionary.ISDEVICEITEM_1.equals(acCarItemChange.getIsDeviceItem())) {
						aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_DEVICEITEM);
						aclossItem.setDeviceItemLoss(acCarItemChange.getVerifyLossAmount() != null ? acCarItemChange.getVerifyLossAmount() : 0.0);
					}
					AcpayItemVo tmpAcloss = null;
					for (int i = 0; i < tmpaclossList.size(); i++) {
						AcpayItemVo tmpaclossItem = tmpaclossList.get(i);
						//损失项目统计去掉施救费记录
						if(tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() == 0D){
							if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())){
								//原列表存在新增设备，并且当前换件记录也是新增设备则用原来的记录累加核定损失
								if((tmpaclossItem.getDeviceItemLoss() != null && tmpaclossItem.getDeviceItemLoss() > 0.001)
										&&DataDictionary.ISDEVICEITEM_1.equals(acCarItemChange.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								//原列表没有新增设备，并且当前换件记录不是新增设备则用原来的记录累加核定损失
								}else if((tmpaclossItem.getDeviceItemLoss()==null||tmpaclossItem.getDeviceItemLoss() ==0D)
										&&!DataDictionary.ISDEVICEITEM_1.equals(acCarItemChange.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								}
							}
						}
					}
					if (tmpAcloss != null) {
						if (DataDictionary.ISDEVICEITEM_1.equals(acCarItemChange.getIsDeviceItem())){
							tmpAcloss.setDeviceItemLoss(aclossItem.getDeviceItemLoss() + tmpAcloss.getDeviceItemLoss());//新增设备
						}
						tmpAcloss.setMaterialFee(aclossItem.getMaterialFee() + tmpAcloss.getMaterialFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					}else{
						tmpaclossList.add(aclossItem);
					}
				}else{
					AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
					if (tmpAcloss != null) {
						tmpAcloss.setMaterialFee(aclossItem.getMaterialFee() + tmpAcloss.getMaterialFee());
						tmpAcloss.setSumLossAmount((aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount()));
					} else {
						tmpaclossList.add(aclossItem);
					}
				}
			}

			// 修理
			List<AcCarRepairFee> accarrepairfeeList = acCarDefLoss.getAcCarRepairFees();
			for (int j = 0; j < accarrepairfeeList.size(); j++) {
				AcCarRepairFee acCarRepairFee = accarrepairfeeList.get(j);
				if (acCarRepairFee.getValidFlag() != null && acCarRepairFee.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				this.initAclossItem(aclossItem);
				// 判断是否B险，是即改成BZ险
				String kindCode = this.changeKindCodeToBZ(acCarRepairFee.getKindCode(), null, aclossItem,BZ_kindcode,null,null);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = this.findKindCodeInMap(kindCodeMap, acCarRepairFee.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarRepairFee.setVerifyLossAmount(acCarRepairFee.getDefLossAmount());
				}
				aclossItem.setReportNo(acCarDefLoss.getReportNo());
				aclossItem.setIsciduty(isciDuty);// 是否有责
				aclossItem.setKindCode(kindCode);
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setHourFee(acCarRepairFee.getVerifyLossAmount() != null ? acCarRepairFee.getVerifyLossAmount() : 0.0);// 修理核损金额
				aclossItem.setSumLossAmount(aclossItem.getHourFee());// 总定损金额，初始化时设金额等于换件费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.KINDCODE_A1.equals(acCarRepairFee.getKindCode())&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())){
					if (DataDictionary.ISDEVICEITEM_1.equals(acCarRepairFee.getIsDeviceItem())) {
						aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_DEVICEITEM);
						aclossItem.setDeviceItemLoss(acCarRepairFee.getVerifyLossAmount() != null ? acCarRepairFee.getVerifyLossAmount() : 0.0);
					}
					AcpayItemVo tmpAcloss = null;
					for (int i = 0; i < tmpaclossList.size(); i++) {
						AcpayItemVo tmpaclossItem = tmpaclossList.get(i);
						//损失项目统计去掉施救费记录
						if(tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() == 0D){
							if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())){
								//原列表存在新增设备，并且当前维修记录也是新增设备则用原来的记录累加核定损失
								if((tmpaclossItem.getDeviceItemLoss() != null && tmpaclossItem.getDeviceItemLoss() > 0.001)
										&&DataDictionary.ISDEVICEITEM_1.equals(acCarRepairFee.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								//原列表没有新增设备，并且当前维修记录不是新增设备则用原来的记录累加核定损失
								}else if((tmpaclossItem.getDeviceItemLoss()==null||tmpaclossItem.getDeviceItemLoss() ==0D)
										&&!DataDictionary.ISDEVICEITEM_1.equals(acCarRepairFee.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								}
							}
						}
					}
					if (tmpAcloss != null) {
						if (DataDictionary.ISDEVICEITEM_1.equals(acCarRepairFee.getIsDeviceItem())){
							tmpAcloss.setDeviceItemLoss(aclossItem.getDeviceItemLoss() + tmpAcloss.getDeviceItemLoss());//新增设备
						}
						tmpAcloss.setMaterialFee(aclossItem.getMaterialFee() + tmpAcloss.getMaterialFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					}else{
						tmpaclossList.add(aclossItem);
					}
				}else{
					AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
					if (tmpAcloss != null) {
						tmpAcloss.setHourFee(aclossItem.getHourFee() + tmpAcloss.getHourFee());
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					} else {
						tmpaclossList.add(aclossItem);
					}
				}
			}
			
			// 车辆辅料项目清单 
			List<AcCarMaterialFee> acCarMaterialFeeList = acCarDefLoss.getAcCarMaterialFees();
			for (int k = 0; k < acCarMaterialFeeList.size(); k++) {
				AcCarMaterialFee acCarMaterialFee = acCarMaterialFeeList.get(k);
				if (acCarMaterialFee.getValidFlag() != null && acCarMaterialFee.getValidFlag().equals("0")) {
					continue;
				}

				AcpayItemVo aclossItem = new AcpayItemVo();
				this.initAclossItem(aclossItem);
				// 判断是否B险，是即改成BZ险
				String kindCode = this.changeKindCodeToBZ(acCarMaterialFee.getKindCode(), null, aclossItem,BZ_kindcode,null,null);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = this.findKindCodeInMap(kindCodeMap, acCarMaterialFee.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarMaterialFee.setVerifyLossAmount(acCarMaterialFee.getDefLossAmount());
				}
				aclossItem.setReportNo(acCarDefLoss.getReportNo());
				aclossItem.setIsciduty(isciDuty);// 是否有责
				aclossItem.setKindCode(kindCode);
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setAccessoriesFee(acCarMaterialFee.getVerifyLossAmount() != null ? acCarMaterialFee.getVerifyLossAmount() : 0.0);// 换件核损金额
				aclossItem.setSumLossAmount(aclossItem.getAccessoriesFee());// 总定损金额，初始化时设金额等于换件费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.KINDCODE_A1.equals(acCarMaterialFee.getKindCode())&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())){
					if (DataDictionary.ISDEVICEITEM_1.equals(acCarMaterialFee.getIsDeviceItem())) {
						aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_DEVICEITEM);
						aclossItem.setDeviceItemLoss(acCarMaterialFee.getVerifyLossAmount() != null ? acCarMaterialFee.getVerifyLossAmount() : 0.0);
					}
					AcpayItemVo tmpAcloss = null;
					for (int i = 0; i < tmpaclossList.size(); i++) {
						AcpayItemVo tmpaclossItem = tmpaclossList.get(i);
						//损失项目统计去掉施救费记录
						if(tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() == 0D){
							if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())){
								//原列表存在新增设备，并且当前换件记录也是新增设备则用原来的记录累加核定损失
								if((tmpaclossItem.getDeviceItemLoss() != null && tmpaclossItem.getDeviceItemLoss() > 0.001)
										&&DataDictionary.ISDEVICEITEM_1.equals(acCarMaterialFee.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								//原列表没有新增设备，并且当前换件记录不是新增设备则用原来的记录累加核定损失
								}else if((tmpaclossItem.getDeviceItemLoss()==null||tmpaclossItem.getDeviceItemLoss() ==0D)
										&&!DataDictionary.ISDEVICEITEM_1.equals(acCarMaterialFee.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								}
							}
						}
					}
					if (tmpAcloss != null) {
						if (DataDictionary.ISDEVICEITEM_1.equals(acCarMaterialFee.getIsDeviceItem())){
							tmpAcloss.setDeviceItemLoss(aclossItem.getDeviceItemLoss() + tmpAcloss.getDeviceItemLoss());//新增设备
						}
						tmpAcloss.setAccessoriesFee(aclossItem.getAccessoriesFee() + tmpAcloss.getAccessoriesFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					}else{
						tmpaclossList.add(aclossItem);
					}
				}else{
					AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
					if (tmpAcloss != null) {
						tmpAcloss.setAccessoriesFee(aclossItem.getAccessoriesFee() + tmpAcloss.getAccessoriesFee());
						tmpAcloss.setSumLossAmount((aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount()));
					} else {
						tmpaclossList.add(aclossItem);
					}
				}
			}
			
			// 车辆外修项目清单
			List<AcCarOuterRepair> acCarOuterRepairList = acCarDefLoss.getAcCarOuterRepairs();
			for (int k = 0; k < acCarOuterRepairList.size(); k++) {
				AcCarOuterRepair acCarOuterRepair = acCarOuterRepairList.get(k);
				if (acCarOuterRepair.getValidFlag() != null && acCarOuterRepair.getValidFlag().equals("0")) {
					continue;
				}

				AcpayItemVo aclossItem = new AcpayItemVo();
				this.initAclossItem(aclossItem);
				// 判断是否B险，是即改成BZ险
				String kindCode = this.changeKindCodeToBZ(acCarOuterRepair.getKindCode(), null, aclossItem,BZ_kindcode,null,null);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = this.findKindCodeInMap(kindCodeMap, acCarOuterRepair.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarOuterRepair.setVerifyLossAmount(acCarOuterRepair.getDefLossAmount());
				}
				aclossItem.setReportNo(acCarDefLoss.getReportNo());
				aclossItem.setIsciduty(isciDuty);// 是否有责
				aclossItem.setKindCode(kindCode);
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setOuterRepairFee(acCarOuterRepair.getVerifyLossAmount() != null ? acCarOuterRepair.getVerifyLossAmount() : 0.0);// 外修核损金额
				aclossItem.setSumLossAmount(aclossItem.getOuterRepairFee());// 总定损金额，初始化时设金额等于换件费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.KINDCODE_A1.equals(acCarOuterRepair.getKindCode())&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())){
					if (DataDictionary.ISDEVICEITEM_1.equals(acCarOuterRepair.getIsDeviceItem())) {
						aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_DEVICEITEM);
						aclossItem.setDeviceItemLoss(acCarOuterRepair.getVerifyLossAmount() != null ? acCarOuterRepair.getVerifyLossAmount() : 0.0);
					}
					AcpayItemVo tmpAcloss = null;
					for (int i = 0; i < tmpaclossList.size(); i++) {
						AcpayItemVo tmpaclossItem = tmpaclossList.get(i);
						//损失项目统计去掉施救费记录
						if(tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() == 0D){
							if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())){
								//原列表存在新增设备，并且当前换件记录也是新增设备则用原来的记录累加核定损失
								if((tmpaclossItem.getDeviceItemLoss() != null && tmpaclossItem.getDeviceItemLoss() > 0.001)
										&&DataDictionary.ISDEVICEITEM_1.equals(acCarOuterRepair.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								//原列表没有新增设备，并且当前换件记录不是新增设备则用原来的记录累加核定损失
								}else if((tmpaclossItem.getDeviceItemLoss()==null||tmpaclossItem.getDeviceItemLoss() ==0D)
										&&!DataDictionary.ISDEVICEITEM_1.equals(acCarOuterRepair.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								}
							}
						}
					}
					if (tmpAcloss != null) {
						if (DataDictionary.ISDEVICEITEM_1.equals(acCarOuterRepair.getIsDeviceItem())){
							tmpAcloss.setDeviceItemLoss(aclossItem.getDeviceItemLoss() + tmpAcloss.getDeviceItemLoss());//新增设备
						}
						tmpAcloss.setOuterRepairFee(aclossItem.getOuterRepairFee() + tmpAcloss.getOuterRepairFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					}else{
						tmpaclossList.add(aclossItem);
					}
				}else{
					AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
					if (tmpAcloss != null) {
						tmpAcloss.setOuterRepairFee(aclossItem.getOuterRepairFee() + tmpAcloss.getOuterRepairFee());
						tmpAcloss.setSumLossAmount((aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount()));
					} else {
						tmpaclossList.add(aclossItem);
					}
				}
			}
			
			
			lossList.addAll(tmpaclossList);
		}
		return lossList;
	}
	private List<AcpayItemVo> initCarDefLossSuv(List<AcReportCarInfo> accardeflossList,	Map<String, String> kindCodeMap, String flag,AcSurvey acSurvey) {
		List<AcpayItemVo> lossList = new ArrayList<AcpayItemVo>();
		List<AcpayItemVo> resuceLossList = new ArrayList<AcpayItemVo>();
		for (AcReportCarInfo acReportCarInfo : accardeflossList) {
			if(acReportCarInfo.getRescuefee() !=null &&acReportCarInfo.getRescuefee() >= 0.01&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())){//标的车施救费需单独保存一个对象
				//三者车，一般是BZ,无BZ跳过
				String kindCode =this.getDefaultSurveyRiskCode(acReportCarInfo, null, null, kindCodeMap, acSurvey, DataDictionary.RISK_SURVEY_FLAG_CI);
				if(kindCode==null||"".equals(kindCode)){
					continue;
				}
				String accidentDutyCode = acSurvey.getAccidentDutyCode();
				String isciDuty ="";
				if("1".equals(acReportCarInfo.getIsDuty())){//有责
					isciDuty ="1";
				}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
					isciDuty ="0";
				}else{
					isciDuty = "5".equals(accidentDutyCode)?"0":"1";
				}
				String liabilityRate =DataDictionary.DutyMap.get(accidentDutyCode);
				//标的车
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				aclossItem.setReportNo(acReportCarInfo.getReportNo());
				aclossItem.setIsciduty(isciDuty);// 是否有责
				aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acReportCarInfo.getLossAttRCode());
				aclossItem.setLossAttrName(acReportCarInfo.getLossAttRName());
				aclossItem.setDefLossTaskId(acReportCarInfo.getId());
				aclossItem.setKindCode(kindCode);
				aclossItem.setLossItemName(acReportCarInfo.getLicenseNo());
				aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
				aclossItem.setLicenseNo(acReportCarInfo.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(Double.valueOf(liabilityRate));// 赔偿责任比例
				aclossItem.setInsuredName(acReportCarInfo.getDriverName());
				aclossItem.setReportCarInfoId(acReportCarInfo.getId());
				aclossItem.setRescueFee(acReportCarInfo.getRescuefee());//施救费
				aclossItem.setSumLossAmount(acReportCarInfo.getRescuefee());// 总定损金额，初始化时设金额等于施救费
				resuceLossList.add(aclossItem);
			}
		}
		for (AcReportCarInfo acReportCarInfo : accardeflossList) {
			List<AcpayItemVo> tmpaclossList = new ArrayList<AcpayItemVo>();
			//三者车，一般是BZ,无BZ跳过
			String kindCode =this.getDefaultSurveyRiskCode(acReportCarInfo, null, null, kindCodeMap, acSurvey, DataDictionary.RISK_SURVEY_FLAG_CI);
			if(kindCode==null||"".equals(kindCode)){
				continue;
			}
			String accidentDutyCode = acSurvey.getAccidentDutyCode();
			String isciDuty =getIsDuty(acReportCarInfo, accidentDutyCode);
			if("1".equals(acReportCarInfo.getIsDuty())){//有责
				isciDuty ="1";
			}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
				isciDuty ="0";
			}else{
				isciDuty = "5".equals(accidentDutyCode)?"0":"1";
			}
			String liabilityRate =DataDictionary.DutyMap.get(accidentDutyCode);
			//标的车
			AcpayItemVo aclossItem = new AcpayItemVo();
			initAclossItem(aclossItem);
			aclossItem.setReportNo(acReportCarInfo.getReportNo());
			aclossItem.setIsciduty(isciDuty);// 是否有责
			aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
			aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
			aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
			aclossItem.setLossAttrCode(acReportCarInfo.getLossAttRCode());
			aclossItem.setLossAttrName(acReportCarInfo.getLossAttRName());
			aclossItem.setDefLossTaskId(acReportCarInfo.getId());
			aclossItem.setKindCode(kindCode);
			aclossItem.setLossItemName(acReportCarInfo.getLicenseNo());
			aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
			aclossItem.setLicenseNo(acReportCarInfo.getLicenseNo());// 车牌号
			aclossItem.setLiabilityRate(Double.valueOf(liabilityRate));// 赔偿责任比例
			aclossItem.setInsuredName(acReportCarInfo.getDriverName());
			aclossItem.setReportCarInfoId(acReportCarInfo.getId());
			aclossItem.setSumLossAmount(acReportCarInfo.getEstimatedLossAmount());// 总定损金额，初始化时设金额等于施救费
			if(acReportCarInfo.getRescuefee()!=null &&acReportCarInfo.getRescuefee() >= 0.01&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())){//标的车施救费不需要再处理
				tmpaclossList.add(aclossItem);
				lossList.addAll(resuceLossList);
				lossList.addAll(tmpaclossList);
			}else if(acReportCarInfo.getRescuefee()!=null &&acReportCarInfo.getRescuefee() >= 0.01&&DataDictionary.LOSSATTRCODE_THIRD_CAR.equals(acReportCarInfo.getLossAttRCode())){
				aclossItem.setSumLossAmount(acReportCarInfo.getEstimatedLossAmount()+acReportCarInfo.getRescuefee());// 总定损金额，初始化时设金额等于施救费
				AcpayItemVo tmpAclossItem = this.findSampleFeeAclossItemSur(tmpaclossList, aclossItem, acReportCarInfo);
				if (tmpAclossItem != null) {
					tmpAclossItem.setHourFee(aclossItem.getRescueFee() + tmpAclossItem.getRescueFee());
					tmpAclossItem.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAclossItem.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
				lossList.addAll(tmpaclossList);
			}else{
				AcpayItemVo tmpAclossItem = this.findSampleFeeAclossItemSur(tmpaclossList, aclossItem, acReportCarInfo);
				if (tmpAclossItem != null) {
					tmpAclossItem.setHourFee(aclossItem.getRescueFee() + tmpAclossItem.getRescueFee());
					tmpAclossItem.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAclossItem.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
				lossList.addAll(tmpaclossList);
			}
		}
		return lossList;
	}
	/**
	 * @Title: copyAcCarInfoVlHis
	 * @Description: TODO(车辆his表数据转换)
	 * @author 莫浩锋
	 * @param id
	 * @return
	 * @return AcCarDefLoss
	 * @throws
	 * @date Jan 18, 2014 5:09:05 PM
	 */
	public AcCarDefLoss copyAcCarInfoVlHis(BigDecimal id) {
		AcCarDefLoss carDefLoss = new AcCarDefLoss();
		BigDecimal minIdValue = id.multiply(new BigDecimal(1000));
		BigDecimal maxIdValue = minIdValue.add(new BigDecimal(999));
		String hql = "from AcCarDefLossVlHis where id > ? and id< ?   and (verifyLossFlag = ? or verifyLossFlag = ? or eVerifyLossFlag = ? or eVerifyLossFlag = ?) order by id desc";
		List<AcCarDefLossVlHis> carDefLossVlHisList = this.findByHql(hql, minIdValue, maxIdValue, DataDictionary.FLAG_1, DataDictionary.FLAG_3,	DataDictionary.FLAG_1, DataDictionary.FLAG_3);
		if (carDefLossVlHisList.size() > 0) {
			carDefLoss = (AcCarDefLoss) sourceToTarget1(carDefLossVlHisList.get(0), carDefLossVlHisList.get(0).getId(), AcCarDefLoss.class);
		}
		return carDefLoss;
	}

	/**
	 * @Title: findIsPaidSelfFlag
	 * @Description: TODO(判断是否存在标的互碰自赔)
	 * @author 莫浩锋
	 * @param accardeflossList
	 * @param accarinfoList
	 * @return
	 * @return Boolean
	 * @throws
	 * @date Nov 28, 2012 7:56:56 PM
	 */
	private List<AcCarDefLoss> findIsPaidSelfFlag(List<AcCarDefLoss> accardeflossList, List<AcCarInfo> accarinfoList) {
		List<AcCarDefLoss> isPaidSelfLossList = new ArrayList<AcCarDefLoss>();
		for (AcCarDefLoss carDefLoss : accardeflossList) {
			AcCarInfo acCarInfo = findAccarInfo(accarinfoList, carDefLoss.getAcReportCarInfoId());
			if (DataDictionary.CARDEFLOSS_ISPAIDSELF_YES.equals(carDefLoss.getIsPaidSelf())
					&& DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acCarInfo.getLossAttrCode())) {
				isPaidSelfLossList.add(carDefLoss);
			}
		}
		return isPaidSelfLossList;
	}

	/**
	 * @Title: checkIsPaidSelfLossFlag
	 * @Description: TODO(判断是否互碰自赔)
	 * @author 莫浩锋
	 * @param reportNo
	 * @return
	 * @return Boolean
	 * @throws
	 * @date Nov 29, 2012 11:01:46 AM
	 */
	public Boolean checkIsPaidSelfLossFlag(String reportNo, List<AcCarInfo> accarinfoList) {
		// 得到车辆定损任务表信息
		List<AcCarDefLoss> accardeflossList = carLossService.findAllAcCarDefLossByReportNo(reportNo);
		List<AcCarDefLoss> tmpList = this.findIsPaidSelfFlag(accardeflossList, accarinfoList);
		if (tmpList.size() > 0) {
			return true;
		}
		return false;
	}
	
	/**
	 * @Title: findAdvanceDutyFlag
	 * @Description: TODO(获取垫付责任)
	 * @author 李魁服
	 * @param accarinfoList
	 * @param accardeflossList
	 * @return
	 * @return Boolean
	 * @throws
	 * @date 2014-7-3 下午2:43:12
	 */
	public Boolean findAdvanceDutyFlag(List<AcCarInfo> accarinfoList) {
		for (AcCarInfo acCarInfo : accarinfoList) {
			if (DataDictionary.ACCARINFO_CIDUTYFLAG.equals(acCarInfo.getCiDutyFlag())
					&& DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acCarInfo.getLossAttrCode())) {
				return true;
			}
		}
		return false;
	}
	

	/**
	 * @Title: doInitTraPersondata
	 * @Description: TODO(汇总交强险人伤信息)
	 * @author 莫浩锋
	 * @param personLossList
	 * @param kindCodeMap
	 * @param flag
	 * @return
	 * @return List<AcpayItemVo>
	 * @throws
	 * @date Dec 13, 2013 10:59:18 AM
	 */
	public List<AcpayItemVo> doInitTraPersondata(List<AcPersonTrackMain> personLossList, Map<String, String> kindCodeMap, String flag) {
		List<AcpayItemVo> acpersonlossList = new ArrayList<AcpayItemVo>();
		//确认是否2020新条款交强险,默认BZ险别
		String BZ_kindcode=DataDictionary.KINDCODE_BZ;
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20BZ)){
			BZ_kindcode=DataDictionary.KINDCODE_20BZ;
		}
		// ********************************计算人员伤害交强险*******************************************
		for (AcPersonTrackMain acpersontrackmain : personLossList) {
			// 判断任务是否未定损或者核损通过、存在任务在定损、或核损时，取最新轨迹数据。
			if (checkTask(acpersontrackmain.getId()) && !DataDictionary.CASEFLOWCODE_G.equals(flag)
					&& !DataDictionary.CASEFLOWCODE_P.equals(flag)) {
				AcPersonTrackMain persontrackmain = this.copyPersonTrackMainVLHis(acpersontrackmain.getId());
				if(persontrackmain.getId() != null && !"".equals(persontrackmain.getId())){
					acpersontrackmain = persontrackmain;
				}
			}

			List<AcpayItemVo> trmpPersonlossList = new ArrayList<AcpayItemVo>();
			List<AcPersonInjuryCharge> acpersoninjurychargeList = acpersontrackmain.getAcPersonInjuryCharges();
			for (AcPersonInjuryCharge personInjuryCharge : acpersoninjurychargeList) {
				if (personInjuryCharge.getValidFlag() != null && personInjuryCharge.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo acpersonloss = new AcpayItemVo();
				initAclossItem(acpersonloss);
				// 判断是否B险，是即改成BZ险
				// 需要判断acpersontrackmain的属性是否为三者，待实体类重新生成后处理
				String kindCode = this.changeKindCodeToBZ(personInjuryCharge.getKindCode(), personInjuryCharge.getSubFeeTypeCode(),acpersonloss,BZ_kindcode,acpersontrackmain.getLossAttrCode(),kindCodeMap);
				acpersonloss.setKindCode(kindCode);
				if (kindCode == null) {
					continue;
				}
				// 险别是否在投保
				Boolean kindCodeFlag = this.findKindCodeInMap(kindCodeMap, personInjuryCharge.getKindCode());
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					personInjuryCharge.setVerifyLossAmount(personInjuryCharge.getDefLossAmount());
				}
				acpersonloss.setReportNo(acpersontrackmain.getReportNo());
				acpersonloss.setLicenseNo(acpersontrackmain.getLicenseNo());
				acpersonloss.setReportCarInfoId(acpersontrackmain.getReportCarInfoId());
				acpersonloss.setLossItemName(acpersontrackmain.getPersonName());
				acpersonloss.setType(DataDictionary.ACPAYITEMVO_TYPE_PERSON);
				acpersonloss.setDefLossTaskId(acpersontrackmain.getId());
				acpersonloss.setLossAttrCode(acpersontrackmain.getLossAttrCode());
				acpersonloss.setLossAttrName(acpersontrackmain.getLossAttrName());
				acpersonloss.setRiskCode(DataDictionary.RISKCODE_CI);
				acpersonloss.setPersonName(acpersontrackmain.getPersonName());// 名字
				acpersonloss.setIdentifyNumber(acpersontrackmain.getIdentifyNumber());// 身份证号
				acpersonloss.setSex(acpersontrackmain.getPersonSex());// 性别
				acpersonloss.setAge(acpersontrackmain.getPersonAge());// 年龄
				acpersonloss.setLiabilityRate(acpersontrackmain.getLiabilityRate());// 赔偿责任比例
				acpersonloss.setShareRate(acpersontrackmain.getShareRate());// 赔偿分摊比例
				String feeTypeName = "";
				if (DataDictionary.ACPERSONLOSS_MEDICAL.equals(personInjuryCharge.getFeeTypeCode())) {
					feeTypeName = "医疗费用";
				} else {
					feeTypeName = "死亡伤残费用";
				}
				// FeeTypeCode和人伤定损保持一致，分为医疗1、死亡2；
				// SubFeeTypeCode进行汇总为医疗100、死亡200、精神 212；
				acpersonloss.setFeeTypeCode(personInjuryCharge.getFeeTypeCode());// 费用类型代码
				acpersonloss.setFeeTypeName(feeTypeName);// 费用类型名称
				// 判断是否死亡损失

				if (personInjuryCharge.getFeeTypeCode() != null
						&& DataDictionary.ACPERSONLOSS_DEATH.equals(personInjuryCharge.getFeeTypeCode().trim())) {
					acpersonloss.setSubFeeTypeCode(personInjuryCharge.getFeeTypeCode());// 死亡2
					acpersonloss.setSubFeeTypeName(feeTypeName);
					// 判断是否精神损失
					if (personInjuryCharge.getSubFeeTypeCode() != null
							&& DataDictionary.ACPERSONLOSS_MENTAL.equals(personInjuryCharge.getSubFeeTypeCode().trim())) {
						acpersonloss.setSubFeeTypeCode(personInjuryCharge.getSubFeeTypeCode());// 精神212
						acpersonloss.setSubFeeTypeName(personInjuryCharge.getSubFeeTypeName());
					}
				} else {
					acpersonloss.setSubFeeTypeCode(personInjuryCharge.getFeeTypeCode());// 医疗1
					acpersonloss.setSubFeeTypeName(feeTypeName);
				}
				acpersonloss.setSumLossAmount(personInjuryCharge.getVerifyLossAmount());// 费用
				AcpayItemVo tmpAcpersonloss = findSampleAcpersonLoss(trmpPersonlossList, acpersonloss, personInjuryCharge);
				if (tmpAcpersonloss != null) {
					if (acpersonloss.getSumLossAmount() == null) {
						acpersonloss.setSumLossAmount(new Double(0.0));
					}
					if (tmpAcpersonloss.getSumLossAmount() == null) {
						tmpAcpersonloss.setSumLossAmount(new Double(0.0));
					}
					tmpAcpersonloss.setSumLossAmount(acpersonloss.getSumLossAmount() + tmpAcpersonloss.getSumLossAmount());
				} else {
					trmpPersonlossList.add(acpersonloss);
				}
			}
			acpersonlossList.addAll(trmpPersonlossList);
		}
		// Double金额四舍五入
		this.initLosslist(acpersonlossList);
		return acpersonlossList;
	}

	public List<AcpayItemVo> doInitTraPersondataSur(List<AcReportPersonInfo> personLossList, Map<String, String> kindCodeMap, String flag,AcSurvey acSurvey){
		List<AcpayItemVo> acpersonlossList = new ArrayList<AcpayItemVo>();
		// ********************************计算人员伤害交强险*******************************************
		for (AcReportPersonInfo acReportPersonInfo : personLossList) {
			// 判断任务是否未定损或者核损通过、存在任务在定损、或核损时，取最新轨迹数据。
			String accidentDutyCode = acSurvey.getAccidentDutyCode();
			
			List<AcpayItemVo> trmpPersonlossList = new ArrayList<AcpayItemVo>();
			AcpayItemVo acpersonloss = new AcpayItemVo();
			initAclossItem(acpersonloss);
			// 判断是否B险，是即改成BZ险
			// 需要判断acReportPersonInfo的属性是否为三者，待实体类重新生成后处理
			String kindCode =this.getDefaultSurveyRiskCode(null,  null,acReportPersonInfo, kindCodeMap, acSurvey, DataDictionary.RISK_SURVEY_FLAG_CI);
			acpersonloss.setKindCode(kindCode);
			if (kindCode == null||"".equals(kindCode)) {
				continue;
			}
			acpersonloss.setOrder("2");
			// 险别是否在投保
			acpersonloss.setReportNo(acReportPersonInfo.getReportNo());
			acpersonloss.setReportCarInfoId(acReportPersonInfo.getId());
			acpersonloss.setLossItemName(acReportPersonInfo.getPersonName());
			acpersonloss.setType(DataDictionary.ACPAYITEMVO_TYPE_PERSON);
			acpersonloss.setDefLossTaskId(acReportPersonInfo.getId());
			acpersonloss.setLossAttrCode(acReportPersonInfo.getLossAttRCode());
			acpersonloss.setLossAttrName(acReportPersonInfo.getLossAttRName());
			acpersonloss.setRiskCode(DataDictionary.RISKCODE_CI);
			acpersonloss.setPersonName(acReportPersonInfo.getPersonName());// 名字
			acpersonloss.setIdentifyNumber(acReportPersonInfo.getIdentifyNumber());// 身份证号
			BigDecimal acReportCarInfoId = acReportPersonInfo.getAcReportCarInfoId();
			if(acReportCarInfoId!=null){
				AcReportCarInfo acReportCarInfo = reportService.findAcReportCarInfoById(acReportCarInfoId);
				String isciDuty ="";
				if("1".equals(acReportCarInfo.getIsDuty())){//有责
					isciDuty ="1";
				}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
					isciDuty ="0";
				}else{
					isciDuty = "5".equals(accidentDutyCode)?"0":"1";
				}
				String liabilityRate =DataDictionary.DutyMap.get(accidentDutyCode);
				acpersonloss.setReportCarInfoId(acReportCarInfoId);
				acpersonloss.setLiabilityRate(Double.valueOf(liabilityRate));
				acpersonloss.setLicenseNo(acReportCarInfo.getLicenseNo());
			}
			String feeTypeName = "";
			boolean injuryflag = false;
			AcpayItemVo tmpAcpersonloss =null;
			if ((acReportPersonInfo.getInjuryfee()!=null&&acReportPersonInfo.getInjuryfee()>0)) {//死亡伤残费大于0
				feeTypeName = "死亡伤残费用";
				acpersonloss.setFeeTypeCode("200");
				acpersonloss.setFeeTypeName(feeTypeName);
				acpersonloss.setSubFeeTypeCode("200");// 死亡2
				acpersonloss.setSubFeeTypeName(feeTypeName);
				acpersonloss.setSumLossAmount(acReportPersonInfo.getInjuryfee());// 费用
				injuryflag = true;
				tmpAcpersonloss = findSampleAcpersonLossSurvey(trmpPersonlossList, acpersonloss);
				if (tmpAcpersonloss != null) {
					if (acpersonloss.getSumLossAmount() == null) {
						acpersonloss.setSumLossAmount(new Double(0.0));
					}
					if (tmpAcpersonloss.getSumLossAmount() == null) {
						tmpAcpersonloss.setSumLossAmount(new Double(0.0));
					}
					tmpAcpersonloss.setSumLossAmount(acpersonloss.getSumLossAmount() + tmpAcpersonloss.getSumLossAmount());
				} else {
					trmpPersonlossList.add(acpersonloss);
				}
			}
			if(acReportPersonInfo.getMedicalfee()!=null&&acReportPersonInfo.getMedicalfee()>0){//医疗费大于0
				AcpayItemVo medicalLoss = new AcpayItemVo();
				if(injuryflag){//如果有伤残死亡，需单独加一条费用
					CommonMethod.copyObjectToObject(acpersonloss, medicalLoss);
					feeTypeName = "医疗费用";
					medicalLoss.setFeeTypeCode("100");
					medicalLoss.setFeeTypeName(feeTypeName);
					medicalLoss.setSubFeeTypeCode("100");// 医疗1
					medicalLoss.setSubFeeTypeName(feeTypeName);
					medicalLoss.setSumLossAmount(acReportPersonInfo.getMedicalfee());// 费用
					tmpAcpersonloss = findSampleAcpersonLossSurvey(trmpPersonlossList, medicalLoss);
				}else{
					feeTypeName = "医疗费用";
					acpersonloss.setFeeTypeCode("100");
					acpersonloss.setFeeTypeName(feeTypeName);
					acpersonloss.setSubFeeTypeCode("1");// 医疗1
					acpersonloss.setSubFeeTypeName(feeTypeName);
					acpersonloss.setSumLossAmount(acReportPersonInfo.getMedicalfee());// 费用
					tmpAcpersonloss = findSampleAcpersonLossSurvey(trmpPersonlossList, acpersonloss);
				}
				if (tmpAcpersonloss != null) {
					if (acpersonloss.getSumLossAmount() == null) {
						acpersonloss.setSumLossAmount(new Double(0.0));
					}
					if (tmpAcpersonloss.getSumLossAmount() == null) {
						tmpAcpersonloss.setSumLossAmount(new Double(0.0));
					}
					tmpAcpersonloss.setSumLossAmount(acpersonloss.getSumLossAmount() + tmpAcpersonloss.getSumLossAmount());
				} else {
					if(injuryflag){
						trmpPersonlossList.add(medicalLoss);
					}else{
						trmpPersonlossList.add(acpersonloss);
					}
				}
			}
			acpersonlossList.addAll(trmpPersonlossList);
		}
		// Double金额四舍五入
		this.initLosslist(acpersonlossList);
		return acpersonlossList;

		
	}
	/**
	 * @Title: copyPersonTrackMainVLHis
	 * @Description: TODO(人伤his表数据转换)
	 * @author 莫浩锋
	 * @param id
	 * @return
	 * @return AcPersonTrackMain
	 * @throws
	 * @date Jan 18, 2014 5:05:10 PM
	 */
	public AcPersonTrackMain copyPersonTrackMainVLHis(BigDecimal id) {
		AcPersonTrackMain acpersontrackmain = new AcPersonTrackMain();
		BigDecimal minIdValue = id.multiply(new BigDecimal(1000));
		BigDecimal maxIdValue = minIdValue.add(new BigDecimal(999));
		String hql = " from AcPersonTrackMainVlhis where id > ? and id< ?  "  
				+ " and (verifyLossFlag = ? or verifyLossFlag = ? or eVerifyLossFlag = ? or eVerifyLossFlag = ?) order by id desc";
		List<AcPersonTrackMainVlhis> personTrackMainVLHisList = this.findByHql(hql, minIdValue,maxIdValue,DataDictionary.FLAG_1, DataDictionary.FLAG_3, DataDictionary.FLAG_1, DataDictionary.FLAG_3);
		if (personTrackMainVLHisList.size() > 0) {
			acpersontrackmain = (AcPersonTrackMain) sourceToTarget1(personTrackMainVLHisList.get(0), personTrackMainVLHisList.get(0)
					.getId(), AcPersonTrackMain.class);
		}
		return acpersontrackmain;
	}
	
	public List<AcpayItemVo> doInitBILossDataSurvey(List<AcReportCarInfo> carLossList, List<AcReportPropInfo> proplossList,
			 Map<String, String> kindCodeMap, String dentDutyCode, AcClaim biClaim, String reportNo, String flag,AcSurvey survey){

		/***********************************************************************
		 * 需要根据报案表，查勘表，立案表，资料初始化理算书
		 */
		List<AcpayItemVo> aclossList = new ArrayList<AcpayItemVo>();
		List<AcpayItemVo> resuceLossList = new ArrayList<AcpayItemVo>();
		boolean isPaidSelfLoss = false;
		// 判断是否标的车并且是互碰自赔

		if ("1".equals(survey.getIsPaidSelf())) {//是互碰自赔
			isPaidSelfLoss = true;
		}
		String accidentDutyCode = survey.getAccidentDutyCode();
		

		for (AcReportCarInfo acReportCarInfo : carLossList) {
			if(acReportCarInfo.getRescuefee() !=null &&acReportCarInfo.getRescuefee() >= 0.01&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())){//标的车施救费需特殊处理
				// 换件费用
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				// 判断是否BZ险，是即改成B险
				String kindCode = getDefaultSurveyRiskCode(acReportCarInfo, null, null, kindCodeMap, survey, DataDictionary.RISK_SURVEY_FLAG_BUS);
				if(kindCode==null||"".equals(kindCode)){
					continue;
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				String isciDuty =getIsDuty(acReportCarInfo, accidentDutyCode);
				if("1".equals(acReportCarInfo.getIsDuty())){//有责
					isciDuty ="1";
				}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
					isciDuty ="0";
				}else{
					isciDuty = "5".equals(accidentDutyCode)?"0":"1";
				}
				String liabilityRate =DataDictionary.DutyMap.get(accidentDutyCode);
				aclossItem.setOrder("2");
				// 定损金额赋给核损金额自动理算用
				aclossItem.setReportNo(reportNo);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acReportCarInfo.getLossAttRCode());
				aclossItem.setLossAttrName(acReportCarInfo.getLossAttRName());
				aclossItem.setLossItemName(acReportCarInfo.getLicenseNo());
				aclossItem.setDefLossTaskId(acReportCarInfo.getId());
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setLicenseNo(acReportCarInfo.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(Double.valueOf(liabilityRate));// 赔偿责任比例
				aclossItem.setMaterialFee(acReportCarInfo.getRescuefee() != null ? acReportCarInfo.getRescuefee() : 0.0);// 换件核损金额
				aclossItem.setSumLossAmount(acReportCarInfo.getRescuefee());// 总定损金额，初始化时设金额等于换件费
				aclossItem.setInsuredName(acReportCarInfo.getDriverName());
				aclossItem.setReportCarInfoId(acReportCarInfo.getId());
				aclossItem.setRescueFee(acReportCarInfo.getRescuefee());
				resuceLossList.add(aclossItem);
			}
		}
		// *******************************以下计算车辆商业险******************************************
		for (AcReportCarInfo acReportCarInfo : carLossList) {
			// 标的互碰自赔只汇总标的损失			
			List<AcpayItemVo> tmpaclossList = new ArrayList<AcpayItemVo>();
			// 换件费用
			AcpayItemVo aclossItem = new AcpayItemVo();
			initAclossItem(aclossItem);
			// 判断是否BZ险，是即改成B险
			String kindCode = getDefaultSurveyRiskCode(acReportCarInfo, null, null, kindCodeMap, survey, DataDictionary.RISK_SURVEY_FLAG_BUS);
			if(kindCode==null||"".equals(kindCode)){
				continue;
			}
			aclossItem.setKindCode(kindCode);
			// 险别是否在投保
			Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
			if (!kindCodeFlag) {
				continue;
			}
			String isciDuty ="";
			if("1".equals(acReportCarInfo.getIsDuty())){//有责
				isciDuty ="1";
			}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
				isciDuty ="0";
			}else{
				isciDuty = "5".equals(accidentDutyCode)?"0":"1";
			}
			String liabilityRate =DataDictionary.DutyMap.get(accidentDutyCode);
			aclossItem.setOrder("2");
			// 定损金额赋给核损金额自动理算用
			aclossItem.setReportNo(reportNo);
			aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
			aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
			aclossItem.setLossAttrCode(acReportCarInfo.getLossAttRCode());
			aclossItem.setLossAttrName(acReportCarInfo.getLossAttRName());
			aclossItem.setLossItemName(acReportCarInfo.getLicenseNo());
			aclossItem.setDefLossTaskId(acReportCarInfo.getId());
			aclossItem.setRiskCode(biClaim.getRiskCode());
			aclossItem.setLicenseNo(acReportCarInfo.getLicenseNo());// 车牌号
			aclossItem.setLiabilityRate(Double.valueOf(liabilityRate));// 赔偿责任比例
			aclossItem.setMaterialFee(acReportCarInfo.getEstimatedLossAmount() != null ? acReportCarInfo.getEstimatedLossAmount() : 0.0);// 换件核损金额
			aclossItem.setSumLossAmount(aclossItem.getMaterialFee());// 总定损金额，初始化时设金额等于换件费
			aclossItem.setInsuredName(acReportCarInfo.getDriverName());
			aclossItem.setReportCarInfoId(acReportCarInfo.getId());
			if(acReportCarInfo.getRescuefee()!=null &&acReportCarInfo.getRescuefee() >= 0.01&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())){//标的车施救费不需要再处理
				tmpaclossList.add(aclossItem);
				aclossList.addAll(resuceLossList);
				aclossList.addAll(tmpaclossList);
			}else if(acReportCarInfo.getRescuefee()!=null &&acReportCarInfo.getRescuefee() >= 0.01&&DataDictionary.LOSSATTRCODE_THIRD_CAR.equals(acReportCarInfo.getLossAttRCode())){
				aclossItem.setSumLossAmount(acReportCarInfo.getEstimatedLossAmount()+acReportCarInfo.getRescuefee());// 总定损金额，初始化时设金额等于施救费
				AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, null);
				if (tmpAcloss != null) {
					tmpAcloss.setMaterialFee(aclossItem.getMaterialFee() + tmpAcloss.getMaterialFee());// 险别相同费用相加
					tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
				aclossList.addAll(tmpaclossList);
			}else{
				AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, null);
				if (tmpAcloss != null) {
					tmpAcloss.setMaterialFee(aclossItem.getMaterialFee() + tmpAcloss.getMaterialFee());// 险别相同费用相加
					tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
				aclossList.addAll(tmpaclossList);
			}
		}
		// 增加a险附加险  机动车损失保险无法找到第三方特约险（附加险）险别是否在投保
		Boolean atempFlag = this.findBiKindCodeInMap(kindCodeMap, DataDictionary.KINDCODE_I);
		if (atempFlag) {
			List<AcpayItemVo> tempAlist = new ArrayList<AcpayItemVo>();
			for(AcpayItemVo vo:aclossList){
				if(DataDictionary.KINDCODE_A.equals(vo.getKindCode())){
					AcpayItemVo tempVo= new AcpayItemVo();
					DataUtils.copySimpleObjectToTargetFromSource(tempVo, vo);
					tempVo.setKindCode(DataDictionary.KINDCODE_I);
					tempAlist.add(tempVo);
				}
			}
			if(tempAlist.size()>0){
				aclossList.addAll(tempAlist);
			}
		}
		//end增加a险附加险
		
		// ******************************计算物损商业险***********************************************
		for (AcReportPropInfo acReportPropInfo : proplossList) {
			// 判断任务是否未定损或者核损通过、存在任务在定损、或核损时，取最新轨迹数据。
			// 互碰自赔只汇总标的车上物
			if ("1".equals(survey.getIsPaidSelf())) {
				// 三者车上物
				if (DataDictionary.LOSSATTRCODE_THIRD_CARPROP.equals(acReportPropInfo.getLossAttRCode())) {
					continue;
				}
				// 车外物
				if (DataDictionary.LOSSATTRCODE_PROP.equals(acReportPropInfo.getLossAttRCode())) {
					continue;
				}
			}

			List<AcpayItemVo> tmpaclossList = new ArrayList<AcpayItemVo>();
			// 更换项目费用
			AcpayItemVo aclossItem = new AcpayItemVo();
			initAclossItem(aclossItem);
			String kindCode = getDefaultSurveyRiskCode(null, acReportPropInfo, null, kindCodeMap, survey, DataDictionary.RISK_SURVEY_FLAG_BUS);
			if(kindCode==null||"".equals(kindCode)){
				continue;
			}
			aclossItem.setKindCode(kindCode);
			// 险别是否在投保
			Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
			if (!kindCodeFlag) {
				continue;
			}
			String liabilityRate =DataDictionary.DutyMap.get(accidentDutyCode);
			BigDecimal acReportCarInfoId = acReportPropInfo.getAcReportCarInfoId();
			if(acReportCarInfoId!=null){
				AcReportCarInfo acReportCarInfo = reportService.findAcReportCarInfoById(acReportCarInfoId);
				String isciDuty ="";
				if("1".equals(acReportCarInfo.getIsDuty())){//有责
					isciDuty ="1";
				}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
					isciDuty ="0";
				}else{
					isciDuty = "5".equals(accidentDutyCode)?"0":"1";
				}
				aclossItem.setReportCarInfoId(acReportCarInfoId);
			}
			// 定损金额赋给核损金额自动理算用
			aclossItem.setReportNo(reportNo);
			aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
			aclossItem.setRiskCode(biClaim.getRiskCode());
			aclossItem.setDefLossTaskId(acReportPropInfo.getId());
			aclossItem.setLossType(DataDictionary.LOSSTYPE_PROPERTY);// 表示财产
			aclossItem.setMaterialFee(acReportPropInfo.getEstimatedLossAmount() != null ? acReportPropInfo.getEstimatedLossAmount() : 0.0);// 物损项目费用
			aclossItem.setLossItemName(acReportPropInfo.getLossPropName());// 物品名称
			aclossItem.setSumLossAmount(aclossItem.getMaterialFee());// 初始化总金额等于物损费用
			aclossItem.setLiabilityRate(Double.valueOf(liabilityRate));// 赔偿责任比例
			aclossItem.setLossAttrCode(acReportPropInfo.getLossAttRCode());
			aclossItem.setLossAttrName(acReportPropInfo.getLossAttRName());
			AcpayItemVo temAcloss = findSampleAclossItem(tmpaclossList, aclossItem, null);
			if (temAcloss != null) {
				temAcloss.setMaterialFee(aclossItem.getMaterialFee() + temAcloss.getMaterialFee());// 险别相同费用相加
				temAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + temAcloss.getSumLossAmount());
			} else {
				tmpaclossList.add(aclossItem);
			}
			aclossList.addAll(tmpaclossList);
		}


		if (isPaidSelfLoss) {
			 dentDutyCode = DataDictionary.FLAG_1;
		}

		// 根据报案号和事故责任比例获取责任免赔率列表
		List<AgDutyDeductible> dutyDeductibleRateList = commonService.getDutyDeductibleRate(reportNo, dentDutyCode);
		Map<String, Double> map = this.findDutyDeductibleRate(reportNo);
		String A_kindcode=DataDictionary.KINDCODE_A;
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
			A_kindcode = DataDictionary.KINDCODE_A1;
		}
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
			A_kindcode = DataDictionary.KINDCODE_20A;
		}
		for (AcpayItemVo aclossItem : aclossList) {
			// 绝对免赔额
			if (A_kindcode.equals(aclossItem.getKindCode())&& (aclossItem.getRescueFee() != null ? aclossItem.getRescueFee() : 0.0) <= 0.005) {
				List<AclcItemKind>  aclcItemKindList = policyService.findItemKindByReportNoAndKindcode(reportNo, biClaim.getRiskCode(),A_kindcode);
				if(!aclcItemKindList.isEmpty()&&aclcItemKindList.size()>0){
					if(aclcItemKindList.get(0).getDeductible()!=null &&aclcItemKindList.get(0).getDeductible()>0){//0518
						aclossItem.setAbsDeductibleAmount(aclcItemKindList.get(0).getDeductible());
					}else{
						Boolean deductibleFlag = findKindCodeInMap(kindCodeMap, DataDictionary.KINDCODE_Q);//0508
						if (deductibleFlag) {// Q险绝对免赔额
							List<AclcItemKind>  aclcItemKinds = policyService.findItemKindByReportNoAndKindcode(reportNo, biClaim.getRiskCode(),DataDictionary.KINDCODE_Q);
							if(!aclcItemKinds.isEmpty()&&aclcItemKinds.size()>0){
								aclossItem.setAbsDeductibleAmount(aclcItemKinds.get(0).getValue());
							}
						}
					}
				}
			}

			if(!aclossItem.getKindCode().startsWith(DataDictionary.KINDCODE_20)){
				// 责任免赔率
				if (dutyDeductibleRateList != null) {
					for (AgDutyDeductible agDutyDeductible : dutyDeductibleRateList) {
						if (agDutyDeductible.getId().getKindCode().trim().equals(aclossItem.getKindCode())) {
							aclossItem.setDutyDeductibleRate(agDutyDeductible.getDeductibleRate());
						}
					}
				}
				// 特殊险别责任免赔率
				Double dutyDeductibleRate = this.findDutyDeductibleRateByKindCode(aclossItem,map);
				if (dutyDeductibleRate != null) {
					aclossItem.setDutyDeductibleRate(dutyDeductibleRate);
				}
			}
		}
		// Double金额四舍五入
		this.initLosslist(aclossList);

		return aclossList;
	
		
	}

	/**
	 * @Title: doInitBILossData
	 * @Description: TODO(汇总商业Loss)
	 * @author 莫浩锋
	 * @param carLossList
	 * @param proplossList
	 * @param carInfoList
	 * @param kindCodeMap
	 * @param survey
	 * @param claim
	 * @param reportNO
	 * @param flag
	 * @return
	 * @return List<AcpayItemVo>
	 * @throws
	 * @date Dec 13, 2013 11:00:58 AM
	 */
	public List<AcpayItemVo> doInitBILossData(List<AcCarDefLoss> carLossList, List<AcPropDefLoss> proplossList,
			List<AcCarInfo> carInfoList, Map<String, String> kindCodeMap, String dentDutyCode, AcClaim biClaim, String reportNo, String flag) {

		/***********************************************************************
		 * 需要根据报案表，查勘表，立案表，资料初始化理算书
		 */
		List<AcpayItemVo> aclossList = new ArrayList<AcpayItemVo>();
		boolean isPaidSelfLoss = false;
		// 判断是否标的车并且是互碰自赔
		List<AcCarDefLoss> isPaidSelfLossList = findIsPaidSelfFlag(carLossList, carInfoList);
		if (isPaidSelfLossList.size() > 0) {
			// 互碰自赔不投保A险则不赔付商业险
			Boolean kindCodeFlag = findBiKindCodeInMap(kindCodeMap, DataDictionary.KINDCODE_A);
			if (!kindCodeFlag) {
				kindCodeFlag = findBiKindCodeInMap(kindCodeMap, DataDictionary.KINDCODE_20A);
			}
			if (!kindCodeFlag) {
				return aclossList;
			}
			isPaidSelfLoss = true;
		}

		// *******************************以下计算车辆商业险******************************************
		for (AcCarDefLoss acCarDefLoss : carLossList) {
			// 判断任务是否未定损或者核损通过、存在任务在定损、或核损时，取最新轨迹数据。
			if (checkTask(acCarDefLoss.getId()) && !DataDictionary.CASEFLOWCODE_G.equals(flag)
					&& !DataDictionary.CASEFLOWCODE_P.equals(flag)) {
				AcCarDefLoss carDefLoss = this.copyAcCarInfoVlHis(acCarDefLoss.getId());
				if(carDefLoss.getId() != null && !"".equals(carDefLoss.getId())){
					acCarDefLoss = carDefLoss;
				}
				
			}
			// 标的互碰自赔只汇总标的损失
			if (isPaidSelfLoss) {
				// 三者车
				if (DataDictionary.LOSSATTRCODE_THIRD_CAR.equals(acCarDefLoss.getLossAttrCode())) {
					continue;
				}
			}
			List<AcpayItemVo> tmpaclossList = new ArrayList<AcpayItemVo>();
			AcCarInfo acCarInfo = findAccarInfo(carInfoList, acCarDefLoss.getAcReportCarInfoId());
			List<AcCarSaveCharge> acsavechargeList = acCarDefLoss.getAcCarSaveCharges();

			for (AcCarSaveCharge acCarSaveCharge : acsavechargeList) {
				if (acCarSaveCharge.getValidFlag() != null && acCarSaveCharge.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				// 判断是否BZ险，是即改成B险
				String kindCode = this.detectionKindCode(acCarSaveCharge.getKindCode(), kindCodeMap,null,null);
				if (isPaidSelfLoss) {
					// 互碰自赔赔偿责任比例默认为100%
					aclossItem.setLiabilityRate(100.0);
					if (DataDictionary.KINDCODE_BZ.equals(acCarSaveCharge.getKindCode())||DataDictionary.KINDCODE_20BZ.equals(acCarSaveCharge.getKindCode())) {
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
							kindCode = DataDictionary.KINDCODE_20A;
						}else if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
							kindCode = DataDictionary.KINDCODE_A1;							
						}else{
							kindCode = DataDictionary.KINDCODE_A;
						}
					}
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarSaveCharge.setVerifyLossAmount(acCarSaveCharge.getDefLossAmount());
				}
				aclossItem.setReportNo(reportNo);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
				if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())) {
					aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_CARSAVE);
				}
				aclossItem.setFeeTypeName(acCarSaveCharge.getFeeTypeName());// 受损车辆属性
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setRescueFee(acCarSaveCharge.getVerifyLossAmount() != null ? acCarSaveCharge.getVerifyLossAmount() : 0.0);// 施救费
				aclossItem.setSumLossAmount(aclossItem.getRescueFee());// 总定损金额，初始化时设金额等于施救费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				AcpayItemVo tmpAcloss = findSampleFeeAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
				if (tmpAcloss != null) {
					tmpAcloss.setRescueFee(aclossItem.getRescueFee() + tmpAcloss.getRescueFee());// 险别相同费用相加
					tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
			}

			// 换件费用
			List<AcCarItemChange> acitemchangeList = acCarDefLoss.getAcCarItemChanges();
			for (int k = 0; k < acitemchangeList.size(); k++) {
				AcCarItemChange acCarItemChange = acitemchangeList.get(k);
				if (acCarItemChange.getValidFlag() != null && acCarItemChange.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				// 判断是否BZ险，是即改成B险
				String kindCode = detectionKindCode(acCarItemChange.getKindCode(),kindCodeMap, null, null);
				if (isPaidSelfLoss) {
					if (DataDictionary.KINDCODE_BZ.equals(acCarItemChange.getKindCode())||DataDictionary.KINDCODE_20BZ.equals(acCarItemChange.getKindCode())) {
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
							kindCode = DataDictionary.KINDCODE_20A;
						}else if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
							kindCode = DataDictionary.KINDCODE_A1;
						}else{
							kindCode = DataDictionary.KINDCODE_A;
						}
					}
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarItemChange.setVerifyLossAmount(acCarItemChange.getDefLossAmount());
				}
				aclossItem.setReportNo(reportNo);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setMaterialFee(acCarItemChange.getVerifyLossAmount() != null ? acCarItemChange.getVerifyLossAmount() : 0.0);// 换件核损金额
				aclossItem.setSumLossAmount(aclossItem.getMaterialFee());// 总定损金额，初始化时设金额等于换件费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.KINDCODE_A1.equals(acCarItemChange.getKindCode())&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())){
					if (DataDictionary.ISDEVICEITEM_1.equals(acCarItemChange.getIsDeviceItem())) {
						aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_DEVICEITEM);
						aclossItem.setDeviceItemLoss(acCarItemChange.getVerifyLossAmount() != null ? acCarItemChange.getVerifyLossAmount() : 0.0);
					}
					AcpayItemVo tmpAcloss = null;
					for (int i = 0; i < tmpaclossList.size(); i++) {
						AcpayItemVo tmpaclossItem = tmpaclossList.get(i);
						//损失项目统计去掉施救费记录
						if(tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() == 0D){
							if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())){
								//原列表存在新增设备，并且当前换件记录也是新增设备则用原来的记录累加核定损失
								if((tmpaclossItem.getDeviceItemLoss() != null && tmpaclossItem.getDeviceItemLoss() > 0.001)
										&&DataDictionary.ISDEVICEITEM_1.equals(acCarItemChange.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								//原列表没有新增设备，并且当前换件记录不是新增设备则用原来的记录累加核定损失
								}else if((tmpaclossItem.getDeviceItemLoss()==null||tmpaclossItem.getDeviceItemLoss() ==0D)
										&&!DataDictionary.ISDEVICEITEM_1.equals(acCarItemChange.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								}
							}
						}
					}
					if (tmpAcloss != null) {
						if (DataDictionary.ISDEVICEITEM_1.equals(acCarItemChange.getIsDeviceItem())){
							tmpAcloss.setDeviceItemLoss(aclossItem.getDeviceItemLoss() + tmpAcloss.getDeviceItemLoss());//新增设备
						}
						tmpAcloss.setMaterialFee(aclossItem.getMaterialFee() + tmpAcloss.getMaterialFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					}else{
						tmpaclossList.add(aclossItem);
					}
				}else{
					AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
					if (tmpAcloss != null) {
						tmpAcloss.setMaterialFee(aclossItem.getMaterialFee() + tmpAcloss.getMaterialFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					} else {
						tmpaclossList.add(aclossItem);
					}
				}
			}

			// 修理
			List<AcCarRepairFee> accarrepairfeeList = acCarDefLoss.getAcCarRepairFees();
			for (int j = 0; j < accarrepairfeeList.size(); j++) {
				AcCarRepairFee acCarRepairFee = accarrepairfeeList.get(j);
				if (acCarRepairFee.getValidFlag() != null && acCarRepairFee.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				this.initAclossItem(aclossItem);
				// 判断是否BZ险，是即改成B险
				String kindCode = detectionKindCode(acCarRepairFee.getKindCode(),kindCodeMap, null, null);
				if (isPaidSelfLoss) {
					if (DataDictionary.KINDCODE_BZ.equals(acCarRepairFee.getKindCode())||DataDictionary.KINDCODE_20BZ.equals(acCarRepairFee.getKindCode())) {
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
							kindCode = DataDictionary.KINDCODE_20A;
						}else if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
							kindCode = DataDictionary.KINDCODE_A1;							
						}else{
							kindCode = DataDictionary.KINDCODE_A;
						}
					}
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarRepairFee.setVerifyLossAmount(acCarRepairFee.getDefLossAmount());
				}
				aclossItem.setReportNo(reportNo);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setHourFee(acCarRepairFee.getVerifyLossAmount() != null ? acCarRepairFee.getVerifyLossAmount() : 0.0);
				aclossItem.setSumLossAmount(aclossItem.getHourFee());// 总定损金额，初始化时设金额等于修理费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.KINDCODE_A1.equals(acCarRepairFee.getKindCode())&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())){
					if (DataDictionary.ISDEVICEITEM_1.equals(acCarRepairFee.getIsDeviceItem())) {
						aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_DEVICEITEM);
						aclossItem.setDeviceItemLoss(acCarRepairFee.getVerifyLossAmount() != null ? acCarRepairFee.getVerifyLossAmount() : 0.0);
					}
					AcpayItemVo tmpAcloss = null;
					for (int i = 0; i < tmpaclossList.size(); i++) {
						AcpayItemVo tmpaclossItem = tmpaclossList.get(i);
						//损失项目统计去掉施救费记录
						if(tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() == 0D){
							if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())){
								//原列表存在新增设备，并且当前维修记录也是新增设备则用原来的记录累加核定损失
								if((tmpaclossItem.getDeviceItemLoss() != null && tmpaclossItem.getDeviceItemLoss() > 0.001)
										&&DataDictionary.ISDEVICEITEM_1.equals(acCarRepairFee.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								//原列表没有新增设备，并且当前维修记录不是新增设备则用原来的记录累加核定损失
								}else if((tmpaclossItem.getDeviceItemLoss()==null||tmpaclossItem.getDeviceItemLoss() ==0D)
										&&!DataDictionary.ISDEVICEITEM_1.equals(acCarRepairFee.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								}
							}
						}
					}
					if (tmpAcloss != null) {
						if (DataDictionary.ISDEVICEITEM_1.equals(acCarRepairFee.getIsDeviceItem())){
							tmpAcloss.setDeviceItemLoss(aclossItem.getDeviceItemLoss() + tmpAcloss.getDeviceItemLoss());//新增设备
						}
						tmpAcloss.setMaterialFee(aclossItem.getMaterialFee() + tmpAcloss.getMaterialFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					}else{
						tmpaclossList.add(aclossItem);
					}
				}else{
					AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
					if (tmpAcloss != null) {
						tmpAcloss.setHourFee(aclossItem.getHourFee() + tmpAcloss.getHourFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					} else {
						tmpaclossList.add(aclossItem);
					}
				}
			}
			
			// 车辆辅料项目清单
			List<AcCarMaterialFee> acCarMaterialFeeList = acCarDefLoss.getAcCarMaterialFees();
			for (int k = 0; k < acCarMaterialFeeList.size(); k++) {
				AcCarMaterialFee acCarMaterialFee = acCarMaterialFeeList.get(k);
				if (acCarMaterialFee.getValidFlag() != null && acCarMaterialFee.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				// 判断是否BZ险，是即改成B险
				String kindCode = detectionKindCode(acCarMaterialFee.getKindCode(),kindCodeMap, null, null);
				if (isPaidSelfLoss) {
					if (DataDictionary.KINDCODE_BZ.equals(acCarMaterialFee.getKindCode())||DataDictionary.KINDCODE_20BZ.equals(acCarMaterialFee.getKindCode())) {
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
							kindCode = DataDictionary.KINDCODE_20A;
						}else if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
							kindCode = DataDictionary.KINDCODE_A1;							
						}else{
							kindCode = DataDictionary.KINDCODE_A;
						}
					}
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarMaterialFee.setVerifyLossAmount(acCarMaterialFee.getDefLossAmount());
				}
				aclossItem.setReportNo(reportNo);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setAccessoriesFee(acCarMaterialFee.getVerifyLossAmount() != null ? acCarMaterialFee.getVerifyLossAmount() : 0.0);// 换件核损金额
				aclossItem.setSumLossAmount(aclossItem.getAccessoriesFee());// 总定损金额，初始化时设金额等于换件费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.KINDCODE_A1.equals(acCarMaterialFee.getKindCode())&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())){
					if (DataDictionary.ISDEVICEITEM_1.equals(acCarMaterialFee.getIsDeviceItem())) {
						aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_DEVICEITEM);
						aclossItem.setDeviceItemLoss(acCarMaterialFee.getVerifyLossAmount() != null ? acCarMaterialFee.getVerifyLossAmount() : 0.0);
					}
					AcpayItemVo tmpAcloss = null;
					for (int i = 0; i < tmpaclossList.size(); i++) {
						AcpayItemVo tmpaclossItem = tmpaclossList.get(i);
						//损失项目统计去掉施救费记录
						if(tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() == 0D){
							if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())){
								//原列表存在新增设备，并且当前换件记录也是新增设备则用原来的记录累加核定损失
								if((tmpaclossItem.getDeviceItemLoss() != null && tmpaclossItem.getDeviceItemLoss() > 0.001)
										&&DataDictionary.ISDEVICEITEM_1.equals(acCarMaterialFee.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								//原列表没有新增设备，并且当前换件记录不是新增设备则用原来的记录累加核定损失
								}else if((tmpaclossItem.getDeviceItemLoss()==null||tmpaclossItem.getDeviceItemLoss() ==0D)
										&&!DataDictionary.ISDEVICEITEM_1.equals(acCarMaterialFee.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								}
							}
						}
					}
					if (tmpAcloss != null) {
						if (DataDictionary.ISDEVICEITEM_1.equals(acCarMaterialFee.getIsDeviceItem())){
							tmpAcloss.setDeviceItemLoss(aclossItem.getDeviceItemLoss() + tmpAcloss.getDeviceItemLoss());//新增设备
						}
						tmpAcloss.setAccessoriesFee(aclossItem.getAccessoriesFee() + tmpAcloss.getAccessoriesFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					}else{
						tmpaclossList.add(aclossItem);
					}
				}else{
					AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
					if (tmpAcloss != null) {
						tmpAcloss.setAccessoriesFee(aclossItem.getAccessoriesFee() + tmpAcloss.getAccessoriesFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					} else {
						tmpaclossList.add(aclossItem);
					}
				}
			}
			
			// 车辆外修项目清单
			List<AcCarOuterRepair> acCarOuterRepairList = acCarDefLoss.getAcCarOuterRepairs();
			for (int k = 0; k < acCarOuterRepairList.size(); k++) {
				AcCarOuterRepair acCarOuterRepair = acCarOuterRepairList.get(k);
				if (acCarOuterRepair.getValidFlag() != null && acCarOuterRepair.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				// 判断是否BZ险，是即改成B险
				String kindCode = detectionKindCode(acCarOuterRepair.getKindCode(), kindCodeMap,null, null);
				if (isPaidSelfLoss) {
					if (DataDictionary.KINDCODE_BZ.equals(acCarOuterRepair.getKindCode())||DataDictionary.KINDCODE_20BZ.equals(acCarOuterRepair.getKindCode())) {
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
							kindCode = DataDictionary.KINDCODE_20A;
						}else if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
							kindCode = DataDictionary.KINDCODE_A1;							
						}else{
							kindCode = DataDictionary.KINDCODE_A;
						}
					}
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acCarOuterRepair.setVerifyLossAmount(acCarOuterRepair.getDefLossAmount());
				}
				aclossItem.setReportNo(reportNo);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
				aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
				aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
				aclossItem.setDefLossTaskId(acCarDefLoss.getId());
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
				aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
				aclossItem.setOuterRepairFee(acCarOuterRepair.getVerifyLossAmount() != null ? acCarOuterRepair.getVerifyLossAmount() : 0.0);// 换件核损金额
				aclossItem.setSumLossAmount(aclossItem.getOuterRepairFee());// 总定损金额，初始化时设金额等于换件费
				aclossItem.setInsuredName(acCarInfo.getDriverName());
				aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
				aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
				aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
				if (DataDictionary.KINDCODE_A1.equals(acCarOuterRepair.getKindCode())&&DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())){
					if (DataDictionary.ISDEVICEITEM_1.equals(acCarOuterRepair.getIsDeviceItem())) {
						aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_DEVICEITEM);
						aclossItem.setDeviceItemLoss(acCarOuterRepair.getVerifyLossAmount() != null ? acCarOuterRepair.getVerifyLossAmount() : 0.0);
					}
					AcpayItemVo tmpAcloss = null;
					for (int i = 0; i < tmpaclossList.size(); i++) {
						AcpayItemVo tmpaclossItem = tmpaclossList.get(i);
						//损失项目统计去掉施救费记录
						if(tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() == 0D){
							if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())){
								//原列表存在新增设备，并且当前换件记录也是新增设备则用原来的记录累加核定损失
								if((tmpaclossItem.getDeviceItemLoss() != null && tmpaclossItem.getDeviceItemLoss() > 0.001)
										&&DataDictionary.ISDEVICEITEM_1.equals(acCarOuterRepair.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								//原列表没有新增设备，并且当前换件记录不是新增设备则用原来的记录累加核定损失
								}else if((tmpaclossItem.getDeviceItemLoss()==null||tmpaclossItem.getDeviceItemLoss() ==0D)
										&&!DataDictionary.ISDEVICEITEM_1.equals(acCarOuterRepair.getIsDeviceItem())) {
									tmpAcloss = tmpaclossItem;
									break;
								}
							}
						}
					}
					if (tmpAcloss != null) {
						if (DataDictionary.ISDEVICEITEM_1.equals(acCarOuterRepair.getIsDeviceItem())){
							tmpAcloss.setDeviceItemLoss(aclossItem.getDeviceItemLoss() + tmpAcloss.getDeviceItemLoss());//新增设备
						}
						tmpAcloss.setOuterRepairFee(aclossItem.getOuterRepairFee() + tmpAcloss.getOuterRepairFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					}else{
						tmpaclossList.add(aclossItem);
					}
				}else{
					AcpayItemVo tmpAcloss = findSampleAclossItem(tmpaclossList, aclossItem, acCarDefLoss);
					if (tmpAcloss != null) {
						tmpAcloss.setOuterRepairFee(aclossItem.getOuterRepairFee() + tmpAcloss.getOuterRepairFee());// 险别相同费用相加
						tmpAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + tmpAcloss.getSumLossAmount());
					} else {
						tmpaclossList.add(aclossItem);
					}
				}
			}
			
			
			aclossList.addAll(tmpaclossList);
		}
		// 增加a险附加险  机动车损失保险无法找到第三方特约险（附加险）险别是否在投保
		Boolean atempFlag = this.findBiKindCodeInMap(kindCodeMap, DataDictionary.KINDCODE_I);
		if (atempFlag) {
			List<AcpayItemVo> tempAlist = new ArrayList<AcpayItemVo>();
			for(AcpayItemVo vo:aclossList){
				if(DataDictionary.KINDCODE_A.equals(vo.getKindCode())){
					AcpayItemVo tempVo= new AcpayItemVo();
					DataUtils.copySimpleObjectToTargetFromSource(tempVo, vo);
					tempVo.setKindCode(DataDictionary.KINDCODE_I);
					tempAlist.add(tempVo);
				}
			}
			if(tempAlist.size()>0){
				aclossList.addAll(tempAlist);
			}
		}
		//end增加a险附加险
		
		// ******************************计算物损商业险***********************************************
		for (AcPropDefLoss acproploss : proplossList) {
			// 判断任务是否未定损或者核损通过、存在任务在定损、或核损时，取最新轨迹数据。
			if (checkTask(acproploss.getId()) && !DataDictionary.CASEFLOWCODE_G.equals(flag) && !DataDictionary.CASEFLOWCODE_P.equals(flag)) {
				AcPropDefLoss proploss = this.copyAcPropDefLossVlhis(acproploss.getId());
				if(proploss.getId() != null && !"".equals(proploss.getId())){
					acproploss = proploss;
				}
			}
			// 互碰自赔只汇总标的车上物
			if (isPaidSelfLossList.size() > 0) {
				// 三者车上物
				if (DataDictionary.LOSSATTRCODE_THIRD_CARPROP.equals(acproploss.getLossAttrCode())) {
					continue;
				}
				// 车外物
				if (DataDictionary.LOSSATTRCODE_PROP.equals(acproploss.getLossAttrCode())) {
					continue;
				}
			}

			List<AcpayItemVo> tmpaclossList = new ArrayList<AcpayItemVo>();
			// 物损其它费用
			List<AcPropExtCharge> acproplossextchargeList = acproploss.getAcPropExtCharges();
			for (AcPropExtCharge extcharge : acproplossextchargeList) {
				AcpayItemVo aclossItem = new AcpayItemVo();
				if (extcharge.getValidFlag() != null && extcharge.getValidFlag().equals("0")) {
					continue;
				}
				this.initAclossItem(aclossItem);
				// 判断是否BZ险，是即改成B险
				String kindCode = detectionKindCode(extcharge.getKindCode(), kindCodeMap,null, null);
				if (isPaidSelfLoss) {
					if (DataDictionary.KINDCODE_BZ.equals(extcharge.getKindCode())||DataDictionary.KINDCODE_20BZ.equals(extcharge.getKindCode())) {
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
							kindCode = DataDictionary.KINDCODE_20A;
						}else if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
							kindCode = DataDictionary.KINDCODE_A1;	
						}else{
							kindCode = DataDictionary.KINDCODE_A;
						}
					}
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					extcharge.setVerifyLossAmount(extcharge.getDefLossAmount());
				}
				aclossItem.setReportNo(reportNo);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setLossType(DataDictionary.LOSSTYPE_PROPERTY);// 表示财产
				aclossItem.setOtherFee(extcharge.getVerifyLossAmount() != null ? extcharge.getVerifyLossAmount() : 0.0);// 物损其它费用
				aclossItem.setLossItemName(acproploss.getLossPropName());// 物品名称
				aclossItem.setDefLossTaskId(acproploss.getId());
				aclossItem.setSumLossAmount(aclossItem.getOtherFee());// 初始化总金额等于物损其它费用
				aclossItem.setLiabilityRate(acproploss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acproploss.getShareRate());// 赔偿分摊比例
				aclossItem.setLossAttrCode(acproploss.getLossAttrCode());
				aclossItem.setLossAttrName(acproploss.getLossAttrName());
				aclossItem.setReportCarInfoId(acproploss.getReportCarInfoId());
				AcpayItemVo temAcloss = findSampleacproploss(tmpaclossList, aclossItem, acproploss);
				if (temAcloss != null) {
					temAcloss.setHourFee(aclossItem.getOtherFee() + temAcloss.getOtherFee());// 险别相同费用相加
					temAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + temAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
			}
			// 更换项目费用
			List<AcPropItemChange> acpropitemchangelist = acproploss.getAcPropItemChanges();
			for (AcPropItemChange itemchangelist : acpropitemchangelist) {
				if (itemchangelist.getValidFlag() != null && itemchangelist.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				// 判断是否BZ险，是即改成B险
				String kindCode = detectionKindCode(itemchangelist.getKindCode(),kindCodeMap, null, null);
				if (isPaidSelfLoss) {
					if (DataDictionary.KINDCODE_BZ.equals(itemchangelist.getKindCode())||DataDictionary.KINDCODE_20BZ.equals(itemchangelist.getKindCode())) {
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
							kindCode = DataDictionary.KINDCODE_20A;
						}else if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
							kindCode = DataDictionary.KINDCODE_A1;	
						}else{
							kindCode = DataDictionary.KINDCODE_A;
						}
					}
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					itemchangelist.setVerifyLossAmount(itemchangelist.getDefLossAmount());
				}
				aclossItem.setReportNo(reportNo);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setDefLossTaskId(acproploss.getId());
				aclossItem.setLossType(DataDictionary.LOSSTYPE_PROPERTY);// 表示财产
				aclossItem.setMaterialFee(itemchangelist.getVerifyLossAmount() != null ? itemchangelist.getVerifyLossAmount() : 0.0);// 物损项目费用
				aclossItem.setLossItemName(acproploss.getLossPropName());// 物品名称
				aclossItem.setSumLossAmount(aclossItem.getMaterialFee());// 初始化总金额等于物损费用
				aclossItem.setLiabilityRate(acproploss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acproploss.getShareRate());// 赔偿分摊比例
				aclossItem.setLossAttrCode(acproploss.getLossAttrCode());
				aclossItem.setLossAttrName(acproploss.getLossAttrName());
				aclossItem.setReportCarInfoId(acproploss.getReportCarInfoId());
				AcpayItemVo temAcloss = findSampleacproploss(tmpaclossList, aclossItem, acproploss);
				if (temAcloss != null) {
					temAcloss.setMaterialFee(aclossItem.getMaterialFee() + temAcloss.getMaterialFee());// 险别相同费用相加
					temAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + temAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
			}

			// 物损维修费用
			List<AcPropRepairFee> reparfeelist = acproploss.getAcPropRepairFees();
			for (AcPropRepairFee acpropreparfee : reparfeelist) {
				if (acpropreparfee.getValidFlag() != null && acpropreparfee.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo aclossItem = new AcpayItemVo();
				initAclossItem(aclossItem);
				// 判断是否BZ险，是即改成B险
				String kindCode = detectionKindCode(acpropreparfee.getKindCode(), kindCodeMap,null, null);
				if (isPaidSelfLoss) {
					if (DataDictionary.KINDCODE_BZ.equals(acpropreparfee.getKindCode())||DataDictionary.KINDCODE_20BZ.equals(acpropreparfee.getKindCode())) {
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
							kindCode = DataDictionary.KINDCODE_20A;
						}else if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
							kindCode = DataDictionary.KINDCODE_A1;
						}else{
							kindCode = DataDictionary.KINDCODE_A;
						}
					}
				}
				aclossItem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					acpropreparfee.setVerifyLossAmount(acpropreparfee.getDefLossAmount());
				}
				aclossItem.setReportNo(reportNo);
				aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
				aclossItem.setLossType(DataDictionary.LOSSTYPE_PROPERTY);// 表示财产
				aclossItem.setDefLossTaskId(acproploss.getId());
				aclossItem.setRiskCode(biClaim.getRiskCode());
				aclossItem.setHourFee(acpropreparfee.getVerifyLossAmount() != null ? acpropreparfee.getVerifyLossAmount() : 0.0);// 物损项目费用
				aclossItem.setLossItemName(acproploss.getLossPropName());// 物品名称
				aclossItem.setSumLossAmount(aclossItem.getHourFee());// 初始化总金额等于物损费用
				aclossItem.setLiabilityRate(acproploss.getLiabilityRate());// 赔偿责任比例
				aclossItem.setShareRate(acproploss.getShareRate());// 赔偿分摊比例
				aclossItem.setLossAttrCode(acproploss.getLossAttrCode());
				aclossItem.setLossAttrName(acproploss.getLossAttrName());
				aclossItem.setReportCarInfoId(acproploss.getReportCarInfoId());
				AcpayItemVo temAcloss = findSampleacproploss(tmpaclossList, aclossItem, acproploss);
				if (temAcloss != null) {
					temAcloss.setHourFee(aclossItem.getHourFee() + temAcloss.getHourFee());// 险别相同费用相加
					temAcloss.setSumLossAmount(aclossItem.getSumLossAmount() + temAcloss.getSumLossAmount());
				} else {
					tmpaclossList.add(aclossItem);
				}
			}
			aclossList.addAll(tmpaclossList);
		}

		for (int i = 0; i < aclossList.size(); i++) {
			AcpayItemVo aclossItem = aclossList.get(i);
			if (aclossItem.getReportCarInfoId() != null) {
				AcCarInfo carInfo = this.findAccarInfo(carInfoList, aclossItem.getReportCarInfoId());// 当前任务车
				AcCarInfo itemCarInfo = this.findItemCarInfo(carInfoList);// 标的车
				// 标的车为主车时，删除与当前任务车ID相同的数据
				if (DataDictionary.MAINTRAILERCODE_MAIN.equals(itemCarInfo.getMainTrailerCode())) {// 判断是否为主车
					if (itemCarInfo.getTrailerLicenseCode() != null) {
						if (itemCarInfo.getTrailerLicenseCode().equals(aclossItem.getReportCarInfoId())) {
							aclossList.remove(aclossItem);
							i--;
							continue;

						}
					}
				}
				// 任务车辆是主车时，删除与标的车ID相同的数据
				if (carInfo!=null && DataDictionary.MAINTRAILERCODE_MAIN.equals(carInfo.getMainTrailerCode())) {
					if (carInfo.getTrailerLicenseCode() != null) {
						if (carInfo.getTrailerLicenseCode().equals(itemCarInfo.getAcReportCarInfoId())) {
							aclossList.remove(aclossItem);
							i--;
							continue;
						}
					}
				}
			}
		}

		if (isPaidSelfLoss) {
			 dentDutyCode = DataDictionary.FLAG_1;
		}


		Map<String, Double> map = this.findDutyDeductibleRate(reportNo);
		// 根据报案号和事故责任比例获取责任免赔率列表
		List<AgDutyDeductible> dutyDeductibleRateList = commonService.getDutyDeductibleRate(reportNo, dentDutyCode);
		String A_kindcode=DataDictionary.KINDCODE_A;
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
			A_kindcode = DataDictionary.KINDCODE_A1;
		}
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
			A_kindcode = DataDictionary.KINDCODE_20A;
		}
		for (AcpayItemVo aclossItem : aclossList) {
			// 绝对免赔额
			if (A_kindcode.equals(aclossItem.getKindCode())&& (aclossItem.getRescueFee() != null ? aclossItem.getRescueFee() : 0.0) <= 0.005) {
				List<AclcItemKind>  aclcItemKindList = policyService.findItemKindByReportNoAndKindcode(reportNo, biClaim.getRiskCode(),A_kindcode);
				if(!aclcItemKindList.isEmpty()&&aclcItemKindList.size()>0){
					if(aclcItemKindList.get(0).getDeductible()!=null &&aclcItemKindList.get(0).getDeductible()>0){//0518
						aclossItem.setAbsDeductibleAmount(aclcItemKindList.get(0).getDeductible());
					}else{
						Boolean deductibleFlag = findKindCodeInMap(kindCodeMap, DataDictionary.KINDCODE_Q);//0508
						if (deductibleFlag) {// Q险绝对免赔额
							List<AclcItemKind>  aclcItemKinds = policyService.findItemKindByReportNoAndKindcode(reportNo, biClaim.getRiskCode(),DataDictionary.KINDCODE_Q);
							if(!aclcItemKinds.isEmpty()&&aclcItemKinds.size()>0){
								aclossItem.setAbsDeductibleAmount(aclcItemKinds.get(0).getValue());
							}
						}
					}
				}
			}
			if(!aclossItem.getKindCode().startsWith(DataDictionary.KINDCODE_20)){
				// 责任免赔率
				if (dutyDeductibleRateList != null) {
					for (AgDutyDeductible agDutyDeductible : dutyDeductibleRateList) {
						if (agDutyDeductible.getId().getKindCode().trim().equals(aclossItem.getKindCode())) {
							aclossItem.setDutyDeductibleRate(agDutyDeductible.getDeductibleRate());
						}
					}
				}
				// 特殊险别责任免赔率
				Double dutyDeductibleRate = this.findDutyDeductibleRateByKindCode(aclossItem,map);
				if (dutyDeductibleRate != null) {
					aclossItem.setDutyDeductibleRate(dutyDeductibleRate);
				}
			}
		}
		// Double金额四舍五入
		this.initLosslist(aclossList);

		return aclossList;
	}

	/**
	 * @Title: findItemCarInfo
	 * @Description: TODO(查询标的车)
	 * @author 莫浩锋
	 * @param accarinfoList
	 * @return
	 * @return AcCarInfo
	 * @throws
	 * @date Mar 5, 2013 4:50:58 PM
	 */
	private AcCarInfo findItemCarInfo(List<AcCarInfo> accarinfoList) {
		for (AcCarInfo carInfo : accarinfoList) {
			if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(carInfo.getLossAttrCode())) {
				return carInfo;
			}
		}
		return null;
	}

	public List<AcpayItemVo> doInitBIPersonDataSurvey(List<AcReportPersonInfo> personLossList,List<AcReportCarInfo> accarInfoList,
			Map<String, String> kindCodeMap, String dentDutyCode,
			AcClaim biClaim, String reportNo, Object object, AcSurvey survey){
		List<AcpayItemVo> acpersonlossList = new ArrayList<AcpayItemVo>();
		String accidentDutyCode = survey.getAccidentDutyCode();
		// ********************************计算人员伤害商业险*******************************************
		for (AcReportPersonInfo acReportPersonInfo : personLossList) {
			List<AcpayItemVo> trmpPersonlossList = new ArrayList<AcpayItemVo>();
			AcpayItemVo acpersonlossitem = new AcpayItemVo();
			initAclossItem(acpersonlossitem);
			String kindCode = getDefaultSurveyRiskCode(null, null, acReportPersonInfo, kindCodeMap, survey, DataDictionary.RISK_SURVEY_FLAG_BUS);
			if(kindCode==null||"".equals(kindCode)){
				continue;
			}
			BigDecimal acReportCarInfoId = acReportPersonInfo.getAcReportCarInfoId();
			if(acReportCarInfoId!=null){
				AcReportCarInfo acReportCarInfo = reportService.findAcReportCarInfoById(acReportCarInfoId);
				String isciDuty ="";
				if("1".equals(acReportCarInfo.getIsDuty())){//有责
					isciDuty ="1";
				}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
					isciDuty ="0";
				}else{
					isciDuty = "5".equals(accidentDutyCode)?"0":"1";
				}
				acpersonlossitem.setReportCarInfoId(acReportCarInfoId);
				String liabilityRate =DataDictionary.DutyMap.get(accidentDutyCode);
				acpersonlossitem.setLiabilityRate(Double.valueOf(liabilityRate));
				acpersonlossitem.setLicenseNo(acReportCarInfo.getLicenseNo());
			}
			acpersonlossitem.setOrder("2");
			acpersonlossitem.setReportNo(reportNo);
			acpersonlossitem.setAbsDeductibleAmount(0.0);
			acpersonlossitem.setType(DataDictionary.ACPAYITEMVO_TYPE_PERSON);
			acpersonlossitem.setLossItemName(acReportPersonInfo.getPersonName());
			acpersonlossitem.setReportCarInfoId(acReportPersonInfo.getId());
			acpersonlossitem.setDefLossTaskId(acReportPersonInfo.getId());
			acpersonlossitem.setRiskCode(biClaim.getRiskCode());
			acpersonlossitem.setPersonName(acReportPersonInfo.getPersonName());// 名字
			acpersonlossitem.setIdentifyNumber(acReportPersonInfo.getIdentifyNumber());// 身份证号
			acpersonlossitem.setLossAttrCode(acReportPersonInfo.getLossAttRCode());
			acpersonlossitem.setLossAttrName(acReportPersonInfo.getLossAttRName());
			acpersonlossitem.setKindCode(kindCode);
			String feeTypeName = "";
			boolean injuryflag = false;
			AcpayItemVo tmpAcpersonloss =null;
			if ((acReportPersonInfo.getInjuryfee()!=null&&acReportPersonInfo.getInjuryfee()>0)) {//死亡伤残费大于0
				feeTypeName = "死亡伤残费用";
				acpersonlossitem.setFeeTypeCode("200");
				acpersonlossitem.setFeeTypeName(feeTypeName);
				acpersonlossitem.setSubFeeTypeCode("200");// 死亡2
				acpersonlossitem.setSubFeeTypeName(feeTypeName);
				acpersonlossitem.setSumLossAmount(acReportPersonInfo.getInjuryfee());// 费用
				injuryflag = true;
				tmpAcpersonloss = findSampleAcpersonLossSurvey(trmpPersonlossList, acpersonlossitem);
				if (tmpAcpersonloss != null) {
					if (acpersonlossitem.getSumLossAmount() == null) {
						acpersonlossitem.setSumLossAmount(new Double(0.0));
					}
					if (tmpAcpersonloss.getSumLossAmount() == null) {
						tmpAcpersonloss.setSumLossAmount(new Double(0.0));
					}
					tmpAcpersonloss.setSumLossAmount(acpersonlossitem.getSumLossAmount() + tmpAcpersonloss.getSumLossAmount());
				} else {
					trmpPersonlossList.add(acpersonlossitem);
				}
			}
			if(acReportPersonInfo.getMedicalfee()!=null&&acReportPersonInfo.getMedicalfee()>0){//医疗费大于0
				AcpayItemVo medicalLoss = new AcpayItemVo();
				if(injuryflag){//如果有伤残死亡，需单独加一条费用
					CommonMethod.copyObjectToObject(acpersonlossitem, medicalLoss);
					feeTypeName = "医疗费用";
					medicalLoss.setFeeTypeCode("100");
					medicalLoss.setFeeTypeName(feeTypeName);
					medicalLoss.setSubFeeTypeCode("100");// 医疗1
					medicalLoss.setSubFeeTypeName(feeTypeName);
					medicalLoss.setSumLossAmount(acReportPersonInfo.getMedicalfee());// 费用
					tmpAcpersonloss = findSampleAcpersonLossSurvey(trmpPersonlossList, medicalLoss);
				}else{
					feeTypeName = "医疗费用";
					acpersonlossitem.setFeeTypeCode("100");
					acpersonlossitem.setFeeTypeName(feeTypeName);
					acpersonlossitem.setSubFeeTypeCode("1");// 医疗1
					acpersonlossitem.setSubFeeTypeName(feeTypeName);
					acpersonlossitem.setSumLossAmount(acReportPersonInfo.getMedicalfee());// 费用
					tmpAcpersonloss = findSampleAcpersonLossSurvey(trmpPersonlossList, acpersonlossitem);
				}
				if (tmpAcpersonloss != null) {
					if (acpersonlossitem.getSumLossAmount() == null) {
						acpersonlossitem.setSumLossAmount(new Double(0.0));
					}
					if (tmpAcpersonloss.getSumLossAmount() == null) {
						tmpAcpersonloss.setSumLossAmount(new Double(0.0));
					}
					tmpAcpersonloss.setSumLossAmount(acpersonlossitem.getSumLossAmount() + tmpAcpersonloss.getSumLossAmount());
				} else {
					if(injuryflag){
						trmpPersonlossList.add(medicalLoss);
					}else{
						trmpPersonlossList.add(acpersonlossitem);
					}
				}
			}
			acpersonlossList.addAll(trmpPersonlossList);
		}
		// 根据报案号和事故责任比例获取责任免赔率列表
		List<AgDutyDeductible> dutyDeductibleRateList = commonService.getDutyDeductibleRate(reportNo, dentDutyCode);
		Map<String, Double> map = this.findDutyDeductibleRate(reportNo);
		for (AcpayItemVo personLossItem : acpersonlossList) {
			// 责任免赔率
			if (dutyDeductibleRateList != null) {
				for (AgDutyDeductible agDutyDeductible : dutyDeductibleRateList) {
					if (agDutyDeductible.getId().getKindCode().trim().equals(personLossItem.getKindCode())) {
						personLossItem.setDutyDeductibleRate(agDutyDeductible.getDeductibleRate());
					}
				}
			}
			// 特殊险别责任免赔率
			Double dutyDeductibleRate = this.findDutyDeductibleRateByKindCode(personLossItem,map);
			if (dutyDeductibleRate != null) {
				personLossItem.setDutyDeductibleRate(dutyDeductibleRate);
			}
		}
		// Double金额四舍五入
		this.initLosslist(acpersonlossList);
		return acpersonlossList;
		
	}
	/**
	 * @Title: doInitBIPersonData
	 * @Description: TODO(汇总商业险人伤数据)
	 * @author 莫浩锋
	 * @param personLossList
	 * @param carInfoList
	 * @param kindCodeMap
	 * @param survey
	 * @param claim
	 * @param reportNo
	 * @param flag
	 * @return
	 * @return List<AcpayItemVo>
	 * @throws
	 * @date Dec 13, 2013 11:04:31 AM
	 */
	public List<AcpayItemVo> doInitBIPersonData(List<AcPersonTrackMain> personLossList, List<AcCarInfo> carInfoList,
			Map<String, String> kindCodeMap, String dentDutyCode, AcClaim biClaim, String reportNo, String flag) {
		boolean  newRiskCode2020Flag =commonService.isNewRiskCode2020(reportNo);
		List<AcpayItemVo> acpersonlossList = new ArrayList<AcpayItemVo>();
		// ********************************计算人员伤害商业险*******************************************
		for (AcPersonTrackMain acpersontrackmain : personLossList) {
			// 判断任务是否未定损或者核损通过、存在任务在定损、或核损时，取最新轨迹数据。
			if (checkTask(acpersontrackmain.getId()) && !DataDictionary.CASEFLOWCODE_G.equals(flag)	&& !DataDictionary.CASEFLOWCODE_P.equals(flag)) {
				if(acpersontrackmain.getId() != null && !"".equals(acpersontrackmain.getId())){
					acpersontrackmain = this.copyPersonTrackMainVLHis(acpersontrackmain.getId());
				}
			}
			List<AcpayItemVo> trmpPersonlossList = new ArrayList<AcpayItemVo>();
			List<AcPersonInjuryCharge> acpersoninjurychargeList = acpersontrackmain.getAcPersonInjuryCharges();
			for (AcPersonInjuryCharge personInjuryCharge : acpersoninjurychargeList) {
				if (personInjuryCharge.getValidFlag() != null && personInjuryCharge.getValidFlag().equals("0")) {
					continue;
				}
				AcpayItemVo acpersonlossitem = new AcpayItemVo();
				initAclossItem(acpersonlossitem);
				// 判断是否BZ险，是即改成B险
				String kindCode = this.detectionKindCode(personInjuryCharge.getKindCode(), kindCodeMap,personInjuryCharge.getSubFeeTypeCode(),acpersontrackmain.getLossAttrCode());
				acpersonlossitem.setKindCode(kindCode);
				// 险别是否在投保
				Boolean kindCodeFlag = this.findBiKindCodeInMap(kindCodeMap, kindCode);
				if (!kindCodeFlag) {
					continue;
				}
				// 定损金额赋给核损金额自动理算用
				if (DataDictionary.CASEFLOWCODE_G.equals(flag)) {
					personInjuryCharge.setVerifyLossAmount(personInjuryCharge.getDefLossAmount());
				}
				acpersonlossitem.setReportNo(reportNo);
				acpersonlossitem.setAbsDeductibleAmount(0.0);
				acpersonlossitem.setType(DataDictionary.ACPAYITEMVO_TYPE_PERSON);
				acpersonlossitem.setLossItemName(acpersontrackmain.getPersonName());
				acpersonlossitem.setReportCarInfoId(acpersontrackmain.getReportCarInfoId());
				acpersonlossitem.setDefLossTaskId(acpersontrackmain.getId());
				acpersonlossitem.setRiskCode(biClaim.getRiskCode());
				acpersonlossitem.setPersonName(acpersontrackmain.getPersonName());// 名字
				acpersonlossitem.setIdentifyNumber(acpersontrackmain.getIdentifyNumber());// 身份证号
				acpersonlossitem.setSex(acpersontrackmain.getPersonSex());// 性别
				acpersonlossitem.setAge(acpersontrackmain.getPersonAge());// 年龄
				acpersonlossitem.setShareRate(acpersontrackmain.getShareRate());
				acpersonlossitem.setLiabilityRate(acpersontrackmain.getLiabilityRate());
				acpersonlossitem.setLiabilityRate(acpersontrackmain.getLiabilityRate());// 赔偿责任比例
				acpersonlossitem.setShareRate(acpersontrackmain.getShareRate());// 赔偿分摊比例
				acpersonlossitem.setLossAttrCode(acpersontrackmain.getLossAttrCode());
				acpersonlossitem.setLossAttrName(acpersontrackmain.getLossAttrName());

				// FeeTypeCode和人伤定损保持一致，分为医疗1、死亡2；
				// SubFeeTypeCode进行汇总为医疗100、死亡200、精神 212；
				acpersonlossitem.setFeeTypeCode(personInjuryCharge.getFeeTypeCode());// 费用类型代码

				acpersonlossitem.setFeeTypeName(personInjuryCharge.getFeeTypeName());// 费用类型名称
				if (personInjuryCharge.getFeeTypeCode() != null
						&& DataDictionary.ACPERSONLOSS_DEATH.equals(personInjuryCharge.getFeeTypeCode().trim())
						&& personInjuryCharge.getSubFeeTypeCode() != null
						&& DataDictionary.ACPERSONLOSS_MENTAL.equals(personInjuryCharge.getSubFeeTypeCode().trim())) {
					acpersonlossitem.setSubFeeTypeCode(personInjuryCharge.getSubFeeTypeCode());// 精神212
					acpersonlossitem.setSubFeeTypeName(personInjuryCharge.getSubFeeTypeName());
				} else {
					acpersonlossitem.setSubFeeTypeCode(personInjuryCharge.getFeeTypeCode());// 医疗1、死亡2
					acpersonlossitem.setSubFeeTypeName(personInjuryCharge.getFeeTypeName());
				}
				acpersonlossitem.setSumLossAmount(personInjuryCharge.getVerifyLossAmount());// 费用

				AcpayItemVo tmpAcpersonloss = findSampleAcpersonLoss(trmpPersonlossList, acpersonlossitem, personInjuryCharge);
				if (tmpAcpersonloss != null) {
					if (acpersonlossitem.getSumLossAmount() == null) {
						acpersonlossitem.setSumLossAmount(new Double(0.0));
					}
					if (tmpAcpersonloss.getSumLossAmount() == null) {
						tmpAcpersonloss.setSumLossAmount(0.0);
					}

					tmpAcpersonloss.setSumLossAmount(acpersonlossitem.getSumLossAmount() + tmpAcpersonloss.getSumLossAmount());// 费用
				} else {

					trmpPersonlossList.add(acpersonlossitem);
				}
			}
			acpersonlossList.addAll(trmpPersonlossList);
		}

		for (int i = 0; i < acpersonlossList.size(); i++) {
			AcpayItemVo aclossItem = acpersonlossList.get(i);
			if (aclossItem.getReportCarInfoId() != null) {
				AcCarInfo carInfo = this.findAccarInfo(carInfoList, aclossItem.getReportCarInfoId());// 当前任务车
				if (carInfo == null) {
					throw new BusinessException("损失任务找不到有效车辆!", null);
				}
				AcCarInfo itemCarInfo = this.findItemCarInfo(carInfoList);// 标的车
				// 标的车为主车时，删除与当前任务车ID相同的数据
				if (DataDictionary.MAINTRAILERCODE_MAIN.equals(itemCarInfo.getMainTrailerCode())) {// 判断是否为主车
					if (itemCarInfo.getTrailerLicenseCode() != null) {
						if (itemCarInfo.getTrailerLicenseCode().equals(aclossItem.getReportCarInfoId())) {
							acpersonlossList.remove(aclossItem);
							i--;
							continue;
						}
					}
				}
				// 任务车辆是主车时，删除与标的车ID相同的数据
				if (DataDictionary.MAINTRAILERCODE_MAIN.equals(carInfo.getMainTrailerCode())) {
					if (carInfo.getTrailerLicenseCode() != null) {
						if (carInfo.getTrailerLicenseCode().equals(itemCarInfo.getAcReportCarInfoId())) {
							acpersonlossList.remove(aclossItem);
							i--;
							continue;
						}
					}
				}
			}
		}
		if(!newRiskCode2020Flag){
			// 根据报案号和事故责任比例获取责任免赔率列表
			List<AgDutyDeductible> dutyDeductibleRateList = commonService.getDutyDeductibleRate(reportNo, dentDutyCode);
			Map<String, Double> map = this.findDutyDeductibleRate(reportNo);
			for (AcpayItemVo personLossItem : acpersonlossList) {
				// 责任免赔率
				if (dutyDeductibleRateList != null) {
					for (AgDutyDeductible agDutyDeductible : dutyDeductibleRateList) {
						if (agDutyDeductible.getId().getKindCode().trim().equals(personLossItem.getKindCode())) {
							personLossItem.setDutyDeductibleRate(agDutyDeductible.getDeductibleRate());
						}
					}
				}
				// 特殊险别责任免赔率
				Double dutyDeductibleRate = this.findDutyDeductibleRateByKindCode(personLossItem,map);
				if (dutyDeductibleRate != null) {
					personLossItem.setDutyDeductibleRate(dutyDeductibleRate);
				}
			}
		}
		// Double金额四舍五入
		this.initLosslist(acpersonlossList);
		return acpersonlossList;

	}

	/**
	 * @Title: findKindCodeInMap
	 * @Description: TODO(判断险别是否在投保)
	 * @author 莫浩锋
	 * @param kindCodeMap
	 * @return
	 * @return Boolean
	 * @throws
	 * @date Oct 12, 2012 10:38:03 AM
	 */
	public Boolean findKindCodeInMap(Map<String, String> kindCodeMap, String kindCode) {
		if (kindCode.equals(DataDictionary.KINDCODE_BZ9)) {
			return true;
		}
		if (kindCodeMap.containsKey(kindCode)) {
			return true;
		}
		return false;
	}

	/**
	 * @Title: findKindCodeInMap
	 * @Description: TODO(判断险别是否在投保)
	 * @author 莫浩锋
	 * @param kindCodeMap
	 * @return
	 * @return Boolean
	 * @throws
	 * @date Oct 12, 2012 10:38:03 AM
	 */
	public Boolean findBiKindCodeInMap(Map<String, String> kindCodeMap, String kindCode) {

		if (kindCodeMap.containsKey(kindCode)) {
			return true;
		}
		return false;
	}

	/**
	 * @Title: detectionKindCode
	 * @Description: TODO(判断是否B险)
	 * @author 莫浩锋
	 * @param acsavecharge
	 * @return
	 * @return Boolean
	 * @throws
	 * @date Sep 13, 2012 10:22:01 AM
	 */
	private String detectionKindCode(String kindcode,Map<String, String> kindCodeMap,String subFeeTypeCode,String lossAttrCode) {
		if (kindcode != null && (DataDictionary.KINDCODE_BZ.equals(kindcode.trim())||DataDictionary.KINDCODE_20BZ.equals(kindcode.trim()))) {
			if (subFeeTypeCode != null && DataDictionary.ACPERSONLOSS_MENTAL.equals(subFeeTypeCode.trim())) {
				String R1_kindcode ="";//20R1	附加精神损害抚慰金责任险（机动车第三者责任保险）
				String R2_kindcode ="";//20R2	附加精神损害抚慰金责任险（机动车车上人员责任保险（司机））
				String R3_kindcode ="";//20R3	附加精神损害抚慰金责任险（机动车车上人员责任保险（乘客））
				if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20R1)){
					R1_kindcode=DataDictionary.KINDCODE_20R1;
				}
				if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20R2)){
					R2_kindcode=DataDictionary.KINDCODE_20R2;
				}
				if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20R3)){
					R3_kindcode=DataDictionary.KINDCODE_20R3;
				}
				if((DataDictionary.LOSSATTRCODE_THIRD_CARPERSON.equals(lossAttrCode)
						||DataDictionary.LOSSATTRCODE_THIRD_PERSON.equals(lossAttrCode))
						&&!"".equals(R1_kindcode)){
					kindcode=R1_kindcode;
				}else if(DataDictionary.LOSSATTRCODE_ITEM_CARPERSON.equals(lossAttrCode)
						&&!"".equals(R2_kindcode)){
					kindcode=R2_kindcode;
				}else if((DataDictionary.LOSSATTRCODE_ITEM_CARFRONTPERSON.equals(lossAttrCode)
						||DataDictionary.LOSSATTRCODE_ITEM_CARREARPERSION.equals(lossAttrCode))
						&&!"".equals(R3_kindcode)){
					kindcode=R3_kindcode;
				}else{
					kindcode=DataDictionary.KINDCODE_R;
				}
			} else {
				if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20B)){
					kindcode = DataDictionary.KINDCODE_20B;
				}else{
					kindcode = DataDictionary.KINDCODE_B;
				}
			}
		}
		return kindcode;
	}

	/**
	 * @Title: findAccarInfo
	 * @Description: TODO(根据车牌号查找车辆信息)
	 * @author 李科
	 * @param accarinfoList
	 * @param licenseno
	 * @return
	 * @return Accarinfo
	 * @throws
	 * @date 2012-9-14 上午10:29:05
	 */
	private AcCarInfo findAccarInfo(List<AcCarInfo> accarinfoList, BigDecimal carinfoid) {
		for (AcCarInfo acCarInfo : accarinfoList) {
			if (acCarInfo.getAcReportCarInfoId().equals(carinfoid)) {
				return acCarInfo;
			}
		}
		return null;
	}

	/**
	 * @Title: isTraCarInfo
	 * @Description: TODO(查询车辆是否投保交强)
	 * @author 莫浩锋
	 * @param reportNo
	 * @return
	 * @return List<Accarinfo>
	 * @throws
	 * @date Sep 29, 2012 3:50:49 PM
	 */
	public List<AcCarInfo> isTraCarInfo(String reportNo) {
		List<AcCarInfo> accarinfoList = carLossService.findAccarinfoByReportNo(reportNo);
		// 预留处理代码
		return accarinfoList;
	}

	/**
	 * @Title: findSampleacproploss
	 * @Description: TODO(计算物损是否险别一样)
	 * @author 莫浩锋
	 * @param aclossList
	 * @param acloss
	 * @param acproploss
	 * @return
	 * @return Acloss
	 * @throws
	 * @date Sep 12, 2012 4:30:03 PM
	 */
	private AcpayItemVo findSampleacproploss(List<AcpayItemVo> aclossItemList, AcpayItemVo aclossitem, AcPropDefLoss acproploss) {
		for (int i = 0; i < aclossItemList.size(); i++) {
			AcpayItemVo tmpaclossitem = aclossItemList.get(i);
			if (tmpaclossitem.getKindCode().equals(aclossitem.getKindCode())) {
				return tmpaclossitem;
			}
		}
		return null;
	}

	/**
	 * @Title: findSampleAcpersonLoss
	 * @Description: TODO(计算人员伤害险别是否重复)
	 * @author 莫浩锋
	 * @param trmpPersonlossList
	 * @param acpersonloss
	 * @param acpersoninList
	 * @return
	 * @return AcpayItemVo
	 * @throws
	 * @date Sep 12, 2012 11:29:30 AM
	 */
	private AcpayItemVo findSampleAcpersonLoss(List<AcpayItemVo> trmpPersonlossList, AcpayItemVo acpersonlossItem,
			AcPersonInjuryCharge personInjuryCharge) {
		// 精神损失
		if (DataDictionary.KINDCODE_R.equals(personInjuryCharge.getKindCode())
				||DataDictionary.KINDCODE_20R1.equals(personInjuryCharge.getKindCode())
				||DataDictionary.KINDCODE_20R2.equals(personInjuryCharge.getKindCode())
				||DataDictionary.KINDCODE_20R3.equals(personInjuryCharge.getKindCode())){
			return null;
		}
		for (AcpayItemVo tempersonLossitem : trmpPersonlossList) {
			// 查找同一费用类型下是否存在有险别一样的
			if (tempersonLossitem.getFeeTypeCode().equals(personInjuryCharge.getFeeTypeCode())
					&& acpersonlossItem.getKindCode().equals(tempersonLossitem.getKindCode())) {
				return tempersonLossitem;
			}
		}
		return null;
	}
	private AcpayItemVo findSampleAcpersonLossSurvey(List<AcpayItemVo> trmpPersonlossList, AcpayItemVo acpersonlossItem) {
		// 精神损失
		for (AcpayItemVo tempersonLossitem : trmpPersonlossList) {
			// 查找同一费用类型下是否存在有险别一样的
			if (acpersonlossItem.getFeeTypeCode().equals(tempersonLossitem.getFeeTypeCode()) &&
					acpersonlossItem.getKindCode().equals(tempersonLossitem.getKindCode())) {
				return tempersonLossitem;
			}
		}
		return null;
	}
	/**
	 * @Title: findDutyDeductibleRateByKindCode
	 * @Description: TODO(特殊险别责任免赔率)
	 * @author 莫浩锋
	 * @param kindCode
	 * @return
	 * @return Double
	 * @throws
	 * @date Dec 20, 2012 10:53:13 AM
	 */
	public Double findDutyDeductibleRateByKindCode(AcpayItemVo aclossItem,Map<String, Double> map) {
		Set<Entry<String, Double>> set = map.entrySet();
		Iterator<Entry<String, Double>> iterator = set.iterator();
		while (iterator.hasNext()) {
			Entry<String, Double> entry = iterator.next();
			if (entry.getKey().equals(aclossItem.getKindCode())) {
				return entry.getValue();
			}
		}
		return null;
	}

	/**
	 * @Title: findDutyDeductibleRate
	 * @Description: TODO(特殊险别责任免赔率)
	 * @author 莫浩锋
	 * @return
	 * @return Map<String,Double>
	 * @throws
	 * @date Dec 20, 2012 10:36:23 AM
	 */
	private Map<String, Double> findDutyDeductibleRate(String reportNo) {
		// 没有报案号则直接返回null
		if (reportNo == null) {
			return null;
		}
		// 获取商业险保单
		AclcMain aclcMain = policyService.findAclcmainBIByReport(reportNo);
		if (aclcMain == null) {
			return null;
		}
		List<AclcItemCar> aclcItemCarList = aclcMain.getItemCars();
		// 获取车辆信息
		AclcItemCar aclcItemCar = new AclcItemCar();
		if (aclcItemCarList != null && aclcItemCarList.size() > 0) {
			aclcItemCar = aclcItemCarList.get(0);
		}
		String clauseType = "";
		if(DataDictionary.RISKCODE_0518.equals(aclcMain.getRiskCode())){//新条款改革
			clauseType  = aclcItemCar.getClauseTypeSystem()+aclcItemCar.getProductType();
		}else{
			clauseType  = aclcItemCar.getClauseType();
		}
		
		String hql = "select * from AgAbsDeductible where riskCode =? and clauseType =?  and DeductCondCode='000' "
				+ "and to_char(validDate,'yyyy-MM-dd HH:mm:ss') < ? and validStatus =1 and deductPerIod =1";
		List list = this.findBySql(hql, aclcMain.getRiskCode(), clauseType, aclcMain.getStartDate().toString());
		Map<String, Double> map = new HashMap<String, Double>();
		if (list != null) {
			for (int i = 0; i < list.size(); i++) {
				Object[] object = (Object[]) list.get(i);
				map.put(object[2].toString().trim(), ((BigDecimal) object[5]).doubleValue());
			}
		}
		
		/*
		map.put("G1", 20.0);
		map.put("X1", 20.0);
		map.put("X3", 15.0);
		map.put("D2", 20.0);
		map.put("V1", 20.0);
		map.put("G0", 20.0);
		map.put("L", 15.0);
		map.put("E", 20.0);
		map.put("Z", 20.0);
		map.put("R", 20.0);
		map.put("R1", 20.0);
		 */
		return map;
	}

	/**
	 * @Title: findAcdeflosscharge
	 * @Description: TODO(赔款费用数据组织：判断险别和费用是否相同)
	 * @author 莫浩锋
	 * @param tmpacchargeList
	 * @param acCharge
	 * @param acDefLossCharge
	 * @return
	 * @return Accharge
	 * @throws
	 * @date Sep 20, 2012 2:54:56 PM
	 */
	private AcCharge findAcdeflosscharge(List<AcCharge> tmpacchargeList, AcCharge acCharge, AcDefLossCharge acDefLossCharge) {
		for (int i = 0; i < tmpacchargeList.size(); i++) {
			AcCharge singleAccharge = tmpacchargeList.get(i);
			// 险别相同且费用类型相同
			if (singleAccharge.getChargeCode().equals(acCharge.getChargeCode())
					&& singleAccharge.getKindCode().equals(acCharge.getKindCode())) {
				return singleAccharge;
			}
		}
		return null;
	}

	/**
	 * @Title: findSampleAclossItem
	 * @Description: TODO(计算是否重复险别)
	 * @author 莫浩锋
	 * @param acLossList
	 * @param acloss
	 * @return
	 * @return Acloss
	 * @throws
	 * @date Sep 11, 2012 8:24:52 PM
	 */
	private AcpayItemVo findSampleAclossItem(List<AcpayItemVo> acLossList, AcpayItemVo aclossItem, AcCarDefLoss acCarDefLoss) {

		for (int i = 0; i < acLossList.size(); i++) {
			AcpayItemVo tmpaclossItem = acLossList.get(i);
			if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())) {
				if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())
						&& (tmpaclossItem.getRescueFee() == null || tmpaclossItem.getRescueFee() < 0.00001)) {
					return tmpaclossItem;
				}
			} else {
				if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())) {
					return tmpaclossItem;
				}
			}

		}
		return null;

	}

	/**
	 * @Title: findSampleAclossItem
	 * @Description: TODO(计算是否重复险别)
	 * @author 莫浩锋
	 * @param acLossList
	 * @param acloss
	 * @return
	 * @return Acloss
	 * @throws
	 * @date Sep 11, 2012 8:24:52 PM
	 */
	private AcpayItemVo findSampleFeeAclossItem(List<AcpayItemVo> acLossList, AcpayItemVo aclossItem, AcCarDefLoss acCarDefLoss) {

		// 如果是精神损失费 return null;
		for (int i = 0; i < acLossList.size(); i++) {
			AcpayItemVo tmpaclossItem = acLossList.get(i);
			if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())) {
				if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())
						&& (tmpaclossItem.getRescueFee() != null && tmpaclossItem.getRescueFee() > 0.001)) {
					return tmpaclossItem;
				}
			} else {
				if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())) {
					return tmpaclossItem;
				}
			}

		}
		return null;
	}
	private AcpayItemVo findSampleFeeAclossItemSur(List<AcpayItemVo> acLossList, AcpayItemVo aclossItem, AcReportCarInfo acCarDefLoss) {

		// 如果是精神损失费 return null;
		for (int i = 0; i < acLossList.size(); i++) {
			AcpayItemVo tmpaclossItem = acLossList.get(i);
			if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())) {
				if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())
						&& (tmpaclossItem.getRescueFee() != null && tmpaclossItem.getRescueFee() < 0.00001)) {
					return tmpaclossItem;
				}
			} else {
				if (tmpaclossItem.getKindCode().equals(aclossItem.getKindCode())) {
					return tmpaclossItem;
				}
			}

		}
		return null;
	}
	/**
	 * @Title: initAcloss
	 * @Description: TODO(初始化ACloss) 需以后补充
	 * @author 李科
	 * @param acloss
	 * @param accompensate
	 * @return void
	 * @throws
	 * @date 2012-9-13 下午3:56:01
	 */
	private void initAclossItem(AcpayItemVo acpayItemVo) {
		// acloss.setCurrency(DataDictionary.CURRENCY_CNY);
		// acloss.setItemcurrency(DataDictionary.CURRENCY_CNY);
		// acloss.setLossamountcurrency(DataDictionary.CURRENCY_CNY);
		// acloss.setDeductcurrency(DataDictionary.CURRENCY_CNY);
		// acloss.setPaycurrency(DataDictionary.CURRENCY_CNY);
		// acpayItemVo.setShareRate(0.0);
		// acpayItemVo.setLiabilityRate(0.0);
		acpayItemVo.setCompensateRate(100.0);
		acpayItemVo.setSumLossAmount(0.0);
		acpayItemVo.setAccessoriesFee(0.0);  //辅料费
		acpayItemVo.setOuterRepairFee(0.0);//外修费用
		acpayItemVo.setManagerFee(0.0);
		acpayItemVo.setHourFee(0.0);
		acpayItemVo.setMaterialFee(0.0);
		acpayItemVo.setOtherFee(0.0);
		acpayItemVo.setRescueFee(0.0);
		acpayItemVo.setDutyDeductibleRate(0.0);
		acpayItemVo.setAbsDeductibleRate(0.0);
		acpayItemVo.setAbsDeductibleAmount(0.0);
		acpayItemVo.setSumRealpay(0.0);
		acpayItemVo.setExceDeductKindPaid(0.0);
		acpayItemVo.setPreSinglePay(0.0);
	}

	/**
	 * @Title: initAcpersonloss
	 * @Description: TODO(初始化人伤损失信息)需后续补充
	 * @author 李科
	 * @param acPersonLoss
	 * @param accompensate
	 * @return void
	 * @throws
	 * @date 2012-9-13 下午4:08:18
	 */
	public void initAcpersonloss(AcPersonLoss acPersonLoss, AcCompensate acCompensate) {
		acPersonLoss.setAcCompensate(acCompensate);
		acPersonLoss.setItemCurrency(DataDictionary.CURRENCY_CNY);
		acPersonLoss.setLossAmountCurrency(DataDictionary.CURRENCY_CNY);
		acPersonLoss.setDeductCurrency(DataDictionary.CURRENCY_CNY);
		acPersonLoss.setPayCurrency(DataDictionary.CURRENCY_CNY);
	}

	/**
	 * @Title: checkKindCode
	 * @Description: TODO(将三者险的损失转换为交强险)
	 * @author 莫浩锋
	 * @param kindcode
	 * @param thridflag
	 *            只有人伤需要传,区分本车或三者车人伤；1为三者，0为本车；车辆和财产直接传null即可
	 * @return
	 * @return String
	 * @throws
	 * @date Sep 13, 2012 11:12:44 AM
	 */

	private String changeKindCodeToBZ(String kindcode, String subFeeTypeCode, AcpayItemVo acpayItemVo,String BZ_kindcode,
			String lossAttrCode,Map<String, String> kindCodeMap) {
		acpayItemVo.setOrder("2");
		if (kindcode != null && (DataDictionary.KINDCODE_BZ.equals(kindcode.trim())||DataDictionary.KINDCODE_20BZ.equals(kindcode.trim()))) {
			if (subFeeTypeCode != null && DataDictionary.ACPERSONLOSS_MENTAL.equals(subFeeTypeCode.trim())) {
				String R1_kindcode ="";//20R1	附加精神损害抚慰金责任险（机动车第三者责任保险）
				String R2_kindcode ="";//20R2	附加精神损害抚慰金责任险（机动车车上人员责任保险（司机））
				String R3_kindcode ="";//20R3	附加精神损害抚慰金责任险（机动车车上人员责任保险（乘客））
				if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20R1)){
					R1_kindcode=DataDictionary.KINDCODE_20R1;
				}
				if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20R2)){
					R2_kindcode=DataDictionary.KINDCODE_20R2;
				}
				if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20R3)){
					R3_kindcode=DataDictionary.KINDCODE_20R3;
				}
				if((DataDictionary.LOSSATTRCODE_THIRD_CARPERSON.equals(lossAttrCode)
						||DataDictionary.LOSSATTRCODE_THIRD_PERSON.equals(lossAttrCode))
						&&!"".equals(R1_kindcode)){
					kindcode=R1_kindcode;
				}else if(DataDictionary.LOSSATTRCODE_ITEM_CARPERSON.equals(lossAttrCode)
						&&!"".equals(R2_kindcode)){
					kindcode=R2_kindcode;
				}else if((DataDictionary.LOSSATTRCODE_ITEM_CARFRONTPERSON.equals(lossAttrCode)
						||DataDictionary.LOSSATTRCODE_ITEM_CARREARPERSION.equals(lossAttrCode))
						&&!"".equals(R3_kindcode)){
					kindcode=R3_kindcode;
				}else{
					kindcode = DataDictionary.KINDCODE_R;// 险别
				}
				acpayItemVo.setOrder("1");
			}
		} else if (kindcode != null && DataDictionary.KINDCODE_B.equals(kindcode.trim())) {
			acpayItemVo.setOrder("2");
			kindcode = BZ_kindcode;
		} else if (kindcode != null && DataDictionary.KINDCODE_20B.equals(kindcode.trim())) {
			acpayItemVo.setOrder("2");
			kindcode = BZ_kindcode;
		} else if (kindcode != null && DataDictionary.KINDCODE_R.equals(kindcode.trim())) {
			acpayItemVo.setOrder("3");
		} else if (kindcode != null && DataDictionary.KINDCODE_20R1.equals(kindcode.trim())) {
			acpayItemVo.setOrder("3");
		} else if (kindcode != null && DataDictionary.KINDCODE_20R2.equals(kindcode.trim())) {
			acpayItemVo.setOrder("3");
		} else if (kindcode != null && DataDictionary.KINDCODE_20R3.equals(kindcode.trim())) {
			acpayItemVo.setOrder("3");
		} else if (kindcode != null && DataDictionary.KINDCODE_20Y.equals(kindcode.trim())) {
			acpayItemVo.setOrder("3");
		} else if (kindcode != null && DataDictionary.KINDCODE_20Y1.equals(kindcode.trim())) {
			acpayItemVo.setOrder("3");
		} else if (kindcode != null && DataDictionary.KINDCODE_20Y2.equals(kindcode.trim())) {
			acpayItemVo.setOrder("3");
		}
		return kindcode;

	}

	/**
	 * @Title: initAccompensate
	 * @Description: TODO(初始化理算书) 目前先空着，等待后期补从
	 * @author 李科
	 * @param acCompensate
	 * @return void
	 * @throws
	 * @date 2012-9-13 下午2:46:07
	 */
	private void initAccompensate(AcCompensate acCompensate, String reportNo) {
		String comCode = CommonMethod.getComCode();
		// 暂时存储登陆机构，需改为保单机构
		acCompensate.setComCode(comCode);
		acCompensate.setMakeCom(comCode);
		acCompensate.setCompensateText("*");
		acCompensate.setCurrency(DataDictionary.CURRENCY_CNY);// 币别
		acCompensate.setInputDate(new Date());
		String userCode = CommonMethod.getUserCode();
		acCompensate.setOperatorCode(userCode);
		acCompensate.setReportNo(reportNo);
	}

	/**
	 * @Title: findLcItemKindList
	 * @Description: TODO(查询标的子信息)
	 * @author 莫浩锋
	 * @param reportNo
	 * @param claimNo
	 * @return
	 * @return List<AclcItemKind>
	 * @throws
	 * @date Nov 22, 2012 10:11:01 AM
	 */
	public List<AclcItemKind> findLcItemKindList(String reportNo) {
		List<AclcItemKind> lcItemKindList = policyService.findLcItemKindList(reportNo);
		return lcItemKindList;
	}

	/**
	 * @Title: initItemVoByAccompensate
	 * @Description: TODO(根据理算书初始化损失项目)
	 * @author 李科
	 * @param aclossList
	 * @param acpersonlossList
	 * @return
	 * @return List<AcpayItemVo>
	 * @throws
	 * @date 2012-10-1 下午4:03:33
	 */
	public List<AcpayItemVo> initItemVoByAccompensate(List<AcLoss> aclossList, List<AcPersonLoss> acpersonlossList) {
		List<AcpayItemVo> bivoList = new ArrayList<AcpayItemVo>();
		int serialno = 0;
		for (AcLoss aclosstemp : aclossList) {
			AcpayItemVo acpayItemVo = new AcpayItemVo();
			acpayItemVo.setIndex(serialno++);
			acpayItemVo.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
			CommonMethod.copyObjectToObject(aclosstemp, acpayItemVo);
			bivoList.add(acpayItemVo);
		}
		for (AcPersonLoss acpersonloss : acpersonlossList) {
			AcpayItemVo acpayItemVo = new AcpayItemVo();
			acpayItemVo.setIndex(serialno++);
			acpayItemVo.setType(DataDictionary.ACPAYITEMVO_TYPE_PERSON);
			CommonMethod.copyObjectToObject(acpersonloss, acpayItemVo);
			bivoList.add(acpayItemVo);
		}
		return bivoList;
	}

	/**
	 * @Title: initAclossListByAcpayItemVo
	 * @Description: TODO(根据损失项目初始化Acloss)
	 * @author 李科
	 * @param ciCcompensate
	 * @param aclossList
	 * @param acpersonlossList
	 * @return
	 * @return List<AcpayItemVo>
	 * @throws
	 * @date 2012-10-1 下午4:03:33
	 */
	public List<AcLoss> initAclossListByAcpayItemVo(List<AcpayItemVo> lossList, AcCompensate compensate) {

		List<AcLoss> aclossList = new ArrayList<AcLoss>();
		for (AcpayItemVo acpayItemVo : lossList) {
			AcLoss acLoss = new AcLoss();
			CommonMethod.copyObjectToObject(acpayItemVo, acLoss);
			acLoss.setCurrency(DataDictionary.CURRENCY_CNY);
			acLoss.setItemCurrency(DataDictionary.CURRENCY_CNY);
			acLoss.setLossAmountCurrency(DataDictionary.CURRENCY_CNY);
			acLoss.setDeductCurrency(DataDictionary.CURRENCY_CNY);
			acLoss.setPayCurrency(DataDictionary.CURRENCY_CNY);
			acLoss.setCompensateNo(compensate.getCompensateNo());
			acLoss.setPolicyNo(compensate.getPolicyNo());
			acLoss.setClaimNo(compensate.getClaimNo());
			Double sumDefPay = acLoss.getSumLossAmount() - (acLoss.getDeductBzamount() != null ? acLoss.getDeductBzamount() : 0.0);
			acLoss.setSumDefPay(CommonMethod.doubleRound_Down(sumDefPay));
			if (acLoss.getRejectAmount() == null) {
				acLoss.setRejectAmount(0.0);
			}
			if (acLoss.getCompensateRate() == null) {
				acLoss.setCompensateRate(100.00);
			}
			aclossList.add(acLoss);
		}
		return aclossList;
	}

	/**
	 * @Title: initAcpersonlossListByAcpayItemVo
	 * @Description: TODO(根据损失项目初始化Acloss)
	 * @author 李科
	 * @param compensate
	 * @param aclossList
	 * @param acpersonlossList
	 * @return
	 * @return List<AcpayItemVo>
	 * @throws
	 * @date 2012-10-1 下午4:03:33
	 */
	public List<AcPersonLoss> initAcpersonlossListByAcpayItemVo(List<AcpayItemVo> lossList, AcCompensate compensate) {
		List<AcPersonLoss> acpersonlossList = new ArrayList<AcPersonLoss>();
		for (AcpayItemVo acpayItemVo : lossList) {
			AcPersonLoss personLoss = new AcPersonLoss();
			CommonMethod.copyObjectToObject(acpayItemVo, personLoss);
			personLoss.setCurrency(DataDictionary.CURRENCY_CNY);
			personLoss.setItemCurrency(DataDictionary.CURRENCY_CNY);
			personLoss.setLossAmountCurrency(DataDictionary.CURRENCY_CNY);
			personLoss.setDeductCurrency(DataDictionary.CURRENCY_CNY);
			personLoss.setPayCurrency(DataDictionary.CURRENCY_CNY);
			personLoss.setCompensateNo(compensate.getCompensateNo());
			personLoss.setPolicyNo(compensate.getPolicyNo());
			personLoss.setClaimNo(compensate.getClaimNo());
			if (personLoss.getRejectAmount() == null) {
				personLoss.setRejectAmount(0.0);
			}
			if (personLoss.getCompensateRate() == null) {
				personLoss.setCompensateRate(100.00);
			}
			acpersonlossList.add(personLoss);
		}
		return acpersonlossList;
	}

	/**
	 * @ClassName: AdjustmentService
	 * @Description: TODO(获取商业费用)
	 * @author 莫浩锋
	 * @date Oct 3, 2012 9:58:40 AM
	 * 
	 */
	public List<AcCharge> getbiAccharge(List<AcCarDefLoss> carLossList, List<AcPersonTrackMain> personLossList,
			List<AcPropDefLoss> proplossList, List<AcDefLossCharge> defLosschargeList, List<AcPrepay> prepayList,
			Boolean isPaidSelfLossFlag, AcClaim biClaim, String flag) {
		List<AcCharge> chargeList = new ArrayList<AcCharge>();

		// 互碰自赔
		Map<BigDecimal, String> map = new HashMap<BigDecimal, String>();
		if (isPaidSelfLossFlag) {
			for (AcCarDefLoss carDefLoss : carLossList) {
				if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(carDefLoss.getLossAttrCode())) {
					map.put(carDefLoss.getId(), null);
				}
			}
			for (AcPropDefLoss acproploss : proplossList) {
				// 三者车上物
				if (DataDictionary.LOSSATTRCODE_THIRD_CARPROP.equals(acproploss.getLossAttrCode())) {
					continue;
				}
				// 车外物
				if (DataDictionary.LOSSATTRCODE_PROP.equals(acproploss.getLossAttrCode())) {
					continue;
				}
				map.put(acproploss.getId(), null);
			}
		}

		for (AcDefLossCharge acDefLossCharge : defLosschargeList) {
			// 过滤交强险数据
			if (!DataDictionary.KINDCODE_BZ.equals(acDefLossCharge.getKindCode()) && !DataDictionary.KINDCODE_20BZ.equals(acDefLossCharge.getKindCode())) {
				if (!map.containsKey(acDefLossCharge.getWorkMainId()) && isPaidSelfLossFlag) {
					continue;
				}
				if (DataDictionary.KINDCODE_BZ9.equals(acDefLossCharge.getKindCode())) {
					continue;
				}
				AcCharge acCharge = new AcCharge();
				// 一站的时候，用定损时的费用金额
				if ("40".equals(flag)) {
					acDefLossCharge.setVerifyLossAmount(acDefLossCharge.getDefLossAmount() != null ? acDefLossCharge.getDefLossAmount()
							: 0.0);
				}
				acCharge.setPreChargeFee(0.0);
				acCharge.setReportNo(acDefLossCharge.getReportNo());
				// 设置手动添加的状态1：定损，0：初审或理算手工添加
				if (acDefLossCharge.getId() == null) {
					acCharge.setFromDeflossFlag(DataDictionary.FLAG_0);
				} else {
					acCharge.setFromDeflossFlag(DataDictionary.FLAG_1);
				}
				acCharge.setCurrency(DataDictionary.CURRENCY_CNY);
				acCharge.setRiskCode(biClaim.getRiskCode());
				acCharge.setClaimNo(biClaim.getClaimNo());
				acCharge.setPolicyNo(biClaim.getPolicyNo());
				acCharge.setRejectAmount(0.0);
				acCharge.setChargeName(commonService.obtainDicnameByTypeAndCode("ChargeCode", acDefLossCharge.getChargeCode()));
				acCharge.setChargeCode(acDefLossCharge.getChargeCode());
				acCharge.setKindCode(acDefLossCharge.getKindCode());
				acCharge.setFeeAmount(acDefLossCharge.getVerifyLossAmount() != null ? acDefLossCharge.getVerifyLossAmount() : 0.0);
				acCharge.setChargeAmount(acDefLossCharge.getVerifyLossAmount() != null ? acDefLossCharge.getVerifyLossAmount() : 0.0);
				acCharge.setPushtofeeflag(acDefLossCharge.getPushtofeeflag());
				AcCharge tmpAccharge = findAcdeflosscharge(chargeList, acCharge, acDefLossCharge);
				if (tmpAccharge != null) {
					if("1".equals(acCharge.getPushtofeeflag())||!"1".equals(tmpAccharge.getPushtofeeflag())){
						tmpAccharge.setPushtofeeflag(acCharge.getPushtofeeflag());
					}
					Double feeAmount = CommonMethod.doubleRound_Down(acCharge.getFeeAmount() + tmpAccharge.getFeeAmount());
					tmpAccharge.setFeeAmount(feeAmount);
					tmpAccharge.setChargeAmount(feeAmount);
				} else {
					chargeList.add(acCharge);
				}
			}
		}
		// 初始化理赔费用预赔金额
		this.initPreChargeFee(null, chargeList, prepayList);
		return chargeList;
	}
	public List<AcCharge> getbiAcchargeSurvey(List<AcReportCarInfo> acReportCarInfoList, List<AcReportPersonInfo> acReportPersonInfoList,
			List<AcReportPropInfo> acReportPropInfoList,Map<String, String> kindCodeMap,List<AcPrepay> prepayList,
			Boolean isPaidSelfLossFlag, AcClaim biClaim, String flag) {
		List<AcCharge> chargeList = new ArrayList<AcCharge>();

		// 互碰自赔
		Map<BigDecimal, String> map = new HashMap<BigDecimal, String>();
		if (isPaidSelfLossFlag) {
			for (AcReportCarInfo acReportCarInfo : acReportCarInfoList) {
				if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())) {
					map.put(acReportCarInfo.getId(), null);
				}
			}
		}
		for (AcReportCarInfo acReportCarInfo : acReportCarInfoList) {
			// 过滤交强险数据
			if (!DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())) {//只有标的车公估费可能有
				continue;
			}
			if(acReportCarInfo.getEstimatedFee()==null||acReportCarInfo.getEstimatedFee()<0.001){//公估费为0跳过
				continue;
			}
			if (!map.containsKey(acReportCarInfo.getId()) && isPaidSelfLossFlag) {
				continue;
			}
			AcCharge acCharge = new AcCharge();
			acCharge.setPreChargeFee(0.0);
			acCharge.setReportNo(acReportCarInfo.getReportNo());
			acCharge.setCurrency(DataDictionary.CURRENCY_CNY);
			acCharge.setRiskCode(biClaim.getRiskCode());
			acCharge.setClaimNo(biClaim.getClaimNo());
			acCharge.setPolicyNo(biClaim.getPolicyNo());
			acCharge.setRejectAmount(0.0);
			acCharge.setChargeName(DataDictionary.CHARGENAME_101);
			acCharge.setChargeCode(DataDictionary.CHARGECODE_101);
			acCharge.setKindCode(getDefaultSurveyRiskCode(acReportCarInfo, null, null, kindCodeMap, null, DataDictionary.RISK_SURVEY_FLAG_GG));
			acCharge.setFeeAmount(acReportCarInfo.getEstimatedFee() != null ? acReportCarInfo.getEstimatedFee() : 0.0);
			acCharge.setChargeAmount(acReportCarInfo.getEstimatedFee()!= null ? acReportCarInfo.getEstimatedFee(): 0.0);
			chargeList.add(acCharge);
			break;
		}
		// 初始化理赔费用预赔金额
		this.initPreChargeFee(null, chargeList, prepayList);
		return chargeList;
	}
	public List<AcCharge> getTraAcchargeSurvey(List<AcReportCarInfo> acReportCarInfoList, List<AcReportPersonInfo> acReportPersonInfoList,
			List<AcReportPropInfo> acReportPropInfoList,Map<String, String> kindCodeMap,List<AcPrepay> prepayList,
			Boolean isPaidSelfLossFlag, AcClaim traClaim) {
		List<AcCharge> chargeList = new ArrayList<AcCharge>();

		// 互碰自赔
		Map<BigDecimal, String> map = new HashMap<BigDecimal, String>();
		if (isPaidSelfLossFlag) {
			for (AcReportCarInfo acReportCarInfo : acReportCarInfoList) {
				if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())) {
					map.put(acReportCarInfo.getId(), null);
				}
			}
		}
		for (AcReportCarInfo acReportCarInfo : acReportCarInfoList) {
			// 过滤交强险数据
			if (!DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())) {//只有标的车公估费可能有
				continue;
			}
			if(acReportCarInfo.getEstimatedFee()==null||acReportCarInfo.getEstimatedFee()<0.001){//公估费为0跳过
				continue;
			}
			if (!map.containsKey(acReportCarInfo.getId()) && isPaidSelfLossFlag) {
				continue;
			}
			AcCharge acCharge = new AcCharge();
			acCharge.setPreChargeFee(0.0);
			acCharge.setReportNo(acReportCarInfo.getReportNo());
			acCharge.setCurrency(DataDictionary.CURRENCY_CNY);
			acCharge.setRiskCode(traClaim.getRiskCode());
			acCharge.setClaimNo(traClaim.getClaimNo());
			acCharge.setPolicyNo(traClaim.getPolicyNo());
			acCharge.setRejectAmount(0.0);
			acCharge.setChargeName(DataDictionary.CHARGENAME_101);
			acCharge.setChargeCode(DataDictionary.CHARGECODE_101);
			acCharge.setKindCode(getDefaultSurveyRiskCode(acReportCarInfo, null, null, kindCodeMap, null, DataDictionary.RISK_SURVEY_FLAG_GG));
			acCharge.setFeeAmount(acReportCarInfo.getEstimatedFee() != null ? acReportCarInfo.getEstimatedFee() : 0.0);
			acCharge.setChargeAmount(acReportCarInfo.getEstimatedFee()!= null ? acReportCarInfo.getEstimatedFee(): 0.0);
			chargeList.add(acCharge);
			break;
		}
		// 初始化理赔费用预赔金额
		this.initPreChargeFee(chargeList, null, prepayList);
		return chargeList;
	}
	
	/**
	 * @Title: findAllAccharge
	 * @Description: TODO(根据报案号查找所有费用赔款信息)
	 * @author 李魁服
	 * @param reportNo
	 * @return
	 * @return List<AcCharge>
	 * @throws
	 * @date Oct 8, 2012 11:55:30 PM
	 */
	public List<AcCharge> findAllAccharge(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		return super.find(AcCharge.class, queryRule);
	}

	/**
	 * @Title: findCIAcCharge
	 * @Description: TODO(根据报案号查找交强费用赔款信息)
	 * @author Wei Xing
	 * @date 2012-12-7 下午3:12:56
	 * @param reportNo
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findCIAcCharge(java.lang.String)
	 */
	public List<AcCharge> findCIAcCharge(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		queryRule.addEqual("riskCode", "0507");
		return super.find(AcCharge.class, queryRule);
	}

	/**
	 * @Title: findBIAcCharge
	 * @Description: TODO(根据报案号查找商业费用赔款信息)
	 * @author Wei Xing
	 * @date 2012-12-7 下午3:13:11
	 * @param reportNo
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findBIAcCharge(java.lang.String)
	 */
	public List<AcCharge> findBIAcCharge(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		queryRule.addNotEqual("riskCode", "0507");
		return super.find(AcCharge.class, queryRule);
	}

	/**
	 * @Title: gettraAccharge
	 * @Description: TODO(获取交强费用)
	 * @author 莫浩锋
	 * @param prepayList
	 * @param defLosschargeList
	 * @param proplossList
	 * @param personLossList
	 * @param carLossList
	 * @param isPaidSelfLossFlag
	 * @param ciClaim
	 * @param flag
	 * @return
	 * @return List<AcCharge>
	 * @throws
	 * @date Jan 6, 2013 9:07:44 PM
	 */
	public List<AcCharge> gettraAccharge(List<AcCarDefLoss> carLossList, List<AcPersonTrackMain> personLossList,
			List<AcPropDefLoss> proplossList, List<AcDefLossCharge> defLosschargeList, List<AcPrepay> prepayList,
			Boolean isPaidSelfLossFlag, AcClaim ciClaim, String flag,Boolean isAdvance) {
		// 组织交强赔款费用accharge数据
		List<AcCharge> chargeList = new ArrayList<AcCharge>();
		// 互碰自赔
		Map<BigDecimal, String> map = new HashMap<BigDecimal, String>();
		if (isPaidSelfLossFlag) {
			for (AcCarDefLoss carDefLoss : carLossList) {
				if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(carDefLoss.getLossAttrCode())) {
					map.put(carDefLoss.getId(), null);
				}
			}
			for (AcPropDefLoss acproploss : proplossList) {
				// 三者车上物
				if (DataDictionary.LOSSATTRCODE_THIRD_CARPROP.equals(acproploss.getLossAttrCode())) {
					continue;
				}
				// 车外物
				if (DataDictionary.LOSSATTRCODE_PROP.equals(acproploss.getLossAttrCode())) {
					continue;
				}
				map.put(acproploss.getId(), null);
			}
		}
		//垫付案件收集三者人伤损失 
		Map<BigDecimal, String> advanceMap = new HashMap<BigDecimal, String>();
		if (isAdvance) {
			for (AcPersonTrackMain personLoss : personLossList) {
				// 只获取三者车上人和路人
				if (DataDictionary.LOSSATTRCODE_THIRD_CARPERSON.equals(personLoss.getLossAttrCode())||DataDictionary.LOSSATTRCODE_THIRD_PERSON.equals(personLoss.getLossAttrCode())) {
					advanceMap.put(personLoss.getId(), null);
				}
			}
		}
		
		for (AcDefLossCharge acDefLossCharge : defLosschargeList) {
			// 过滤商业险数据
			if (DataDictionary.KINDCODE_BZ.equals(acDefLossCharge.getKindCode()) || DataDictionary.KINDCODE_20BZ.equals(acDefLossCharge.getKindCode())) {
				if (!map.containsKey(acDefLossCharge.getWorkMainId()) && isPaidSelfLossFlag) {
					continue;
				}
				//垫付案件直接理赔费用只赔付三者人伤
				if (!advanceMap.containsKey(acDefLossCharge.getWorkMainId()) && isAdvance) {
					continue;
				}
				
				if (DataDictionary.KINDCODE_BZ9.equals(acDefLossCharge.getKindCode())) {
					continue;
				}

				AcCharge acCharge = new AcCharge();
				// 一站的时候，用定损时的费用金额
				if ("40".equals(flag)) {
					acDefLossCharge.setVerifyLossAmount(acDefLossCharge.getDefLossAmount() != null ? acDefLossCharge.getDefLossAmount()
							: 0.0);
				}
				acCharge.setPreChargeFee(0.0);
				acCharge.setReportNo(acDefLossCharge.getReportNo());
				// 设置手动添加的状态1：定损，0：初审或理算手工添加
				if (acDefLossCharge.getId() == null) {
					acCharge.setFromDeflossFlag(DataDictionary.FLAG_0);
				} else {
					acCharge.setFromDeflossFlag(DataDictionary.FLAG_1);
				}
				acCharge.setCurrency(DataDictionary.CURRENCY_CNY);
				acCharge.setRiskCode(ciClaim.getRiskCode());
				acCharge.setClaimNo(ciClaim.getClaimNo());
				acCharge.setPolicyNo(ciClaim.getPolicyNo());
				acCharge.setRejectAmount(0.0);
				acCharge.setChargeName(commonService.obtainDicnameByTypeAndCode("ChargeCode", acDefLossCharge.getChargeCode()));
				acCharge.setChargeCode(acDefLossCharge.getChargeCode());
				acCharge.setKindCode(acDefLossCharge.getKindCode());
				acCharge.setFeeAmount(acDefLossCharge.getVerifyLossAmount() != null ? acDefLossCharge.getVerifyLossAmount() : 0.0);
				acCharge.setChargeAmount(acDefLossCharge.getVerifyLossAmount() != null ? acDefLossCharge.getVerifyLossAmount() : 0.0);
				acCharge.setPushtofeeflag(acDefLossCharge.getPushtofeeflag());
				AcCharge tmpAccharge = findAcdeflosscharge(chargeList, acCharge, acDefLossCharge);
				if (tmpAccharge != null) {
					Double feeAmount = CommonMethod.doubleRound_Down(acCharge.getFeeAmount() + tmpAccharge.getFeeAmount());
					tmpAccharge.setFeeAmount(feeAmount);
					tmpAccharge.setChargeAmount(feeAmount);
					if("1".equals(acCharge.getPushtofeeflag())||!"1".equals(tmpAccharge.getPushtofeeflag())){
						tmpAccharge.setPushtofeeflag(acCharge.getPushtofeeflag());
					}
				} else {
					chargeList.add(acCharge);
				}
			}
		}
		// 初始化理赔费用预赔金额
		this.initPreChargeFee(chargeList, null, prepayList);
		return chargeList;
	}
	/**
	 * @Title: getZeroTraAccharge
	 * @Description: TODO(获取零结案交强费用)
	 * @param zeroChargeList
	 * @param ciClaim
	 * @param prepayList
	 * @return List<AcCharge>  
	 * @throws
	 * @author duanshuyuan
	 * @date 2016-4-20 下午3:56:06
	 */
	public List<AcCharge> getZeroTraAccharge(List<AcZeroChargeQuick> zeroChargeList, AcClaim ciClaim){
		List<AcCharge> chargeList = new ArrayList<AcCharge>();
		if(zeroChargeList != null && zeroChargeList.size() > 0){
			for (AcZeroChargeQuick zeroCharge : zeroChargeList) {
				if(!DataDictionary.KINDCODE_BZ.equals(zeroCharge.getKindCode()) && !DataDictionary.KINDCODE_20BZ.equals(zeroCharge.getKindCode())){
					continue;
				}
				AcCharge acCharge = new AcCharge();
				acCharge.setPreChargeFee(0.0);
				acCharge.setReportNo(zeroCharge.getReportNo());
				// 设置手动添加的状态1：定损，0：初审或理算手工添加
				acCharge.setFromDeflossFlag(DataDictionary.FLAG_0);
				acCharge.setCurrency(DataDictionary.CURRENCY_CNY);
				acCharge.setRiskCode(ciClaim.getRiskCode());
				acCharge.setClaimNo(ciClaim.getClaimNo());
				acCharge.setPolicyNo(ciClaim.getPolicyNo());
				acCharge.setChargeName(commonService.obtainDicnameByTypeAndCode("ChargeCode", zeroCharge.getChargeCode()));
				acCharge.setChargeCode(zeroCharge.getChargeCode());
				acCharge.setKindCode(zeroCharge.getKindCode());
				acCharge.setRejectAmount(zeroCharge.getRejectAmount() != null ? zeroCharge.getRejectAmount() : 0.0);
				acCharge.setFeeAmount(zeroCharge.getFeeAmount() != null ? zeroCharge.getFeeAmount() : 0.0);
				acCharge.setChargeAmount(zeroCharge.getChargeAmount() != null ? zeroCharge.getChargeAmount() : 0.0);
				acCharge.setPushtofeeflag(zeroCharge.getPushtofeeflag());
				AcCharge tmpAccharge = findAcdeflosscharge(chargeList, acCharge, null);
				if (tmpAccharge != null) {
					Double feeAmount = CommonMethod.doubleRound_Down(acCharge.getFeeAmount() + tmpAccharge.getFeeAmount());
					tmpAccharge.setFeeAmount(feeAmount);
					tmpAccharge.setChargeAmount(feeAmount);
					 if("1".equals(acCharge.getPushtofeeflag())||!"1".equals(tmpAccharge.getPushtofeeflag())){
						 tmpAccharge.setPushtofeeflag(acCharge.getPushtofeeflag());
						}
				} else {
					chargeList.add(acCharge);
				}
			}
		}
		return chargeList;
	}
	/**
	 * @Title: getZeroBiAccharge
	 * @Description: TODO(获取零结案商业费用)
	 * @param zeroChargeList
	 * @param biClaim
	 * @return List<AcCharge>  
	 * @throws
	 * @author duanshuyuan
	 * @date 2016-4-20 下午3:56:06
	 */
	public List<AcCharge> getZeroBiAccharge(List<AcZeroChargeQuick> zeroChargeList, AcClaim biClaim){
		List<AcCharge> chargeList = new ArrayList<AcCharge>();
		if(zeroChargeList != null && zeroChargeList.size() > 0){
			for (AcZeroChargeQuick zeroCharge : zeroChargeList) {
				if(DataDictionary.KINDCODE_BZ.equals(zeroCharge.getKindCode()) || DataDictionary.KINDCODE_20BZ.equals(zeroCharge.getKindCode())){
					continue;
				}
				AcCharge acCharge = new AcCharge();
				acCharge.setPreChargeFee(0.0);
				acCharge.setReportNo(zeroCharge.getReportNo());
				// 设置手动添加的状态1：定损，0：初审或理算手工添加
				acCharge.setFromDeflossFlag(DataDictionary.FLAG_0);
				acCharge.setCurrency(DataDictionary.CURRENCY_CNY);
				acCharge.setRiskCode(biClaim.getRiskCode());
				acCharge.setClaimNo(biClaim.getClaimNo());
				acCharge.setPolicyNo(biClaim.getPolicyNo());
				acCharge.setChargeName(commonService.obtainDicnameByTypeAndCode("ChargeCode", zeroCharge.getChargeCode()));
				acCharge.setChargeCode(zeroCharge.getChargeCode());
				acCharge.setKindCode(zeroCharge.getKindCode());
				acCharge.setRejectAmount(zeroCharge.getRejectAmount() != null ? zeroCharge.getRejectAmount() : 0.0);
				acCharge.setFeeAmount(zeroCharge.getFeeAmount() != null ? zeroCharge.getFeeAmount() : 0.0);
				acCharge.setChargeAmount(zeroCharge.getChargeAmount() != null ? zeroCharge.getChargeAmount() : 0.0);
				acCharge.setPushtofeeflag(zeroCharge.getPushtofeeflag());
				AcCharge tmpAccharge = findAcdeflosscharge(chargeList, acCharge, null);
				if (tmpAccharge != null) {
					Double feeAmount = CommonMethod.doubleRound_Down(acCharge.getFeeAmount() + tmpAccharge.getFeeAmount());
					tmpAccharge.setFeeAmount(feeAmount);
					tmpAccharge.setChargeAmount(feeAmount);
					 if("1".equals(acCharge.getPushtofeeflag())||!"1".equals(tmpAccharge.getPushtofeeflag())){
						 tmpAccharge.setPushtofeeflag(acCharge.getPushtofeeflag());
						}
				} else {
					chargeList.add(acCharge);
				}
			}
		}
		return chargeList;
	}

	/**
	 * @Title: initPreChargeFee
	 * @Description: TODO(初始化直接理赔费用的预赔金额)
	 * @author 莫浩锋
	 * @param chargeList
	 * @return void
	 * @throws
	 * @date Dec 9, 2013 10:42:15 AM
	 */
	public void initPreChargeFee(List<AcCharge> ciChargeList, List<AcCharge> biChargeList, List<AcPrepay> prepayList) {
		if (ciChargeList != null) {
			for (AcCharge charge : ciChargeList) {
				Double chargeAmount = 0.0;
				for (AcPrepay prepay : prepayList) {
					for (AcPrepayCharge prepaycharge : prepay.getAcPrepayCharges()) {
						if (prepaycharge.getKindCode().equals(charge.getKindCode())
								&& prepaycharge.getChargeCode().equals(charge.getChargeCode())) {
							chargeAmount += prepaycharge.getChargeAmount() != null ? prepaycharge.getChargeAmount() : 0.0;
						}
					}

				}
				charge.setPreChargeFee(CommonMethod.doubleRound_Down(chargeAmount));
				charge.setSumRealPayAmount(CommonMethod.doubleRound_Down(charge.getChargeAmount() - chargeAmount));
			}
		}

		if (biChargeList != null) {
			for (AcCharge charge : biChargeList) {
				Double chargeAmount = 0.0;
				for (AcPrepay prepay : prepayList) {
					for (AcPrepayCharge prepaycharge : prepay.getAcPrepayCharges()) {
						if (prepaycharge.getKindCode().equals(charge.getKindCode())
								&& prepaycharge.getChargeCode().equals(charge.getChargeCode())) {
							chargeAmount += prepaycharge.getChargeAmount() != null ? prepaycharge.getChargeAmount() : 0.0;
						}
					}

				}
				charge.setPreChargeFee(CommonMethod.doubleRound_Down(chargeAmount));
				charge.setSumRealPayAmount(CommonMethod.doubleRound_Down(charge.getChargeAmount() - chargeAmount));
			}
		}
	}

	/**
	 * @Title: initPreChargeFeeQuick
	 * @Description: TODO(初始化直接理赔费用的预赔金额)
	 * @author 莫浩锋
	 * @param chargeList
	 * @return void
	 * @throws
	 * @date Dec 9, 2013 10:42:15 AM
	 */
	public void initPreChargeFeeQuick(List<AcChargeQuick> ciChargeList, List<AcChargeQuick> biChargeList, String reportNo) {
		List<AcPrepay> prepayList = prePayService.findPrepayByReportNo(reportNo);
		if (ciChargeList != null) {
			for (AcChargeQuick charge : ciChargeList) {
				Double chargeAmount = 0.0;
				for (AcPrepay prepay : prepayList) {
					for (AcPrepayCharge prepaycharge : prepay.getAcPrepayCharges()) {
						if (prepaycharge.getKindCode().equals(charge.getKindCode())
								&& prepaycharge.getChargeCode().equals(charge.getChargeCode())) {
							chargeAmount += prepaycharge.getChargeAmount() != null ? prepaycharge.getChargeAmount() : 0.0;
						}
					}

				}
				charge.setPreChargeFee(CommonMethod.doubleRound_Down(chargeAmount));
				charge.setSumRealPayAmount(CommonMethod.doubleRound_Down(charge.getChargeAmount() - chargeAmount));
			}

		}

		if (biChargeList != null) {
			for (AcChargeQuick charge : biChargeList) {
				Double chargeAmount = 0.0;
				for (AcPrepay prepay : prepayList) {
					for (AcPrepayCharge prepaycharge : prepay.getAcPrepayCharges()) {
						if (prepaycharge.getKindCode().equals(charge.getKindCode())
								&& prepaycharge.getChargeCode().equals(charge.getChargeCode())) {
							chargeAmount += prepaycharge.getChargeAmount() != null ? prepaycharge.getChargeAmount() : 0.0;
						}
					}

				}
				charge.setPreChargeFee(CommonMethod.doubleRound_Down(chargeAmount));
				charge.setSumRealPayAmount(CommonMethod.doubleRound_Down(charge.getChargeAmount() - chargeAmount));
			}

		}
	}

	/**
	 * @Title: findChargeAmountByKindCode
	 * @Description: TODO(险别与费用类型赋值PreChargeFee)
	 * @author 莫浩锋
	 * @param compensate
	 * @return
	 * @throws
	 * @date Nov 24, 2012 4:53:47 PM
	 */
	private void findChargeAmountByKindCode(AcCharge charge, List<AcPrepayCharge> prepayChargeList) {
		if (prepayChargeList.size() > 0) {
			for (AcPrepayCharge prepaycharge : prepayChargeList) {
				if (prepaycharge.getKindCode().equals(charge.getKindCode()) && prepaycharge.getChargeCode().equals(charge.getChargeCode())) {
					charge.setPreChargeFee(prepaycharge.getChargeAmount() != null ? prepaycharge.getChargeAmount() : 0.0);
				}
			}
		}
	}

	/**
	 * @Title: initAcCompensate
	 * @Description: TODO(初始化计算书)
	 * @author 莫浩锋
	 * @param compensate
	 * @return
	 * @return AcCompensate
	 * @throws
	 * @date Nov 24, 2012 4:53:47 PM
	 */
	public AcCompensate initAcCompensate(AcCompensate compensate) {
		if(compensate.getAccommodateAmount()==null||"".equals(compensate.getAccommodateAmount())){
			compensate.setAccommodateAmount(0.0);
		}
		if ("".equals(compensate.getCompensateText()) || compensate.getChargeText() == null) {
			compensate.setCompensateText("*");
		}
		if ("".equals(compensate.getChargeText()) || compensate.getChargeText() == null) {
			compensate.setChargeText("*");
		}
		if (DataDictionary.RISKCODE_CI.equals(compensate.getRiskCode())) {
			if(compensate.getIsAdvance()!=null && DataDictionary.FLAG_1.equals(compensate.getIsAdvance())){
				compensate.setCompensateType(DataDictionary.FLAG_3);
			}else{
				compensate.setCompensateType(DataDictionary.FLAG_2);
			}
		} else {
			compensate.setCompensateType(DataDictionary.FLAG_1);
		}
		if (compensate.getId() != null) {
			AcCompensate tmpcompensate = null;
			QueryRule queryRule = QueryRule.getInstance();
			queryRule.addEqual("id", compensate.getId());
			tmpcompensate = super.findUnique(AcCompensate.class, queryRule);
			DataUtils.copySimpleObjectToTargetFromSource(tmpcompensate, compensate, false);
			//非追偿案件，清理追偿字段信息
			if(tmpcompensate.getRecoveryFlag()==null  || !"1".equals(tmpcompensate.getRecoveryFlag())){
				tmpcompensate.setRecoveryFlag(null);
				tmpcompensate.setReplevyCaseTypeCode(null);
				tmpcompensate.setReplevyCaseTypeName(null);
				tmpcompensate.setReplevyQyMoney(null);
				tmpcompensate.setReplevyType(null);
				tmpcompensate.setReplevyWay(null);
			}
			//针对存在改派的任务,理算主表更新操作员，机构
			tmpcompensate.setMakeCom(CommonMethod.getComCode());
			tmpcompensate.setOperatorCode(CommonMethod.getUserCode());
			return tmpcompensate;
		} else {
			// 如果是重开赔案，则需要记录重开赔案的id
			List<AcReCase> acReCaseList = recaseService.findRecaseByReportNo(compensate.getReportNo());
			if (!acReCaseList.isEmpty()) {
				compensate.setAcRecaseID(acReCaseList.get(0).getId());
			}
			String compensateNo = commonService.findMaxBookNo(compensate.getClaimNo());
			compensate.setCompensateNo(compensateNo);
			compensate.setInputDate(new Date());
			compensate.setMakeCom(CommonMethod.getComCode());
			compensate.setOperatorCode(CommonMethod.getUserCode());
			compensate.setCurrency(DataDictionary.CURRENCY_CNY);
			return compensate;
		}
	}

	/**
	 * @Title: getSaveBICpmpensate
	 * @Description: TODO(初始化商业险理算书)
	 * @author 莫浩锋
	 * @param biCompensate
	 * @param bivoList
	 * @param bichargeList
	 * @param deductcondList
	 * @param theftdeductcondList
	 * @return
	 * @return AcCompensate
	 * @throws
	 * @date Dec 21, 2012 2:54:52 PM
	 */
	public AcCompensate getSaveBICpmpensate(AcCompensate biCompensate, List<AcpayItemVo> bivoList, List<AcCharge> bichargeList,
			List<AcDeductcond> deductcondList, List<AcDeductcond> theftdeductcondList) {
		// 标的损失金额ACLoss.SumLossAmount + ACPersonLoss.SumLossAmount √
		Double sumLoss = 0.0;
		// 险别责任赔款合计 ACLoss.IndemnityPaid + ACPersonLoss.IndemnityPaid的汇总 √
		Double sumKindDutyPaid = 0.0;
		// 总赔付金额SumDutyPaid + SumChargeAmount √
		Double sumPaid = 0.0;
		// 本次赔付金额SumThisDutyPaid + SumRealPayCharge √
		Double sumThisPaidFee = 0.0;
		// 本次总赔款合计SumDutyPaid - SumPrePaid - MesnePayAmount √
		Double sumThisDutyPaid = 0.0;
		// 不计免赔赔款金额Acloss.ExceDeductKindPaid + AcPersonLoss.ExceDeductKindPaid √
		Double sumExceDeductPaid = 0.0;
		// 总直接理赔费用AcCharge.ChargeAmount √
		Double sumChargeAmount = 0.0;
		// 预付直接理赔费用ACCharge.PreChargeFee √
		Double preSumChargeAmount = 0.0;
		// 本次直接理赔费ACCharge.sumRealPayAmount √
		Double sumRealPayCharge = 0.0;
		// 总赔款合计SumExceDeductPaid + SumKindDutyPaid √
		Double sumDutyPaid = 0.0;
		Double sumRealpay = 0.0;

		List<AcpayItemVo> lossList = new ArrayList<AcpayItemVo>();
		List<AcpayItemVo> personlossList = new ArrayList<AcpayItemVo>();

		for (int i = 0; i < bivoList.size(); i++) {
			AcpayItemVo acpayItemVo = bivoList.get(i);
			if (DataDictionary.ACPAYITEMVO_TYPE_LOSS.equals(acpayItemVo.getType())) {
				lossList.add(acpayItemVo);
			} else {
				personlossList.add(acpayItemVo);
			}
		}
		List<AcLoss> aclossList = this.initAclossListByAcpayItemVo(lossList, biCompensate);
		List<AcPersonLoss> acpersonlossList = this.initAcpersonlossListByAcpayItemVo(personlossList, biCompensate);

		for (AcLoss acLoss : aclossList) {
			sumLoss += acLoss.getSumLossAmount();
			sumRealpay += acLoss.getSumRealpay();
			sumKindDutyPaid += acLoss.getIndemnityPaid();
			sumExceDeductPaid += acLoss.getExceDeductKindPaid() != null ? acLoss.getExceDeductKindPaid() : 0.0;

		}
		this.mergeList(aclossList, biCompensate.getAcLosses(), "id");// 如果已存在理算数据，则将数据进行同步，如果不存在理算数据，则将数据拷贝的要保存的对象中

		for (AcPersonLoss acPersonLoss : acpersonlossList) {
			sumLoss += acPersonLoss.getSumLossAmount();
			sumRealpay += acPersonLoss.getSumRealpay();
			sumKindDutyPaid += acPersonLoss.getIndemnityPaid();
			sumExceDeductPaid += acPersonLoss.getExceDeductKindPaid() != null ? acPersonLoss.getExceDeductKindPaid() : 0.0;
		}
		this.mergeList(acpersonlossList, biCompensate.getAcPersonLosses(), "id");// 如果已存在理算数据，则将数据进行同步，如果不存在理算数据，则将数据拷贝的要保存的对象中

		List<AcCharge> acChargeList = this.doInitChargeList(bichargeList, biCompensate);
		for (AcCharge accharge : acChargeList) {
			Double preChargeFee = accharge.getPreChargeFee() != null ? accharge.getPreChargeFee() : 0.0;
			sumRealPayCharge += accharge.getSumRealPayAmount();
			sumChargeAmount += accharge.getChargeAmount();
			preSumChargeAmount += preChargeFee;
		}
		this.mergeList(acChargeList, biCompensate.getAcCharges(), "id");// 如果已存在理算数据，则将数据进行同步，如果不存在理算数据，则将数据拷贝的要保存的对象中

		List<AcDeductcond> acDeductcondList = this.doInitDeductcondList(deductcondList, theftdeductcondList, biCompensate);
		this.mergeList(acDeductcondList, biCompensate.getAcDeductconds(), "id");// 如果已存在理算数据，则将数据进行同步，如果不存在理算数据，则将数据拷贝的要保存的对象中

		// sumDutyPaid = sumExceDeductPaid + sumKindDutyPaid;
		sumDutyPaid = sumRealpay;
		sumPaid = sumDutyPaid + sumChargeAmount;
		sumThisDutyPaid = sumDutyPaid - biCompensate.getSumPrePaid() - biCompensate.getMesnePayAmount();
		sumThisPaidFee = sumThisDutyPaid + sumRealPayCharge;

		biCompensate.setSumLoss(CommonMethod.doubleRound_Down(sumLoss));
		biCompensate.setSumPaid(CommonMethod.doubleRound_Down(sumPaid));
		biCompensate.setSumDutyPaid(CommonMethod.doubleRound_Down(sumDutyPaid));
		biCompensate.setSumThisPaidFee(CommonMethod.doubleRound_Down(sumThisPaidFee));
		biCompensate.setSumThisDutyPaid(CommonMethod.doubleRound_Down(sumThisDutyPaid));
		biCompensate.setSumChargeAmount(CommonMethod.doubleRound_Down(sumChargeAmount));
		biCompensate.setSumKindDutyPaid(CommonMethod.doubleRound_Down(sumKindDutyPaid));
		biCompensate.setSumRealPayCharge(CommonMethod.doubleRound_Down(sumRealPayCharge));
		biCompensate.setSumExceDeductPaid(CommonMethod.doubleRound_Down(sumExceDeductPaid));
		biCompensate.setPreSumChargeAmount(CommonMethod.doubleRound_Down(preSumChargeAmount));
		return biCompensate;
	}

	/**
	 * @Title: doInitBISaveData
	 * @Description: TODO(初始化暂存商业数据)
	 * @author 魏星
	 * @param reportNo
	 * @param bivoList
	 * @param bichargeList
	 * @return
	 * @return Accompensate
	 * @throws
	 * @date 2012-10-3 下午5:47:03
	 */
	public void doSaveBICompensate(AcCompensate bicompensate, List<AcpayItemVo> bivoList, List<AcCharge> bichargeList,
			List<AcDeductcond> deductcondList, List<AcDeductcond> theftdeductcondList) {
		// 查看是否存在商业理算书

		bicompensate = initAcCompensate(bicompensate);
		bicompensate = this.getSaveBICpmpensate(bicompensate, bivoList, bichargeList, deductcondList, theftdeductcondList);
		save(bicompensate);
	}

	/**
	 * 
	 * @Title: getSaveTraffiCompensate
	 * @Description: TODO(初始化交强险理算书)
	 * @author: liuchenyang
	 * @param trafficcompensate
	 * @param travoList
	 * @param travoNoDutyList
	 * @param trachargeList
	 * @return
	 * @return AcCompensate
	 * @throws
	 * @date 2012-10-30 上午11:25:18
	 */
	public AcCompensate getSaveTraffiCompensate(AcCompensate ciCcompensate, List<AcpayItemVo> travoList, List<AcpayItemVo> travoNoDutyList,
			List<AcCharge> trachargeList) {

		// 标的损失金额ACLoss.SumLossAmount + ACPersonLoss.SumLossAmount √
		Double sumLoss = 0.0;
		// 险别责任赔款合计 ACLoss.IndemnityPaid + ACPersonLoss.IndemnityPaid的汇总 √
		Double sumKindDutyPaid = 0.0;
		// 总赔付金额SumDutyPaid + SumChargeAmount √
		Double sumPaid = 0.0;
		// 本次赔付金额SumThisDutyPaid + SumRealPayCharge √
		Double sumThisPaidFee = 0.0;
		// 本次总赔款合计SumDutyPaid - SumPrePaid - MesnePayAmount √
		Double sumThisDutyPaid = 0.0;
		// 不计免赔赔款金额Acloss.ExceDeductKindPaid + AcPersonLoss.ExceDeductKindPaid √
		Double sumExceDeductPaid = 0.0;
		// 总直接理赔费用AcCharge.ChargeAmount √
		Double sumChargeAmount = 0.0;
		// 预付直接理赔费用ACCharge.PreChargeFee √
		Double preSumChargeAmount = 0.0;
		// 本次直接理赔费ACCharge.sumRealPayAmount √
		Double sumRealPayCharge = 0.0;
		// 总赔款合计SumExceDeductPaid + SumKindDutyPaid √
		Double sumDutyPaid = 0.0;
		Double sumRealpay = 0.0;

		List<AcpayItemVo> lossList = new ArrayList<AcpayItemVo>();
		List<AcpayItemVo> personlossList = new ArrayList<AcpayItemVo>();
		for (int i = 0; i < travoList.size(); i++) {
			AcpayItemVo acpayItemVo = travoList.get(i);
			if (DataDictionary.ACPAYITEMVO_TYPE_LOSS.equals(acpayItemVo.getType())) {
				lossList.add(acpayItemVo);
			} else {
				personlossList.add(acpayItemVo);
			}

		}
		for (int i = 0; i < travoNoDutyList.size(); i++) {
			AcpayItemVo acpayItemVo = travoNoDutyList.get(i);
			lossList.add(acpayItemVo);

		}
		List<AcLoss> aclossList = this.initAclossListByAcpayItemVo(lossList, ciCcompensate);
		List<AcPersonLoss> acpersonlossList = this.initAcpersonlossListByAcpayItemVo(personlossList, ciCcompensate);

		for (AcLoss acLoss : aclossList) {
			sumLoss += acLoss.getSumLossAmount();
			sumRealpay += acLoss.getSumRealpay();
			sumKindDutyPaid += acLoss.getIndemnityPaid();
			sumExceDeductPaid += acLoss.getExceDeductKindPaid() != null ? acLoss.getExceDeductKindPaid() : 0.0;
		}
		this.mergeList(aclossList, ciCcompensate.getAcLosses(), "id");// 如果已存在理算数据，则将数据进行同步，如果不存在理算数据，则将数据拷贝的要保存的对象中

		for (AcPersonLoss acPersonLoss : acpersonlossList) {
			sumLoss += acPersonLoss.getSumLossAmount();
			sumRealpay += acPersonLoss.getSumRealpay();
			sumKindDutyPaid += acPersonLoss.getIndemnityPaid();
			sumExceDeductPaid += acPersonLoss.getExceDeductKindPaid() != null ? acPersonLoss.getExceDeductKindPaid() : 0.0;
		}
		this.mergeList(acpersonlossList, ciCcompensate.getAcPersonLosses(), "id");// 如果已存在理算数据，则将数据进行同步，如果不存在理算数据，则将数据拷贝的要保存的对象中

		List<AcCharge> acChargeList = doInitChargeList(trachargeList, ciCcompensate);
		for (AcCharge accharge : acChargeList) {
			Double preChargeFee = accharge.getPreChargeFee() != null ? accharge.getPreChargeFee() : 0.0;
			sumRealPayCharge += accharge.getSumRealPayAmount();
			sumChargeAmount += accharge.getChargeAmount();
			preSumChargeAmount += preChargeFee;
		}
		this.mergeList(acChargeList, ciCcompensate.getAcCharges(), "id");

		// sumDutyPaid = sumExceDeductPaid + sumKindDutyPaid;
		sumDutyPaid = sumRealpay;
		sumPaid = sumDutyPaid + sumChargeAmount;
		sumThisDutyPaid = sumDutyPaid - ciCcompensate.getSumPrePaid() - ciCcompensate.getMesnePayAmount();
		sumThisPaidFee = sumThisDutyPaid + sumRealPayCharge;

		ciCcompensate.setSumLoss(CommonMethod.doubleRound_Down(sumLoss));
		ciCcompensate.setSumPaid(CommonMethod.doubleRound_Down(sumPaid));
		ciCcompensate.setSumDutyPaid(CommonMethod.doubleRound_Down(sumDutyPaid));
		ciCcompensate.setSumThisPaidFee(CommonMethod.doubleRound_Down(sumThisPaidFee));
		ciCcompensate.setSumThisDutyPaid(CommonMethod.doubleRound_Down(sumThisDutyPaid));
		ciCcompensate.setSumChargeAmount(CommonMethod.doubleRound_Down(sumChargeAmount));
		ciCcompensate.setSumKindDutyPaid(CommonMethod.doubleRound_Down(sumKindDutyPaid));
		ciCcompensate.setSumRealPayCharge(CommonMethod.doubleRound_Down(sumRealPayCharge));
		ciCcompensate.setSumExceDeductPaid(CommonMethod.doubleRound_Down(sumExceDeductPaid));
		ciCcompensate.setPreSumChargeAmount(CommonMethod.doubleRound_Down(preSumChargeAmount));
		return ciCcompensate;
	}

	/**
	 * @Title: doInitTrafficSaveData
	 * @Description: TODO(初始化暂存交强数据)
	 * @author 魏星
	 * @param reportNo
	 * @param travoList
	 * @param travoNoDutyList
	 * @param trachargeList
	 * @return
	 * @return Accompensate
	 * @throws
	 * @date 2012-10-3 下午5:47:27
	 */
	public void doSaveTraffiCompensate(AcCompensate trafficcompensate, List<AcpayItemVo> travoList, List<AcpayItemVo> travoNoDutyList,
			List<AcCharge> trachargeList) {
		trafficcompensate = initAcCompensate(trafficcompensate);
		this.getSaveTraffiCompensate(trafficcompensate, travoList, travoNoDutyList, trachargeList);
		save(trafficcompensate);
	}

	/**
	 * @Title: doSaveAdjustment
	 * @Description: TODO(理算暂存)
	 * @author 魏星
	 * @param reportNo
	 * @param bivoList
	 * @param travoList
	 * @param travoNoDutyList
	 * @param bichargeList
	 * @param trachargeList
	 * @return void
	 * @throws
	 * @date 2012-10-3 下午5:47:44
	 */
	public void doSaveAdjustment(List<AcDeductcond> deductcondList, List<AcDeductcond> theftdeductcondList, AcCompensate biAccompensate,
			AcCompensate trafficAccompensate, List<AcpayItemVo> bivoList, List<AcpayItemVo> travoList, List<AcpayItemVo> travoNoDutyList,
			List<AcCharge> bichargeList, List<AcCharge> trachargeList, List<AcLossBill> acLossBillList) {
		if (biAccompensate != null) {
			this.doSaveBICompensate(biAccompensate, bivoList, bichargeList, deductcondList, theftdeductcondList);
		}
		if (trafficAccompensate != null) {
			this.doSaveTraffiCompensate(trafficAccompensate, travoList, travoNoDutyList, trachargeList);
		}
		this.saveAcLossBillInfo(acLossBillList);
	}

	/**
	 * @Title: doSaveTraffiCompensateAndHis
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @author 任海周
	 * @param trafficAccompensate
	 * @param travoList
	 * @param travoNoDutyList
	 * @param trachargeList
	 * @return void
	 * @throws
	 * @date May 13, 2014 2:57:13 PM
	 */
	private void doSaveTraffiCompensateAndHis(AcCompensate trafficcompensate, List<AcpayItemVo> travoList, List<AcpayItemVo> travoNoDutyList,
			List<AcCharge> trachargeList) {
		trafficcompensate = initAcCompensate(trafficcompensate);
		this.getSaveTraffiCompensate(trafficcompensate, travoList, travoNoDutyList, trachargeList);
		 //案中结案的任务正常发起理算任务，理算提交时控制Sumthispaid=0，核赔任务提交控制该立案理算没有支付拆分。
		if(trafficcompensate!=null){
			 AcClaim claim=	claimService.findAcclaimByClaimNo(trafficcompensate.getClaimNo());
			  if("1".equals(claim.getMidEndFlag())){
				 Double paidFee= trafficcompensate.getSumThisPaidFee();
				 if(paidFee!=null&&paidFee.doubleValue()!=0){
					 throw new BusinessException("交强险已经案中结案，交强险本次赔付金额必须为0!", null);
				 }
			  }
		}
		this.saveObjAndHis(trafficcompensate, AcCompensateHis.class);
	}

	/**
	 * @Title: doSaveBICompensateAndHis
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @author 任海周
	 * @param biAccompensate
	 * @param bivoList
	 * @param bichargeList
	 * @param deductcondList
	 * @param theftdeductcondList
	 * @return void
	 * @throws
	 * @date May 13, 2014 2:56:52 PM
	 */
	private void doSaveBICompensateAndHis(AcCompensate bicompensate, List<AcpayItemVo> bivoList, List<AcCharge> bichargeList,
			List<AcDeductcond> deductcondList, List<AcDeductcond> theftdeductcondList) {
		// 查看是否存在商业理算书
		bicompensate = initAcCompensate(bicompensate);
		bicompensate = this.getSaveBICpmpensate(bicompensate, bivoList, bichargeList, deductcondList, theftdeductcondList);
		 //案中结案的任务正常发起理算任务，理算提交时控制Sumthispaid=0，核赔任务提交控制该立案理算没有支付拆分。
		if(bicompensate!=null){
			 AcClaim claim=	claimService.findAcclaimByClaimNo(bicompensate.getClaimNo());
			  if("1".equals(claim.getMidEndFlag())){
				 Double paidFee= bicompensate.getSumThisPaidFee();
				 if(paidFee!=null&&paidFee.doubleValue()!=0){
					 throw new BusinessException("商业险已经案中结案，商业险本次赔付金额必须为0!", null);
				 }
			  }
		}
		this.saveObjAndHis(bicompensate, AcCompensateHis.class);
	}

	/**
	 * 
	 * @Title: doSaveDeductcondList
	 * @Description: TODO(案件免赔暂存)
	 * @author 何颖
	 * @param deductcondList
	 * @param theftdeductcondList
	 * @param biAccompensate
	 * @return void
	 * @throws
	 * @date 2012-11-6 下午03:32:44
	 */
	public List<AcDeductcond> doInitDeductcondList(List<AcDeductcond> deductcondList, List<AcDeductcond> theftdeductcondList,
			AcCompensate biAccompensate) {
		if (deductcondList != null) {
			for (int i = 0; i < deductcondList.size(); i++) {
				theftdeductcondList.add(deductcondList.get(i));
			}
		}
		List<AcDeductcond> deductcondLists = initDeductconds(theftdeductcondList, biAccompensate);
		return deductcondLists;

	}

	/**
	 * 
	 * @Title: toAcDeductcond
	 * @Description: TODO(免赔条件)
	 * @author 何颖
	 * @param acDeductcond
	 * @param biAccompensate
	 * @return
	 * @return AcDeductcond
	 * @throws
	 * @date 2012-11-6 下午03:32:37
	 */
	public List<AcDeductcond> initDeductconds(List<AcDeductcond> deductconds, AcCompensate biAccompensate) {
		List<AcDeductcond> deductcondList = new ArrayList<AcDeductcond>();
		for (int i = 0; i < deductconds.size(); i++) {
			AcDeductcond deductcond = deductconds.get(i);
			if (deductcond.getIsSelected() == null) {
				deductcond.setIsSelected(DataDictionary.NO);
			}
			deductcond.setAcCompensate(biAccompensate);
			deductcond.setCompensateNo(biAccompensate.getCompensateNo());
			deductcond.setReportNo(biAccompensate.getReportNo());
			deductcond.setPolicyNo(biAccompensate.getPolicyNo());
			deductcond.setClaimNo(biAccompensate.getClaimNo());
			deductcondList.add(deductcond);
		}
		return deductcondList;
	}

	/**
	 * @Title: doInitChargeList
	 * @Description: TODO(赋值accharge)
	 * @author 莫浩锋
	 * @param bichargeList
	 * @param bicompensate
	 * @return
	 * @return List<AcCharge>
	 * @throws
	 * @date Nov 24, 2012 4:53:47 PM
	 */
	private List<AcCharge> doInitChargeList(List<AcCharge> acChargeList, AcCompensate compensate) {
		List<AcCharge> chargeList = new ArrayList<AcCharge>();
		for (AcCharge accharge : acChargeList) {
			if (accharge == null) {
				continue;
			}
			if (accharge.getId() != null) {
				for (AcCharge charge : compensate.getAcCharges()) {
					if (charge.getId() == accharge.getId()) {
						accharge.setInputDate(charge.getInputDate());
					}
				}
			} else {
				accharge.setInputDate(new Date());
				accharge.setReportNo(compensate.getReportNo());
				accharge.setCompensateNo(compensate.getCompensateNo());
				accharge.setPolicyNo(compensate.getPolicyNo());
				accharge.setClaimNo(compensate.getClaimNo());
				accharge.setRiskCode(compensate.getRiskCode());
				accharge.setCurrency(DataDictionary.CURRENCY_CNY);
			}
			accharge.setRejectAmount(accharge.getRejectAmount() != null ? accharge.getRejectAmount() : 0.0);
			accharge.setSumRealPayAmount(CommonMethod.doubleRound_Down(accharge.getChargeAmount() - accharge.getPreChargeFee()));
			chargeList.add(accharge);
		}
		return chargeList;
	}

	/**
	 * @Title: findBpmMainList
	 * @Description: TODO(获取工作流List)
	 * @author 莫浩锋
	 * @param reportNo
	 * @return
	 * @return List<ACBpmMain>
	 * @throws
	 * @date Dec 10, 2012 8:55:59 PM
	 */
	public List<ACBpmMain> findBpmMainList(String reportNo) {
		List<ACBpmMain> bpmMainList;
		bpmMainList = acBpmMainService.findBpmMainListByReportNo(reportNo);
		if (bpmMainList != null) {
			return bpmMainList;
		}
		throw new BusinessException("找不到工作流数据", null);
	}

	/**
	 * @Title: findTraCompensateByTaskId
	 * @Description: TODO(查询交强理算书)
	 * @author 莫浩锋
	 * @param bpmMainList
	 * @param acCompensateTraffList
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Oct 10, 2012 10:34:33 AM
	 */
	public List<AcCompensate> findCiCompensateByReportNo(List<ACBpmMain> bpmMainList) {
		List<AcCompensate> acCompensateTraffList = new ArrayList<AcCompensate>();
		for (ACBpmMain aCBpmMain : bpmMainList) {
			if (BpmConstants.CICOMPENSATE_NODEID.equals(aCBpmMain.getNodeId())) {
				acCompensateTraffList = this.findCiAccompensate(aCBpmMain);
			}
		}
		return acCompensateTraffList;
	}

	/**
	 * @Title: findBiCompensateByTaskId
	 * @Description: TODO(查询商业理算书)
	 * @author 莫浩锋
	 * @param bpmMainList
	 * @param acCompensateBiList
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Oct 10, 2012 10:34:53 AM
	 */
	public List<AcCompensate> findBiCompensateByReportNo(List<ACBpmMain> bpmMainList) {
		List<AcCompensate> acCompensateBiList = new ArrayList<AcCompensate>();
		for (ACBpmMain aCBpmMain : bpmMainList) {
			if (BpmConstants.BICOMPENSATE_NODEID.equals(aCBpmMain.getNodeId())) {
				acCompensateBiList = this.findBiAccompensate(aCBpmMain);
			}
		}
		return acCompensateBiList;
	}

	/**
	 * @Title: findBiCompensateByPayFlag
	 * @Description: TODO(查询交强退回理算书)
	 * @author 莫浩锋
	 * @param bpmMainList
	 * @param acCompensateBiList
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Oct 10, 2012 10:47:00 AM
	 */
	public List<AcCompensate> findTraCompensateByPayFlag(List<ACBpmMain> bpmMainList, List<AcCompensate> acCompensateTraffList) {
		for (ACBpmMain aCBpmMain : bpmMainList) {
			if (BpmConstants.CICOMPENSATE_NODEID.equals(aCBpmMain.getNodeId())) {
				acCompensateTraffList = this.findTracompensateByUnderWriteFlag(aCBpmMain);
				if (acCompensateTraffList.size() > 0) {
					acCompensateTraffList.get(0).setTaskId(aCBpmMain.getTaskId());
				}
			}
		}
		return acCompensateTraffList;
	}

	/**
	 * @Title: findAcCompensateByPayFlag
	 * @Description: TODO(查询商业退回计算书)
	 * @author 莫浩锋
	 * @param bpmMainList
	 * @param acCompensateTraffList
	 * @param acCompensateBiList
	 * @return void
	 * @throws
	 * @date Oct 9, 2012 3:35:06 PM
	 */
	public List<AcCompensate> findBiCompensateByPayFlag(List<ACBpmMain> bpmMainList, List<AcCompensate> acCompensateBiList) {
		for (ACBpmMain aCBpmMain : bpmMainList) {
			if (BpmConstants.BICOMPENSATE_NODEID.equals(aCBpmMain.getNodeId())) {
				acCompensateBiList = this.findBicompensateByUnderWriteFlag(aCBpmMain);
				if (acCompensateBiList.size() > 0) {
					acCompensateBiList.get(0).setTaskId(aCBpmMain.getTaskId());
				}
			}
		}
		return acCompensateBiList;
	}

	/**
	 * @Title: findBicompensateByUnderWriteFlag
	 * @Description: TODO(查询商业退回信息)
	 * @author 莫浩锋
	 * @param bpmMain
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Oct 9, 2012 3:58:15 PM
	 */
	private List<AcCompensate> findBicompensateByUnderWriteFlag(ACBpmMain bpmMain) {
		String hql = " from AcCompensate where underWriteFlag =? and reportNo =? and riskCode =? ";
		return this.findAllByHql(hql, bpmMain.getReportNo(), DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_RETURN, DataDictionary.RISKCODE_CI);
	}

	/**
	 * @Title: findTracompensateByUnderWriteFlag
	 * @Description: TODO(查询交强退回信息)
	 * @author 莫浩锋
	 * @param bpmMain
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Oct 9, 2012 3:58:17 PM
	 */
	private List<AcCompensate> findTracompensateByUnderWriteFlag(ACBpmMain bpmMain) {
		AcClaim biClaim = claimService.findBiClaimNoByReportNo(bpmMain.getReportNo());
		String hql = " from AcCompensate where underWriteFlag =? and reportNo = ? and riskCode =? ";
		return this.findByHql(hql, bpmMain.getReportNo(), DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_RETURN, biClaim.getRiskCode());
	}

	/**
	 * @Title: findTrafficAccompensateByTaskId
	 * @Description: TODO(查找交强理算书)
	 * @author 莫浩锋
	 * @param taskId
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Oct 9, 2012 2:26:38 PM
	 */
	private List<AcCompensate> findCiAccompensate(ACBpmMain aCBpmMain) {
		String hql = " from AcCompensate where riskCode =? and reportNo =? and underwriteflag not in ('5','6') ";
		List<AcCompensate> compensateList = this.findByHql(hql, DataDictionary.RISKCODE_CI, aCBpmMain.getReportNo());
		if (compensateList == null) {
			return new ArrayList<AcCompensate>();
		}
		return compensateList;
	}

	/**
	 * @Title: findBiAccompensateByReportNo
	 * @Description: TODO(查找商业理算书)
	 * @author 莫浩锋
	 * @param taskId
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Oct 9, 2012 2:32:19 PM
	 */
	private List<AcCompensate> findBiAccompensate(ACBpmMain aCBpmMain) {
		String hql = " from AcCompensate where riskCode <> ? and reportNo =? and underwriteflag not in ('5','6')";
		List<AcCompensate> compensateList = this.findAllByHql(hql, DataDictionary.RISKCODE_CI, aCBpmMain.getReportNo());
		if (compensateList == null) {
			return new ArrayList<AcCompensate>();
		}
		return compensateList;
	}

	/**
	 * @Title: submitUnderwrite
	 * @Description: TODO(提交核赔关闭理算工作流)
	 * @author 莫浩锋
	 * @param bpmMainList
	 * @return void
	 * @throws
	 * @date Oct 9, 2012 8:07:29 PM
	 */
	public void submitUnderwrite(List<AcDeductcond> deductcondList, List<AcDeductcond> theftdeductcondList, List<ACBpmMain> bpmMainList,
			String reportNo, AcCompensate saveBiAccompensate, AcCompensate saveTrafficAccompensate, List<AcpayItemVo> bivoList,
			List<AcpayItemVo> travoList, List<AcpayItemVo> travoNoDutyList, List<AcCharge> bichargeList, List<AcCharge> trachargeList,
			AcPayInfoVo caseacpayinfo, List<AcLossBill> acLossBillList, String subCompensateFlag) {
		//如果存在核赔，理算提交必须同步核赔信息
		QueryRule qr=QueryRule.getInstance();
		qr.addEqual("reportNo", reportNo);
		AcSurvey survey = surveyService.findAcSurveyByReportNo(reportNo);
		AcReport acReport = reportService.findByReportNo(reportNo);
		if("8".equals(acReport.getWeFlag())){//河南快处快赔
			boolean isValidateDef = true;//是否验证认可定损
			if((saveBiAccompensate!=null&&"1".equals(saveBiAccompensate.getZeroFlag()))||(saveTrafficAccompensate!=null&&"1".equals(saveTrafficAccompensate.getZeroFlag()))){//商业零赔或交强零赔
				isValidateDef=false;
				survey.setIsQualifyFlag("0");
				acReport.setIsonLineDefLoss("0");//线下定损
				this.save(survey);
				this.save(acReport);
			}
			if("1".equals(acReport.getIsonLineDefLoss())&&!"1".equals(survey.getIsQualifyFlag())&&isValidateDef){
				throw new BusinessException("快处快赔没有认可定损，不能提交!", null);
			}
		}
		List<ACBpmMain> bpmList = acBpmMainService.findACBpmMainByReportNo(reportNo, "02", BpmConstants.COLLEGIATEAPPLY, 
				BpmConstants.COLLEGIATEAUDIT, BpmConstants.COLLEGIATESUBLEADERAUDIT, BpmConstants.COLLEGIATESUPPERCOMAUDIT, 
				BpmConstants.COLLEGIATEMAUDIT);
		if(bpmList != null && bpmList.size() > 0){
			throw new BusinessException("有合议流程未处理完成，理算不能提交!", null);
		}
		List<AcUnderWrite> acUnderWrites=this.find(AcUnderWrite.class,qr);
		if(acUnderWrites!=null&&!acUnderWrites.isEmpty()){
			for (int i = 0; i < acUnderWrites.size(); i++) {
				AcUnderWrite acUnderWrite=acUnderWrites.get(i);
				if("0507".equals(acUnderWrite.getRiskCode())){
					if(saveTrafficAccompensate!=null && ("0".equals(subCompensateFlag) || "1".equals(subCompensateFlag))){
						acUnderWrite.setRecoveryCode1(saveTrafficAccompensate.getRecoveryCode1());
						acUnderWrite.setReplevyCaseTypeCode(saveTrafficAccompensate.getReplevyCaseTypeCode());
						acUnderWrite.setReplevyCaseTypeName(saveTrafficAccompensate.getReplevyCaseTypeName());
						acUnderWrite.setRecoveryFlag(saveTrafficAccompensate.getRecoveryFlag());
						acUnderWrite.setReplevyQyMoney(saveTrafficAccompensate.getReplevyQyMoney());
						acUnderWrite.setReplevyType(saveTrafficAccompensate.getReplevyType());
						acUnderWrite.setReplevyWay(saveTrafficAccompensate.getReplevyWay());
					}
				}else{
					if(saveBiAccompensate!=null && ("0".equals(subCompensateFlag) || "2".equals(subCompensateFlag))){
						acUnderWrite.setRecoveryCode1(saveBiAccompensate.getRecoveryCode1());
						acUnderWrite.setReplevyCaseTypeCode(saveBiAccompensate.getReplevyCaseTypeCode());
						acUnderWrite.setReplevyCaseTypeName(saveBiAccompensate.getReplevyCaseTypeName());
						acUnderWrite.setRecoveryFlag(saveBiAccompensate.getRecoveryFlag());
						acUnderWrite.setReplevyQyMoney(saveBiAccompensate.getReplevyQyMoney());
						acUnderWrite.setReplevyType(saveBiAccompensate.getReplevyType());
						acUnderWrite.setReplevyWay(saveBiAccompensate.getReplevyWay());
					}
				}
				this.save(acUnderWrite);
			}
		}
		//FLEXREQUIRE-290新车险理赔系统公估费校验
		boolean  surveyFlag=false;
		AcReport acRpoert = reportService.findByReportNo(reportNo);
		boolean isThirdRiskSysFlag = false;//判断经过第三方风险系统
		if("1".equals(acRpoert.getIsThirdRiskSysFlag()) && caseacpayinfo.getSummarydutypay() > 0.05){
			isThirdRiskSysFlag = true;
		}
		boolean videoSurveyUpImgFlag = false;
		if("1".equals(acReport.getVideoSurveyUpImgFlag())&& caseacpayinfo.getSummarydutypay() > 0.05){
			videoSurveyUpImgFlag = true;
		}
		Double sumChargeFee105 = 0.0;
		Double sumChargeFee104 = 0.0;
		for(AcCharge bcharge:bichargeList){
			if(DataDictionary.CHARGECODE_105.equals(bcharge.getChargeCode())){
				sumChargeFee105 += bcharge.getSumRealPayAmount()!=null?bcharge.getSumRealPayAmount():0.0;
			}
			if(DataDictionary.CHARGECODE_104.equals(bcharge.getChargeCode())){
				sumChargeFee104 += bcharge.getSumRealPayAmount()!=null?bcharge.getSumRealPayAmount():0.0;
			}
			if(bcharge!=null&&(DataDictionary.CHARGECODE_101.equals(bcharge.getChargeCode())||DataDictionary.CHARGECODE_103.equals(bcharge.getChargeCode()))
					&&bcharge.getChargeAmount()!=null&&bcharge.getChargeAmount().doubleValue()!=0){
				surveyFlag=true;
			}
		}
		for(AcCharge ccharge:trachargeList){
			if(DataDictionary.CHARGECODE_105.equals(ccharge.getChargeCode())){
				sumChargeFee105 += ccharge.getSumRealPayAmount()!=null?ccharge.getSumRealPayAmount():0.0;
			}
			if(DataDictionary.CHARGECODE_104.equals(ccharge.getChargeCode())){
				sumChargeFee104 += ccharge.getSumRealPayAmount()!=null?ccharge.getSumRealPayAmount():0.0;
			}
			if(ccharge!=null&&(DataDictionary.CHARGECODE_101.equals(ccharge.getChargeCode())||DataDictionary.CHARGECODE_103.equals(ccharge.getChargeCode()))
					&&ccharge.getChargeAmount()!=null&&ccharge.getChargeAmount().doubleValue()!=0){
				surveyFlag=true;
			}
		}
		
		if(isThirdRiskSysFlag){
			//校验提前支付 反欺诈检测费
			List<AcPrepayCharge> acPrepayChargeList = prePayService.findAcprepayChargeByReportNo(reportNo);
			if(acPrepayChargeList != null && acPrepayChargeList.size() > 0){
				for (AcPrepayCharge acPrepayCharge : acPrepayChargeList) {
					if(DataDictionary.CHARGECODE_105.equals(acPrepayCharge.getChargeCode())){
						sumChargeFee105 += acPrepayCharge.getChargeAmount()!=null?acPrepayCharge.getChargeAmount():0.0;
					}
				}
			}
			List<AcClaimRejectCharge> rejectCharges = rejectPayService.findAllRejectCharges(reportNo);
			if(rejectCharges != null && rejectCharges.size() > 0){
				for (AcClaimRejectCharge rejectCharge : rejectCharges) {
					if(DataDictionary.CHARGECODE_105.equals(rejectCharge.getChargeCode())){
						sumChargeFee105 += rejectCharge.getChargeAmount()!=null?rejectCharge.getChargeAmount():0.0;
					}
				}
			}
			if(sumChargeFee105.compareTo(5.0) != 0){
				throw new BusinessException("经过风险系统的案件，需要支付一笔5元反欺诈检测费，不能提交!", null);
			}
		}
		if(videoSurveyUpImgFlag){
			//校验提前支付 反欺诈检测费
			List<AcPrepayCharge> acPrepayChargeList = prePayService.findAcprepayChargeByReportNo(reportNo);
			if(acPrepayChargeList != null && acPrepayChargeList.size() > 0){
				for (AcPrepayCharge acPrepayCharge : acPrepayChargeList) {
					if(DataDictionary.CHARGECODE_104.equals(acPrepayCharge.getChargeCode())){
						sumChargeFee104 += acPrepayCharge.getChargeAmount()!=null?acPrepayCharge.getChargeAmount():0.0;
					}
				}
			}
			List<AcClaimRejectCharge> rejectCharges = rejectPayService.findAllRejectCharges(reportNo);
			if(rejectCharges != null && rejectCharges.size() > 0){
				for (AcClaimRejectCharge rejectCharge : rejectCharges) {
					if(DataDictionary.CHARGECODE_104.equals(rejectCharge.getChargeCode())){
						sumChargeFee104 += rejectCharge.getChargeAmount()!=null?rejectCharge.getChargeAmount():0.0;
					}
				}
			}
			if(sumChargeFee104 <= 0){
				throw new BusinessException("移动视频系统已上传图片，需要支付一笔移动视频查勘费，不能提交!", null);
			}
		}
		if(surveyFlag && survey!=null){
			if("1".equals(acReport.getIsZeroEndCase())){
				 if(survey.getIsPublicEstimate()==null || "0".equals(survey.getIsPublicEstimate())){
					 survey.setIsPublicEstimate("1");
					 this.save(survey);
				 }
			}else{
				/*if(survey.getIsPublicEstimate()==null ||"0".equals(survey.getIsPublicEstimate())){
					throw new BusinessException("直接理赔费用含有公估费或者代查勘费，查勘页面是否公估为否，不能提交!", null);
				}*/
			}
		}
		//end FLEXREQUIRE-290新车险理赔系统公估费校验
		
		// ）当定损修理厂代码或理算修理厂代码上传BJ000000时，赔款总金额（案件）不大于公司备案的快赔限额,请核实!快赔限额为：3000
		List<AcCarDefLoss> carDefLossList = carLossService.findAllAcCarDefLossByReportNo(reportNo);
		for (AcCarDefLoss carDefLoss : carDefLossList) {
			if ("BJ000000".equals(carDefLoss.getRepairFactoryCode())) {
				if (caseacpayinfo.getSummarydutypay() > 3000.0) {
					throw new BusinessException("赔款超过快赔限额3000，不能提交!", null);
				}
			}
		}

		// 赔款超过一万，客户信息需要补充完整
		if (caseacpayinfo.getSummarydutypay() >= 10000.0) {
			this.checkCustomerPerInfo(reportNo);
		}

		// 保存理算数据
		if("1".equals(subCompensateFlag)){
			if(saveBiAccompensate != null && 
					!(DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_PASS.equals(saveBiAccompensate.getUnderWriteFlag())
					|| DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_AUTOPASS.equals(saveBiAccompensate.getUnderWriteFlag())
					|| DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_WAIT_VERFYPAY.equals(saveBiAccompensate.getUnderWriteFlag()))){
				initAcCompensate(saveBiAccompensate);
			}
			doSaveAdjustmentHis(deductcondList, theftdeductcondList, null, saveTrafficAccompensate, bivoList, travoList,
					travoNoDutyList, bichargeList, trachargeList, acLossBillList);
		}else if("2".equals(subCompensateFlag)){
			if(saveTrafficAccompensate != null && 
					!(DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_PASS.equals(saveTrafficAccompensate.getUnderWriteFlag())
					|| DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_AUTOPASS.equals(saveTrafficAccompensate.getUnderWriteFlag())
					|| DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_WAIT_VERFYPAY.equals(saveTrafficAccompensate.getUnderWriteFlag()))){
				initAcCompensate(saveTrafficAccompensate);
			}
			doSaveAdjustmentHis(deductcondList, theftdeductcondList, saveBiAccompensate, null, bivoList, travoList,
					travoNoDutyList, bichargeList, trachargeList, acLossBillList);
			
		}else{
			doSaveAdjustmentHis(deductcondList, theftdeductcondList, saveBiAccompensate, saveTrafficAccompensate, bivoList, travoList,
					travoNoDutyList, bichargeList, trachargeList, acLossBillList);
		}
		// 自动保存拆分
		List<AcPayPerson> acpayPeson = paymentInfoService.findAllpersonInfo(reportNo);
		List<AcPaymentInfo> acPaymentInfoList =  paymentInfoService.findAcpaymentinfo(reportNo);
		//校验收款人信息是否完整
		commonService.checkPayPerson(acPaymentInfoList);
		if (acpayPeson.size() > 0 && acPaymentInfoList.isEmpty() ) {
//			commonService.checkAllPayPerson(acpayPeson);
			this.autoPayeeSplitInfo(saveTrafficAccompensate, saveBiAccompensate, reportNo, acpayPeson);
		}
		
		//验证理算的直接理赔费金额用不能少于已提前支付的费用
		List<AcPrepay> prepayList = prePayService.findPrepayByValidClaim(reportNo);
		this.checkChargeFee(prepayList, trachargeList, bichargeList);

		// 验证金额 拆分金额是否正确
		String ciCompersateNo = "";
		String biCompersateNo = "";
		if (saveTrafficAccompensate != null) {
			ciCompersateNo = saveTrafficAccompensate.getCompensateNo();
		}
		if (saveBiAccompensate != null) {
			biCompersateNo = saveBiAccompensate.getCompensateNo();
		}
		List<AcCompensate> compensateNoList = this.findCompensateByCompensateNo(ciCompersateNo, biCompersateNo);
		for (AcCompensate compensate : compensateNoList) {
			//add by likuifu   20160610    LBUG-823  存在提前支付的案件，理算需要严格控制零结案不能存在支付拆分信息及负数拆分信息
			if(compensate.getSumThisDutyPaid()<0.0||compensate.getSumThisPaidFee()<0.0){
				throw new BusinessException("赔款或者费用金额不能小于0，请确认!", false);
			}
			
			List<AcPaymentInfo> acPaymentInfos = paymentInfoService.findAcPaymentInfo(compensate.getCompensateNo());
			paymentInfoService.isExistPaymentInfosub(acPaymentInfos);
			//add by likuifu  20141105 FLEXFORMAL-220 关于提前支付未进行零拆，造成收付费系统不能进行预赔转销问题     Begin
			//判断是否存在提前支付未支付拆分信息，未支付拆分则自动零拆分
			boolean prepayIsPaymentinfo = this.checkPrepayIsPaymentinfo(compensate);
			if(!prepayIsPaymentinfo){
				if (acpayPeson.size() > 0) {
					if(DataDictionary.RISKCODE_CI.equals(compensate.getRiskCode())){//交强存在提前支付，但没有支付拆分信息
						this.autoPayeeSplitInfo(compensate, null, reportNo, acpayPeson);
					}else{//商业险存在提前支付，但没有支付拆分信息
						this.autoPayeeSplitInfo(null, compensate, reportNo, acpayPeson);
					}
				}else{
					throw new BusinessException("存在提前支付赔款或者费用，未支付拆分或支付拆分有误，请重新拆分!", false);
				}
			}else{
				//增加判断存在提前支付，但直接理赔费用非0，赔款为0的情况判断    20150302  by likuifu  begin
				boolean prepayIsPaymentinfo1 = this.checkPrepayIsPaidinfo(compensate);
				if(!prepayIsPaymentinfo1){
					throw new BusinessException("存在提前支付赔款或者费用，未支付拆分或支付拆分有误，请重新拆分!", false);
				}
				//增加判断存在提前支付，但直接理赔费用非0，赔款为0的情况判断    20150302 by likuifu end
			}
			//add by likuifu  20141105 FLEXFORMAL-220 关于提前支付未进行零拆，造成收付费系统不能进行预赔转销问题       END
			boolean ispayinfo = underWriteService.checkUnderPaymentInfo(compensate.getCompensateNo());
			if (!ispayinfo) {
				throw new BusinessException("计算书号："+compensate.getCompensateNo()+"，理算拆分金额有误，请重新拆分!", false);
			}
			//判断CertiType是否正确，避免垫付案件和正常案件切换导致CertiType错误    add by  likuifu  20140904  BEGIN
			if(DataDictionary.RISKCODE_CI.equals(compensate.getRiskCode())){
				QueryRule queryRule = QueryRule.getInstance();
				queryRule.addEqual("certiNo", compensate.getCompensateNo());
				List<AcPaymentInfo> paymentinfo =this.find(AcPaymentInfo.class, queryRule);
				if(!paymentinfo.isEmpty()){
					boolean checkAdvance =false;
					for(AcPaymentInfo  ac :paymentinfo ){
						if("1".equals(compensate.getIsAdvance())&&!DataDictionary.PAYMENTINFO_CERTITYPE_D.equals(ac.getCertiType())){//垫付案件，但CertiType为非垫付标志位
							ac.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_D); 
							checkAdvance = true;
						}else if((compensate.getIsAdvance()==null ||"0".equals(compensate.getIsAdvance())) 
								&& DataDictionary.PAYMENTINFO_CERTITYPE_D.equals(ac.getCertiType())){//非垫付案件，但CertiType为垫付标志位
							ac.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_C); 
							checkAdvance = true;
						}
					}
					if(checkAdvance){
						this.saveAll(paymentinfo);
					}
				}
			}
			//判断CertiType是否正确，避免垫付案件和正常案件切换导致CertiType错误    add by  likuifu  20140904  END
			//调整直接理赔费用“推送费控标志”一致 start
			if(acPaymentInfos!=null && !acPaymentInfos.isEmpty()){
				List<AcCharge> chargeList = this.findAcChargeListByReportNo(reportNo,compensate.getCompensateNo());
				boolean pushtofeeflag =false;//推送费控标志
				Map<String, String> pushtofeeflagMap = new HashMap<String, String>();
				for(AcCharge acCharge: chargeList){
					if(pushtofeeflagMap.keySet().contains(acCharge.getChargeCode())){
						String pushtofeeflagtmp = pushtofeeflagMap.get(acCharge.getChargeCode());
						if(pushtofeeflagtmp!=null &&pushtofeeflagtmp.equals("1")){
							continue;
						}
					}
					pushtofeeflagMap.put(acCharge.getChargeCode(), acCharge.getPushtofeeflag());
				}
				for(AcPaymentInfo acPaymentInfo : acPaymentInfos){
					if(pushtofeeflagMap.keySet().contains(acPaymentInfo.getChargeCode())){
						String pushtofeeflagtmp = pushtofeeflagMap.get(acPaymentInfo.getChargeCode());
						if(pushtofeeflagtmp==null){
							if(acPaymentInfo.getPushtofeeflag()!=null){
								acPaymentInfo.setPushtofeeflag(null);
								pushtofeeflag =true;
							}
						}else if(!pushtofeeflagtmp.equals(acPaymentInfo.getPushtofeeflag())){
							acPaymentInfo.setPushtofeeflag(pushtofeeflagtmp);
							pushtofeeflag =true;
						}
					}
				}
				if(pushtofeeflag){
					this.saveAll(acPaymentInfos);
				}
			}
			//调整直接理赔费用“推送费控标志”一致 end
		}
		// 垫付逻辑判断
		if(survey.getIsAdvance()!=null && "1".equals(survey.getIsAdvance())){//垫付案件理算提交的时候需要校验损失信息
			for (AcCompensate compensate : compensateNoList) {
				if(compensate.getRiskCode()!=null && DataDictionary.RISKCODE_CI.equals(compensate.getRiskCode())){//垫付案件,只能交强险赔付医疗费
					List<AcLoss> aclossList =compensate.getAcLosses();
					List<AcPersonLoss> acPersonLossList =compensate.getAcPersonLosses();
					for(AcLoss acloss :aclossList){
						if(acloss.getSumRealpay()>0){
							throw new BusinessException("垫付案件,只能赔付医疗费，请确认!", false);
						}
					}
					for(AcPersonLoss acPersonLoss :acPersonLossList){
						if(!DataDictionary.ACPERSONLOSS_MEDICAL.equals(acPersonLoss.getFeeTypeCode()) && acPersonLoss.getSumRealpay()>0){
							throw new BusinessException("垫付案件,只能赔付医疗费，请确认!", false);
						}
					}
				}else{//确保商业险无损失
					if(compensate.getSumPaid()>0){
						throw new BusinessException("垫付案件,不允许赔付商业险，请确认!", false);
					}
				}
			}
		}

		// 获取当前报案号下的立案
		List<AcClaim> acClaims = claimService.findAcclaimByReportNo(reportNo);
		AcClaim ciAcClaim = null;
		AcClaim biAcClaim = null;
		for (AcClaim acClaim : acClaims) {
			if (acClaim != null && (acClaim.getRiskCode().equals(DataDictionary.RISKCODE_CI))) {
				ciAcClaim = acClaim;
			} else {
				biAcClaim = acClaim;
			}
		}
		// 获取风险等级
		//modify by duanshuyuan 20160420 REQ-2509 核损核赔功能修改  核赔等级规则修改
//		String calRiskGrade = commonService.callRiskGrade(acReport, null, CommonMethod.getComCode(), null, null, null,BpmConstants.COMPENSATE, null,null);
//		calRiskGrade = commonService.getVerifyPayRiskGrade(calRiskGrade, reportNo);
	
		// 核赔级别
		VerifyCalVo verifyVo = new VerifyCalVo();
		DealUserInfoVo dealUserInfoVo = new DealUserInfoVo();
		String cerifyPayGrade="";
				
		//判断是否满足自动核赔     20140402  FLEXREQUIRE-185  likuifu  add
		boolean autoUnderwriteFlag = false;//自动核赔标志位
		//modify by duanshuyuan REQ-2726 理赔系统优化  人工理算，商业、交强同时出险并赔款金额（不含费用）同时为0 begin 
		//零结案自动核赔
		if(!autoUnderwriteFlag){
			if("1".equals(acReport.getIsZeroEndCase())){
				autoUnderwriteFlag=true;
			}
		}
		
		Double sumClaim = 0.0;
		Boolean isCompensateZero = false;
		if(!autoUnderwriteFlag && caseacpayinfo.getSummarydutypay() == 0.0){
			//商业交强赔款同时为零的，取历史最大估损金额
			sumClaim = this.findMaxSumClaim(reportNo);
			String switchValue = commonService.findSwitchValue(DataDictionary.SWITCH_COMPENSATEZERO, DataDictionary.SuperComCode, null);
			if(switchValue!=null && !"".equals(switchValue) && sumClaim>Double.parseDouble(switchValue)){
				isCompensateZero = true;
			}
		}
		//modify by duanshuyuan REQ-2726 理赔系统优化  人工理算，商业、交强同时出险并赔款金额（不含费用）同时为0 end 
		if(!isCompensateZero && !autoUnderwriteFlag){
			
			autoUnderwriteFlag = this.checkAutoUnderwrite(compensateNoList);
			//自动核损规则标记
			AutoUnderWriteVo ruleVo=new AutoUnderWriteVo();
			
			if(!autoUnderwriteFlag){
				autoUnderwriteFlag=this.checkAutoGoodUser(compensateNoList, acReport,ruleVo);
			}
			if(!autoUnderwriteFlag){
				autoUnderwriteFlag=this.checkAutoSingleAccident(compensateNoList, acReport,ruleVo);//第二种情况：单方事故（含玻璃单独破碎、划痕险）
			}
			if(!autoUnderwriteFlag){
				autoUnderwriteFlag=this.checkAutoManyAccident(compensateNoList, acReport,ruleVo);//第三种情况：双方或多方事故（不含人伤）
			}
			if(!autoUnderwriteFlag){
				autoUnderwriteFlag=this.checkAutoPersonTra(compensateNoList, acReport,ruleVo);//第四种情况：交强险小额人伤赔案
			}
			if(!autoUnderwriteFlag){
				autoUnderwriteFlag=this.checkAutoSingleTra(compensateNoList, acReport,ruleVo);//第一种情况：单独交强险赔付类型赔案（不含人伤）
			}
		}
		
		if(autoUnderwriteFlag){
			// 满足自动核赔需要确认是否存在其他任务未完成
			boolean canUnderWreteFlag = commonService.isAllSpecialTaskFinishByComp(reportNo);
			if (!canUnderWreteFlag) {
				throw new BusinessException("满足自动核赔的案件，存在理算以外的任务未处理完成，不能理算提交，请先处理未完成任务后再提交自动核赔！", false);
			}
			cerifyPayGrade = "自动";
			dealUserInfoVo.setUserCode(DataDictionary.AUTO_VERIFYPAY);
			dealUserInfoVo.setUserName("自动核赔");
			dealUserInfoVo.setDealComCode(CommonMethod.getComCode());
		}else{
//			verifyVo.setRiskGrade(calRiskGrade);// 风险等级
			verifyVo.setDealComCode(CommonMethod.getComCode());// 处理机构
			verifyVo.setCurrGrade("");// 当前等级
			verifyVo.setSumDefLoss(caseacpayinfo.getSummarydutypay());// 总损失金额
			verifyVo.setSumDefFee(caseacpayinfo.getSummaryrealpay());// 总直接理赔费用
			verifyVo.setCurrDefLoss(caseacpayinfo.getSinglesumdutypay());// 当前任务损失金额
			verifyVo.setCurrDefFee(caseacpayinfo.getSinglesumrealpay());// 当前任务直接理赔费用
			verifyVo.setReportNo(reportNo) ;
			if(isCompensateZero){
				verifyVo.setSumDefLoss(sumClaim);// 总损失金额
			}
			//modify by duanshuyuan 2016.02.24 REQ-2509 核损核赔功能修改 begin
			//		add by jiangna 2013-12-23 分公司越级审核校验 begin
			//理算提交核赔
//			boolean isVerifyFlag = commonService.isVerifyBySuperCom(reportNo, BpmConstants.VERIFYPAY_NODEID) ;
//			if(isVerifyFlag){//越级，不需要分公司审核
//				verifyVo.setIsVerifyBySubCom(0) ;
//			}else{
//				verifyVo.setIsVerifyBySubCom(1) ;
//			}
			//add by jiangna 2013-12-23 分公司越级审核校验 end
//			verifyVo.setIsVerifyBySubCom(2);//不区分总分
			//分公司最高级
			String maxComGrade= commonService.obtainMaxLevelByComCode(verifyVo.getDealComCode(),BpmConstants.VERIFYPAY_NODEID);
			//任务等级
			cerifyPayGrade = commonService.calVerifyPayGrade(verifyVo);
			boolean isVerifyFlag = false;
			//分公司最高级小于任务等级 越级审核
			if(maxComGrade.compareTo(cerifyPayGrade)<0 || isCompensateZero){
				isVerifyFlag = true;
			}
			//modify by duanshuyuan 2016.02.24 REQ-2509 核损核赔功能修改 end
			/** ------------------获取任务处理人和机构----------------- */
			// 组织人员分配入参vo
			AllocationInfoVo allocationInfoVo = new AllocationInfoVo();
			// 报案号-必传：当前报案号
			allocationInfoVo.setReportNo(reportNo);
			// 下一个任务的节点nodeId-必传
			allocationInfoVo.setNodeId(BpmConstants.VERIFYPAY_NODEID);
			// 任务处理机构-必传：定损提交到核损时-传当前登录机构 核损提交到核损时-传总公司
			//update by jiangna 2013-12-29 越级审核(制定处理人) begin
			if(isVerifyFlag){
				allocationInfoVo.setTaskComCode(DataDictionary.SuperComCode) ;
			}else{
				allocationInfoVo.setTaskComCode(CommonMethod.getComCode());
			}
			//update by jiangna 2013-12-29 越级审核(制定处理人) end 
			// 承保机构和险种-必传：
			// 定损提交到核损时-从acbpmcaseinfo表中获取
			ACBpmCaseInfo acBpmCaseInfo = super.findUnique(ACBpmCaseInfo.class, "reportNo", reportNo);
			if (acBpmCaseInfo != null) {
				allocationInfoVo.setComCode(acBpmCaseInfo.getComCode());
				allocationInfoVo.setRiskCode(acBpmCaseInfo.getRiskCode());
			}
			// 任务性质-必传： 1:正常 2：退回后重新提交
			allocationInfoVo.setTaskNature("1");// 走正常流程
			allocationInfoVo.setTaskLevel(cerifyPayGrade);// 任务级别：有必传，无级别则不传
			// 其他扩展暂且不传
			dealUserInfoVo = commonService.obtainTaskDealUserInfo(allocationInfoVo);
		}

		// List<AcPaymentInfo> list = paymentInfoService.findAcpaymentinfo(reportNo);
		Long taskId1 = 0L,taskId2 = 0L;
		if(bpmMainList != null && bpmMainList.size() == 2){
			taskId1 = bpmMainList.get(0).getTaskId();
			taskId2 = bpmMainList.get(1).getTaskId();
		} else {
			taskId1 = bpmMainList.get(0).getTaskId();
		}
		
		for (ACBpmMain acBpmMain : bpmMainList) {
			if (acBpmMain.getNodeId().equals(BpmConstants.CICOMPENSATE_NODEID)) {
				if (acClaims.isEmpty() || ciAcClaim == null) {
					if (!BpmConstants.TASKSTATUS_1.equals(acBpmMain.getTaskStatus())) {
						bpmService.cancelTask(acBpmMain.getTaskId());
					}
					// 注销交强后删除对应的交强拆分数据
					// for (AcPaymentInfo paymentInfo : list) {
					// if
					// (DataDictionary.RISKCODE_CI.equals(paymentInfo.getRiskCode()))
					// {
					// paymentInfo.setAcPayPerson(null);
					// this.getHibernateTemplate().clear();
					// this.delete(paymentInfo);
					// }
					// }
				} else {
					// 检测是否核赔过
					commonService.checkACBpmMainData(acBpmMain.getTaskId());
					List<AcCompensate> traAcompensate = findCiAccompensate(acBpmMain);
					// 封装任务列表
					List<BpmTask> bpmTaskList = new ArrayList<BpmTask>();
					BpmTask bpmTask = new BpmTask();
					bpmTask.setReportNo(reportNo);
					bpmTask.setBusinessNo(traAcompensate.get(0).getCompensateNo());
					bpmTask.setFeeAmount(traAcompensate.get(0).getSumThisDutyPaid());
					bpmTask.setBusinessId(traAcompensate.get(0).getId());
					bpmTask.setPolicyFlag(DataDictionary.FLAG_1);
					bpmTask.setBusinessTable(DataDictionary.ACCOMPENSTATE);
					// 任务时效的核赔的预超时时间和超时时间
					TaskAgingVo time = taskAgingService.getTaskAgingCommon(BpmConstants.VERIFYPAY_NODEID, traAcompensate.get(0)
							.getSumThisDutyPaid(), dealUserInfoVo.getDealComCode());
					if(time.getPreAging()!=null){
						bpmTask.setOutTime(time.getAging());
						bpmTask.setPreOutTime(time.getPreAging());
					}
					bpmTask.setTaskType(BpmConstants.VERIFYPAY);
					bpmTask.setNodeId(BpmConstants.VERIFYPAY_NODEID);
					bpmTask.setParentNodeId(BpmConstants.CICOMPENSATE_NODEID);
					bpmTask.setHandler(dealUserInfoVo.getUserCode());
					bpmTask.setHandlerName(dealUserInfoVo.getUserName());
					bpmTask.setHandlerCom(dealUserInfoVo.getDealComCode());
					bpmTask.setTaskTitle("交强核赔");
					bpmTaskList.add(bpmTask);
					bpmService.setVariable(acBpmMain.getTaskId(), BpmConstants.TASKNAMEVAR, cerifyPayGrade + "=" + BpmConstants.VERIFYPAY);
					bpmService.setVariable(acBpmMain.getTaskId(), BpmConstants.ISVERIFYPAYOVERVAR, "");
					// 添加操作记录
					this.generateUnOperateRecordInfo(acBpmMain, traAcompensate.get(0), "理算完成", caseacpayinfo,taskId1,taskId2);
					/** ------------------获取任务处理人和机构----------------- */
					// 结束当前任务，开启下个工作流任务
					bpmService.endTask(acBpmMain.getTaskId(), "", dealUserInfoVo.getUserCode(), dealUserInfoVo.getDealComCode(),bpmTaskList);// 按模板走nodeName可以传""或null
				}
				commonService.saveCaseStatusInfo(acReport,BpmConstants.CICOMPENSATE_NODEID,acBpmMain.getHandlerCode(),acBpmMain.getHandlerComCode(),"1","1",null);
			}

			if (acBpmMain.getNodeId().equals(BpmConstants.BICOMPENSATE_NODEID)) {
				if (acClaims.isEmpty() || biAcClaim == null) {
					if (!BpmConstants.TASKSTATUS_1.equals(acBpmMain.getTaskStatus())) {
						bpmService.cancelTask(acBpmMain.getTaskId());
					}
					// 注销商业后删除对应的商业拆分数据
					// for (AcPaymentInfo paymentInfo : list) {
					// if
					// (!DataDictionary.RISKCODE_CI.equals(paymentInfo.getRiskCode()))
					// {
					// paymentInfo.setAcPayPerson(null);
					// this.getHibernateTemplate().clear();
					// this.delete(paymentInfo);
					// }
					// }
				} else {
					// 检测是否核赔过
					commonService.checkACBpmMainData(acBpmMain.getTaskId());
					List<AcCompensate> biAccompensate = findBiAccompensate(acBpmMain);
					// 封装任务列表
					List<BpmTask> bpmTaskList = new ArrayList<BpmTask>();
					BpmTask bpmTask = new BpmTask();
					bpmTask.setReportNo(reportNo);
					bpmTask.setBusinessNo(biAccompensate.get(0).getCompensateNo());
					bpmTask.setFeeAmount(biAccompensate.get(0).getSumThisDutyPaid());
					bpmTask.setBusinessId(biAccompensate.get(0).getId());
					bpmTask.setPolicyFlag(DataDictionary.FLAG_2);
					bpmTask.setBusinessTable(DataDictionary.ACCOMPENSTATE);
					// 任务时效核赔的预超时时间和超时时间
					TaskAgingVo time = taskAgingService.getTaskAgingCommon(BpmConstants.VERIFYPAY_NODEID, biAccompensate.get(0)
							.getSumThisDutyPaid(), dealUserInfoVo.getDealComCode());
					if(time.getPreAging()!=null){
						bpmTask.setOutTime(time.getAging());
						bpmTask.setPreOutTime(time.getPreAging());
					}
					bpmTask.setTaskType(BpmConstants.VERIFYPAY);
					bpmTask.setNodeId(BpmConstants.VERIFYPAY_NODEID);
					bpmTask.setParentNodeId(BpmConstants.BICOMPENSATE_NODEID);
					bpmTask.setHandler(dealUserInfoVo.getUserCode());
					bpmTask.setHandlerName(dealUserInfoVo.getUserName());
					bpmTask.setHandlerCom(dealUserInfoVo.getDealComCode());
					bpmTask.setTaskTitle("商业核赔");
					bpmTaskList.add(bpmTask);
					bpmService.setVariable(acBpmMain.getTaskId(), BpmConstants.TASKNAMEVAR, cerifyPayGrade + "=" + BpmConstants.VERIFYPAY);
					bpmService.setVariable(acBpmMain.getTaskId(), BpmConstants.ISVERIFYPAYOVERVAR, "");
					// 添加操作记录
					this.generateUnOperateRecordInfo(acBpmMain, biAccompensate.get(0), "理算完成", caseacpayinfo,taskId1,taskId2);

					/** ------------------获取任务处理人和机构----------------- */
					// 结束当前任务，开启下个工作流任务
					bpmService.endTask(acBpmMain.getTaskId(), "", dealUserInfoVo.getUserCode(), dealUserInfoVo.getDealComCode(),bpmTaskList);
					commonService.saveCaseStatusInfo(acReport,BpmConstants.BICOMPENSATE_NODEID, acBpmMain.getHandlerCode(),acBpmMain.getHandlerComCode(),"1","1",null);
				}
			}
		}
		commonService.saveCaseStatusInfo(acReport,BpmConstants.VERIFYPAY_NODEID, dealUserInfoVo.getUserCode(), dealUserInfoVo.getDealComCode(),"0","1",null);
		if(autoUnderwriteFlag){
			AcInterFace inter = new AcInterFace();
			inter.setReportNo(reportNo);
			//inter.setYwType(caseFlowCode);
			inter.setBusinessNo(reportNo);
			inter.setExecTimes(0);
			inter.setUpdateTime(DateTime.obtainCurrDateYMDHMS());
			inter.setValidFlag(DataDictionary.VALIDSTATUS_ACTIVE);
			inter.setInterType(BpmConstants.VERIFYPAY);			
			this.save(inter);
		}
		AcUnpaidCause acUnpaidCause = commonService.findAcUnpaidCause(reportNo);
		if(acUnpaidCause == null){
			acUnpaidCause = new AcUnpaidCause();
			acUnpaidCause.setReportNo(reportNo);
			acUnpaidCause.setD01("1");//案件审核过程中（含理算过程）核赔通过取消
		}
		acUnpaidCause.setF01(null);
		if(!acUnpaidCause.getAcUnpaidCauseSubs().isEmpty()){
			for (AcUnpaidCauseSub sub : acUnpaidCause.getAcUnpaidCauseSubs()) {
				if("1".equals(sub.getF01())){
					sub.setF01(null);
				}
			}
		}
		commonService.saveAcUnpaidCause(acUnpaidCause);
		
		//理算发起案件调查
//		FLEXREQUIRE-312自动核赔规则调整
//		this.compensateStartCaseSuvery(reportNo,saveTrafficAccompensate,saveBiAccompensate);
	}

	
	/**
	 * @Title: checkPrepayIsPaymentinfo
	 * @Description: TODO(判断存提前支付赔款或费用时，是否存在支付拆分信息)
	 * @author 李魁服
	 * @param compensate
	 * @return
	 * @return boolean false 为不存在支付拆分， true是存在支付拆分
	 * @throws
	 * @date 2014-11-5 下午7:31:04
	 */
	private boolean checkPrepayIsPaymentinfo(AcCompensate compensate){
		if(compensate.getSumThisPaidFee()==0 &&(compensate.getSumPrePaid()>0.0005 ||compensate.getMesnePayAmount()>0.0005||compensate.getPreSumChargeAmount()>0.0005)){
			QueryRule queryRule = QueryRule.getInstance();
			queryRule.addEqual("certiNo", compensate.getCompensateNo());
			List<AcPaymentInfo> paymentinfo =this.find(AcPaymentInfo.class, queryRule);
			if(paymentinfo.isEmpty()){
				return false; 
			}
		}
		return true;
	}
	
	/**
	 * @Title: checkPrepayIsPaymentinfo
	 * @Description: TODO(增加判断存在提前支付，但直接理赔费用非0，赔款为0的情况)
	 * @author 李魁服
	 * @param compensate
	 * @return
	 * @return boolean false 为不存在支付拆分， true是存在支付拆分
	 * @throws
	 * @date 2015-03-02 下午7:31:04
	 */
	private boolean checkPrepayIsPaidinfo(AcCompensate compensate){
		if(compensate.getSumThisDutyPaid()==0 &&(compensate.getSumPrePaid()>0.0005 ||compensate.getMesnePayAmount()>0.0005)){
			QueryRule queryRule = QueryRule.getInstance();
			queryRule.addEqual("certiNo", compensate.getCompensateNo());
			queryRule.addNotEqual("lossType", "02");
			List<AcPaymentInfo> paymentinfo =this.find(AcPaymentInfo.class, queryRule);
			if(paymentinfo.isEmpty()){
				return false; 
			}
		}
		return true;
	}

	private void checkChargeFee(List<AcPrepay> prepayList, List<AcCharge> ciCharge, List<AcCharge> biCharge) {
		Map<String, Double> resultMap = new HashMap<String, Double>();
		Map<String, Double> preChargeMap = new HashMap<String, Double>();
		for (AcCharge charge : ciCharge) {
			String resultStr = charge.getKindCode() + "_" + charge.getChargeCode();
			if (resultMap.keySet().contains(resultStr)) {
				resultMap.put(resultStr, resultMap.get(resultStr)+charge.getChargeAmount());
			} else {
				resultMap.put(resultStr, charge.getChargeAmount());
			}
		}
		
		for (AcCharge charge : biCharge) {
			String resultStr = charge.getKindCode() + "_" + charge.getChargeCode();
			if (resultMap.keySet().contains(resultStr)) {
				resultMap.put(resultStr, resultMap.get(resultStr)+charge.getChargeAmount());
			} else {
				resultMap.put(resultStr, charge.getChargeAmount());
			}
		}
		
		for (AcPrepay prepay : prepayList) {
			if (DataDictionary.PREPAYTYPE_YP_CODE.equals(prepay.getPrePayType())
					|| DataDictionary.PREPAYTYPE_ZP_CODE.equals(prepay.getPrePayType())
					|| DataDictionary.PREPAYTYPE_ZPBI_CODE.equals(prepay.getPrePayType())
					|| DataDictionary.PREPAYTYPE_ZPTRA_CODE.equals(prepay.getPrePayType())) {
				for (AcPrepayCharge preCharge : prepay.getAcPrepayCharges()) {
					String preChargeStr = preCharge.getKindCode() + "_" + preCharge.getChargeCode();
					if (preChargeMap.keySet().contains(preChargeStr)) {
						Double resultAmount = preChargeMap.get(preChargeStr) + preCharge.getChargeAmount();
						preChargeMap.put(preChargeStr, CommonMethod.doubleRound_Down(resultAmount));
					} else {
						preChargeMap.put(preChargeStr, preCharge.getChargeAmount());
					}
				}
			}
		}
		for (String kindAndChargeCode : preChargeMap.keySet()) {
			double preChargeAmount = preChargeMap.get(kindAndChargeCode);
			String[] strs = kindAndChargeCode.split("_");
			String kindCode = strs[0];
			String chargeCode = strs[1];
			String kindName = CommonMethod.findKindNameByKindCode(kindCode);
			String chargeName = commonService.obtainDicnameByTypeAndCode("ChargeCode", chargeCode);
			boolean isPass = false;
			for (String resultStr : resultMap.keySet()) {
				if(kindAndChargeCode.equals(resultStr)){
					double chargeAmount = resultMap.get(resultStr);
					if(preChargeAmount > chargeAmount){
						logger.debug("【"+kindName+"】下的【"+chargeName+"】金额，不能小于此类别的提前支付金额,提前支付金额"+preChargeAmount+"实赔金额::"+chargeAmount);
						throw new BusinessException("【"+kindName+"】下的【"+chargeName+"】金额，不能小于此类别的提前支付金额", null);
					}
					isPass = true;
				}
			}
			if(!isPass){
				throw new BusinessException("【"+kindName+"】下的【"+chargeName+"】已经提前支付，请检查理算是否存在此类别的直接理赔费用", null);
			}
		}
	}

	/**
	 * @Title: doSaveAdjustmentHis
	 * @Description: TODO(这里用一句话描述这个方法的作用)
	 * @author 任海周
	 * @param deductcondList
	 * @param theftdeductcondList
	 * @param saveBiAccompensate
	 * @param saveTrafficAccompensate
	 * @param bivoList
	 * @param travoList
	 * @param travoNoDutyList
	 * @param bichargeList
	 * @param trachargeList
	 * @param acLossBillList
	 * @return void
	 * @throws
	 * @date May 13, 2014 3:10:12 PM
	 */
	private void doSaveAdjustmentHis(List<AcDeductcond> deductcondList, List<AcDeductcond> theftdeductcondList, AcCompensate biAccompensate,
			AcCompensate trafficAccompensate, List<AcpayItemVo> bivoList, List<AcpayItemVo> travoList, List<AcpayItemVo> travoNoDutyList,
			List<AcCharge> bichargeList, List<AcCharge> trachargeList, List<AcLossBill> acLossBillList) {
		if (biAccompensate != null) {
			this.doSaveBICompensateAndHis(biAccompensate, bivoList, bichargeList, deductcondList, theftdeductcondList);
		}
		if (trafficAccompensate != null) {
			this.doSaveTraffiCompensateAndHis(trafficAccompensate, travoList, travoNoDutyList, trachargeList);
		}
		this.saveAcLossBillInfo(acLossBillList);
	}

	/**
	 * @Title: checkAutoUnderwrite
	 * @Description: TODO(判断是否满足自动核赔)
	 * @author 李魁服
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @throws
	 * @date 2014-4-2 下午7:42:14
	 */
	private boolean checkAutoUnderwrite(List<AcCompensate> compensateNoList) {
		boolean autoUnderwriteFlag = false;
		Double sumpaid = 0.0;
		Double sumchargeFee = 0.0;// 公估费和代查勘费汇总
		Double otherchargeFee = 0.0;
		for (AcCompensate acCompensate : compensateNoList) {
			sumpaid += acCompensate.getSumDutyPaid();
			for (AcCharge charge : acCompensate.getAcCharges()) {
				if (DataDictionary.CHARGECODE_101.equals(charge.getChargeCode()) || DataDictionary.CHARGECODE_103.equals(charge.getChargeCode())) {
					sumchargeFee += charge.getChargeAmount();
				} else {
					otherchargeFee += charge.getChargeAmount();
				}
			}
		}
		if (CommonMethod.doubleRound_Down(sumpaid) < 0.005 && CommonMethod.doubleRound_Down(otherchargeFee) < 0.005
				&& CommonMethod.doubleRound_Down(sumchargeFee) <= 500.0) {
			autoUnderwriteFlag = true;
		}
		return autoUnderwriteFlag;
	}
	
	
	/**
	 * @Title: findCompensateByCompensateNo
	 * @Description: TODO(计算书号查询理算信息)
	 * @author 莫浩锋
	 * @param compensateNo
	 * @param compensateNo2
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Apr 18, 2013 10:22:54 AM
	 */
	private List<AcCompensate> findCompensateByCompensateNo(String ciCompensateNo, String biCompensateNo) {
		String hql = "from AcCompensate where compensateNo in (?,?)";
		List<AcCompensate> compensateList = this.findByHql(hql, ciCompensateNo, biCompensateNo);
		return compensateList;
	}

	/**
	 * @Title: checkCustomerPerInfo
	 * @Description: TODO(赔款风险控制)
	 * @author 莫浩锋
	 * @param reportNo
	 * @return void
	 * @throws
	 * @date Mar 11, 2013 5:02:06 PM
	 */
	public void checkCustomerPerInfo(String reportNo) {
		QueryRule caserule = QueryRule.getInstance();
		caserule.addEqual("reportNo", reportNo);
		ACBpmCaseInfo caseInfo = this.findUnique(ACBpmCaseInfo.class, caserule);
		String hql = "from AclcInsured where reportno =? and InsuredFlag =? and PolicyNo=?";
		List<AclcInsured> lcInsuredList = this.findByHql(hql, reportNo, DataDictionary.FLAG_1, caseInfo.getPolicyNo());
		if (lcInsuredList.size() > 0) {
			XmlInterface xmlInterface = new XmlInterface();
			if (DataDictionary.FLAG_1.equals(lcInsuredList.get(0).getInsuredType())) {
				QueryRule queryRule = QueryRule.getInstance();
				queryRule.addEqual("reportNo", reportNo);
				AcCustomerPerInfo customerPerInfo = this.findUnique(AcCustomerPerInfo.class, queryRule);

				if (customerPerInfo == null) {
					throw new BusinessException("赔款超过一万，客户信息需要补充完整!", null);
				}
				try {
					String str = xmlInterface.existsIsNotNullByCustomer(customerPerInfo, "");
					if (!"".equals(str)) {
						throw new BusinessException("赔款超过一万，客户信息需要补充完整!", null);
					}

				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}

			if (DataDictionary.FLAG_2.equals(lcInsuredList.get(0).getInsuredType())) {
				QueryRule queryRule = QueryRule.getInstance();
				queryRule.addEqual("reportNo", reportNo);
				AcCustomerGroupInfo customerGroupInfo = this.findUnique(AcCustomerGroupInfo.class, queryRule);
				if (customerGroupInfo == null) {
					throw new BusinessException("赔款超过一万，客户信息需要补充完整!", null);
				}
				try {
					String str = xmlInterface.existsIsNotNullByCustomer(customerGroupInfo, "");
					if (!"".equals(str)) {
						throw new BusinessException("赔款超过一万，客户信息需要补充完整!", null);
					}

				} catch (IllegalArgumentException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * @Title: generateUnOperateRecordInfo
	 * @Description: TODO(金额显示)
	 * @author 莫浩锋
	 * @param aCBpmMain
	 * @param acCompensate
	 * @param dealResult
	 * @param caseacpayinfo
	 * @return void
	 * @throws
	 * @date Nov 23, 2012 7:18:34 PM
	 */
	private void generateUnOperateRecordInfo(ACBpmMain aCBpmMain, AcCompensate acCompensate, String dealResult, AcPayInfoVo caseacpayinfo,Long taskId1,Long taskId2) {
		Long taskIdTmp1 = null,taskIdTmp2 = null;
		taskIdTmp1 = taskId1;
		taskIdTmp2 = taskId2;
		String modifyContent = "";
		if (aCBpmMain.getNodeId() != null) {
			modifyContent = "本次赔款总金额: " + caseacpayinfo.getSinglesumdutypay() + " 本次费用总金额: " + caseacpayinfo.getSinglesumrealpay()
					+ " 本次赔付总金额:" + caseacpayinfo.getSinglesumpaidfee();
		}
		operateRecordService.saveAcOperateRecordInfoUnderWriteAndCompensente(acCompensate.getId(), dealResult, acCompensate.getRemark(), modifyContent, taskIdTmp1,taskIdTmp2);
	}

	/**
	 * @Title: doBackDefLoss
	 * @Description: TODO(退回定损)
	 * @author 莫浩锋
	 * @param backDefLossList
	 * @param taskId
	 * @return void
	 * @throws
	 * @date Oct 18, 2012 5:26:51 PM
	 */
	public void doBackDefLoss(Long taskId, String reportNo, List<BackDefLossVo> backDefLossVoList) {

		BackMainVo backMainVo = new BackMainVo();
		List<ACBpmMain> bpmMainList = this.findBpmMainList(reportNo);
		for (int i = bpmMainList.size()-1; i >= 0; i--) {
			AcCompensate compensate = findAcCompensateByTaskId(bpmMainList.get(i).getTaskId());
			if(compensate != null && (DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_PASS.equals(compensate.getUnderWriteFlag()) || DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_AUTOPASS.equals(compensate.getUnderWriteFlag()))){
				bpmMainList.remove(i);
			}
		}
		List<Long> taskIdList = new ArrayList<Long>();
		Long taskId1 = 0L,taskId2 = 0L;
		if(bpmMainList != null && bpmMainList.size() == 2){
			taskId1 = bpmMainList.get(0).getTaskId();
			taskId2 = bpmMainList.get(1).getTaskId();
		} else {
			taskId1 = bpmMainList.get(0).getTaskId();
		}
		for (ACBpmMain acBpmMain : bpmMainList) {
			if (acBpmMain.getTaskId().longValue() == taskId.longValue()) {
				if (acBpmMain.getNodeId().equals(BpmConstants.CICOMPENSATE_NODEID)) {
					backMainVo.setCurrentTaskType(BpmConstants.CICOMPENSATE);
				} else {
					backMainVo.setCurrentTaskType(BpmConstants.BICOMPENSATE);
				}
			}
			taskIdList.add(acBpmMain.getTaskId());
			AcCompensate compensate = findAcCompensateByTaskId(acBpmMain.getTaskId());
			if (compensate != null) {
				// 更新主表退回标志
				AcPayInfoVo info = new AcPayInfoVo();
				info.setSinglesumdutypay(compensate.getSumDutyPaid());
				info.setSinglesumrealpay(compensate.getSumRealPayCharge());
				info.setSinglesumpaidfee(compensate.getSumThisPaidFee());
				this.generateUnOperateRecordInfo(acBpmMain, compensate, "退回定损", info,taskId1,taskId2);

				compensate.setUnderWriteFlag(DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_RETURN);
				compensate.setSumLoss(0.0);
				compensate.setSumPaid(0.0);
				compensate.setSumDutyPaid(0.0);
				compensate.setSumThisPaidFee(0.0);
				compensate.setSumKindDutyPaid(0.0);
				compensate.setSumThisDutyPaid(0.0);
				compensate.setSumChargeAmount(0.0);
				compensate.setSumRealPayCharge(0.0);
				compensate.setSumExceDeductPaid(0.0);
				compensate.setPreSumChargeAmount(0.0);
				compensate.setCompensateText("*");
				compensate.setChargeText("*");
//				this.save(compensate);
				this.saveObjAndHis(compensate, AcCompensateHis.class);
				// 更新初审表退回标识
				AcCompensateQuick acCompensateQuick = firstAuditPayService.findAcCompensateQuickByClaimNo(compensate.getClaimNo());
				acCompensateQuick.setUnderWriteFlag(DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_RETURN);
				this.save(acCompensateQuick);
			}
		}
		List<BackDefLossVo> selectVoList = new ArrayList<BackDefLossVo>();
		for (BackDefLossVo backDefLossVo : backDefLossVoList) {
			if (backDefLossVo.getDefLossMainId() != null) {
				// 车
//				if (BpmConstants.CARDEFLOSS.equals(backDefLossVo.getBackTaskType())) {
//					AcCarDefLoss carDefLoss = this.get(AcCarDefLoss.class, backDefLossVo.getDefLossMainId());
//					if (backDefLossVo.getEditLossFlag() != null) {
//						carDefLoss.setEditLossFlag(backDefLossVo.getEditLossFlag());
//					} else {
//						carDefLoss.setEditLossFlag(DataDictionary.FLAG_0);
//					}
//					this.save(carDefLoss);
//
//				}
//				// 物
//				else if (BpmConstants.PROPDEFLOSS.equals(backDefLossVo.getBackTaskType())) {
//					AcPropDefLoss propDefLoss = this.get(AcPropDefLoss.class, backDefLossVo.getDefLossMainId());
//					if (backDefLossVo.getEditLossFlag() != null) {
//						propDefLoss.setEditLossFlag(backDefLossVo.getEditLossFlag());
//					} else {
//						propDefLoss.setEditLossFlag(DataDictionary.FLAG_0);
//					}
//					this.save(propDefLoss);
//				}
//				// 人
//				else {
//					AcPersonTrackMain personTrackMain = this.get(AcPersonTrackMain.class, backDefLossVo.getDefLossMainId());
//					if (backDefLossVo.getEditLossFlag() != null) {
//						personTrackMain.setEditLossFlag(backDefLossVo.getEditLossFlag());
//					} else {
//						personTrackMain.setEditLossFlag(DataDictionary.FLAG_0);
//					}
//					this.save(personTrackMain);
//				}
				selectVoList.add(backDefLossVo);
			}
		}
		backMainVo.setCurrentTaskIdList(taskIdList);
		backMainVo.setBackDefLossVoList(selectVoList);
		defCommonService.backDefLoss(backMainVo);
		AcReport acReport = reportService.findByReportNo(reportNo);
		List<AcCaseStatusInfo> acCaseStatusInfoList=null;
		acCaseStatusInfoList=commonService.findCaseStatusInfo(reportNo,BpmConstants.CICOMPENSATE_NODEID);
		if(!acCaseStatusInfoList.isEmpty()){
			commonService.saveCaseStatusInfo(acReport,BpmConstants.CICOMPENSATE_NODEID,null,null,"0","1","1");
		}
		acCaseStatusInfoList=commonService.findCaseStatusInfo(reportNo,BpmConstants.BICOMPENSATE_NODEID);
		if(!acCaseStatusInfoList.isEmpty()){
			commonService.saveCaseStatusInfo(acReport,BpmConstants.BICOMPENSATE_NODEID,null,null,"0","1","1");
		}
		// 退回后设置AcBpmmain.TaskStruts = 1
		for (ACBpmMain bpmMain : bpmMainList) {
			bpmMain.setTaskStatus(DataDictionary.FLAG_1);
			this.save(bpmMain);
		}
	}

	/**
	 * @Title: findAcCompensateByTaskId
	 * @Description: TODO(查询理算书)
	 * @author 莫浩锋
	 * @param taskId
	 * @return
	 * @return AcCompensate
	 * @throws
	 * @date Oct 18, 2012 5:43:06 PM
	 */
	private AcCompensate findAcCompensateByTaskId(Long taskId) {
		String hql = "from AcCompensate where taskId=?";
		List<AcCompensate> list = this.findAllByHql(hql, taskId);
		if (list.size() > 0) {
			return list.get(0);
		}
		return null;
	}

	/**
	 * @Title: initAbsDeductibleVo
	 * @Description: TODO(初始化不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return
	 * @return AbsDeductibleVo
	 * @throws
	 * @date Nov 22, 2012 3:33:19 PM
	 */
	public AbsDeductibleVo doInitAbsDeductibleVo(List<AcpayItemVo> bivoList) {
		Iterator<String> kindcodes = findAllKindCode(bivoList);
		AbsDeductibleVo absDeductibleVo = new AbsDeductibleVo();
		this.initAbsDeductible(absDeductibleVo);
		while (kindcodes.hasNext()) {
			String kindcode = kindcodes.next();
			if (DataDictionary.KINDCODE_A.equals(kindcode)) {
				initPaid_MA(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_B.equals(kindcode)) {
				initPaid_MB(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_D2.equals(kindcode)) {
				initPaid_MD2(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_D3.equals(kindcode)) {
				initPaid_MD3(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_D4.equals(kindcode)) {
				initPaid_MD4(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_G1.equals(kindcode)) {
				initPaid_MG1(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_L.equals(kindcode)) {
				initPaid_ML(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_V1.equals(kindcode)) {
				initPaid_MV1(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_X.equals(kindcode)) {
				initPaid_MX(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_X1.equals(kindcode)||DataDictionary.KINDCODE_X3.equals(kindcode)) {
				initPaid_MX1(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_R1.equals(kindcode)) {
				initPaid_MR1(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_Z.equals(kindcode)) {
				initPaid_MZ(bivoList, absDeductibleVo);
			}
			if (DataDictionary.KINDCODE_J.equals(kindcode)) {
				initPaid_MJ(bivoList, absDeductibleVo);
			}
			
			
		}
		return absDeductibleVo;
	}

	/**
	 * @Title: initAbsDeductible
	 * @Description: TODO(初始化VO值)
	 * @author 莫浩锋
	 * @return void
	 * @throws
	 * @date Dec 18, 2012 3:29:07 PM
	 */
	private void initAbsDeductible(AbsDeductibleVo vo) {
		vo.setKindPaid_MA(0.0);
		vo.setKindPaid_MB(0.0);
		vo.setKindPaid_MD2(0.0);
		vo.setKindPaid_MD3(0.0);
		vo.setKindPaid_MD4(0.0);
		vo.setKindPaid_MG1(0.0);
		vo.setKindPaid_ML(0.0);
		vo.setKindPaid_MV1(0.0);
		vo.setKindPaid_MX(0.0);
		vo.setKindPaid_MX1(0.0);
		vo.setKindPaid_MR1(0.0);
		vo.setKindPaid_MZ(0.0);
		vo.setDutyDeRate_MA(0.0);
		vo.setDutyDeRate_MB(0.0);
		vo.setDutyDeRate_MD2(0.0);
		vo.setDutyDeRate_MD3(0.0);
		vo.setDutyDeRate_MD4(0.0);
		vo.setDutyDeRate_MG1(0.0);
		vo.setDutyDeRate_ML(0.0);
		vo.setDutyDeRate_MV1(0.0);
		vo.setDutyDeRate_MX(0.0);
		vo.setDutyDeRate_MX1(0.0);
		vo.setDutyDeRate_MR1(0.0);
		vo.setDutyDeRate_MZ(0.0);
	}

	/**
	 * @Title: calculate_MA
	 * @Description: TODO(汇总MA险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MA(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MA = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_A.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MA(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MA += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MA(CommonMethod.doubleRound_Down(kindPaid_MA));
	}

	/**
	 * @Title: calculate_MB
	 * @Description: TODO(汇总MB险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MB(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MB = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_B.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MB(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MB += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MB(CommonMethod.doubleRound_Down(kindPaid_MB));
	}

	/**
	 * @Title: initPaid_MJ
	 * @Description: TODO(汇总MJ险不计免赔赔款)
	 * @author 李魁服
	 * @param bivoList
	 * @param absDeductibleVo
	 * @return void
	 * @throws
	 * @date 2018-3-21 下午5:09:28
	 */
	private void initPaid_MJ(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MJ = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_J.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MJ(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MJ += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MJ(CommonMethod.doubleRound_Down(kindPaid_MJ));
	}
	/**
	 * @Title: calculate_MD2
	 * @Description: TODO(汇总MD2险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MD2(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MD2 = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_D2.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MD2(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MD2 += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MD2(CommonMethod.doubleRound_Down(kindPaid_MD2));
	}

	/**
	 * @Title: calculate_MD3
	 * @Description: TODO(汇总MD3险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MD3(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MD3 = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_D3.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MD3(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MD3 += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MD3(CommonMethod.doubleRound_Down(kindPaid_MD3));
	}

	/**
	 * @Title: calculate_MD3
	 * @Description: TODO(汇总MD4险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MD4(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MD4 = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_D4.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MD4(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MD4 += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MD4(CommonMethod.doubleRound_Down(kindPaid_MD4));
	}

	/**
	 * @Title: calculate_MG1
	 * @Description: TODO(汇总MG1险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MG1(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MG1 = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_G1.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MG1(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MG1 += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MG1(CommonMethod.doubleRound_Down(kindPaid_MG1));
	}

	/**
	 * @Title: calculate_ML
	 * @Description: TODO(汇总ML险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_ML(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_ML = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_L.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_ML(acpayItemVo.getDutyDeductibleRate());
				kindPaid_ML += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_ML(CommonMethod.doubleRound_Down(kindPaid_ML));
	}

	/**
	 * @Title: calculate_MV1
	 * @Description: TODO(汇总MV1险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MV1(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MV1 = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_V1.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MV1(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MV1 += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MV1(CommonMethod.doubleRound_Down(kindPaid_MV1));
	}

	/**
	 * @Title: calculate_MX
	 * @Description: TODO(汇总MX险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MX(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MX = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_X.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MX(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MX += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MX(CommonMethod.doubleRound_Down(kindPaid_MX));
	}

	/**
	 * @Title: calculate_MX1
	 * @Description: TODO(汇总MX1险不计免赔赔款)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Nov 22, 2012 3:17:58 PM
	 */
	private void initPaid_MX1(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MX1 = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_X1.equals(acpayItemVo.getKindCode())||DataDictionary.KINDCODE_X3.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MX1(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MX1 += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MX1(CommonMethod.doubleRound_Down(kindPaid_MX1));
	}
	
	
	/**
	 * @Title: calculate_MR
	 * @Description: TODO(汇总MR险不计免赔赔款)
	 * @author 李魁服
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date 2015-03-17 20:42:58
	 */
	private void initPaid_MR1(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MR1 = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_R1.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MR1(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MR1 += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MR1(CommonMethod.doubleRound_Down(kindPaid_MR1));
	}
	
	/**
	 * @Title: calculate_MZ
	 * @Description: TODO(汇总MZ险不计免赔赔款)
	 * @author 李魁服
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date 2015-03-17 20:17:58
	 */
	private void initPaid_MZ(List<AcpayItemVo> bivoList, AbsDeductibleVo absDeductibleVo) {
		Double kindPaid_MZ = 0.0;
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (DataDictionary.KINDCODE_Z.equals(acpayItemVo.getKindCode())) {
				absDeductibleVo.setDutyDeRate_MZ(acpayItemVo.getDutyDeductibleRate());
				kindPaid_MZ += acpayItemVo.getExceDeductKindPaid();
			}
		}
		absDeductibleVo.setKindPaid_MZ(CommonMethod.doubleRound_Down(kindPaid_MZ));
	}
	

	/**
	 * @Title: autoCompensate
	 * @Description: TODO(自动理算--一站式流程)
	 * @author 莫浩锋
	 * @param taskId
	 * @param nodeId
	 * @return void
	 * @throws
	 * @date Nov 23, 2012 11:19:44 AM
	 */
	public AcCompensate autoCompensate(Long firstAuditPaytaskId, Long taskId, Long nodeId) {
		ACBpmMain aCBpmMain = acBpmMainService.findBpmMainByTaskId(firstAuditPaytaskId);
		AcCompensateQuick acCompensate = null;
		List<AcPayPerson> personList = paymentInfoService.findAllpersonInfo(aCBpmMain.getReportNo());
//		AcPayPerson payPerson = personList.get(0);
		AcPayPerson payCostPerson = null;
		AcPayPerson compensationPerson = null;
		if (BpmConstants.CICOMPENSATE_NODEID.equals(nodeId)) {// 查看是否存在交强险理算书
			acCompensate = firstVerifyService.findTrafficAcCompensateQuickByTaskId(aCBpmMain);
			//查询理算是否存在数据，存在的话做删除
			List<AcCompensate> ciCompensate = findCIAcCompensateByReportNo(aCBpmMain.getReportNo());
			if(ciCompensate.size()>0){
				this.deleteCompensate(ciCompensate.get(0).getId());
				this.delete(ciCompensate.get(0));
			}
		} else {// 查看是否存在商业险理算书
			acCompensate = firstVerifyService.findBiAcCompensateQuickByTaskId(aCBpmMain);
			//查询理算是否存在数据，存在的话做删除
			List<AcCompensate> biCompensate = findBIAcCompensateByReportNo(aCBpmMain.getReportNo());
			if(biCompensate.size()>0){
				this.deleteCompensate(biCompensate.get(0).getId());
				this.delete(biCompensate.get(0));
			}
		}
		
		if (acCompensate != null) {
			AcCompensate acCompensateTmp = (AcCompensate) sourceToTarget1(acCompensate, acCompensate.getId(), AcCompensate.class);
			AcClaim acClaim;
			if (BpmConstants.CICOMPENSATE_NODEID.equals(nodeId)) { // 查找交强险立案
				acClaim = claimService.findTraClaimNoByReportNo(acCompensateTmp.getReportNo());
			} else { // 查找商业险立案
				acClaim = claimService.findBiClaimNoByReportNo(acCompensateTmp.getReportNo());
			}
			acCompensateTmp.setId(null);
			acCompensateTmp.setTaskId(taskId);
			String compensateNo = commonService.findMaxBookNo(acCompensateTmp.getClaimNo());
			acCompensateTmp.setCompensateNo(compensateNo);
			this.initCompensateChild(acCompensateTmp);
//			this.save(acCompensateTmp);
			this.saveObjAndHis(acCompensateTmp, AcCompensateHis.class);
			//删除理算赔款信息
			String hql = " from AcPaymentInfo where reportNo= ? and certiType= ? and riskCode= ?";
			List<AcPaymentInfo> paymentInfoList = this.findByHql(hql, aCBpmMain.getReportNo(),"C",acCompensateTmp.getRiskCode());
			if(paymentInfoList!=null &&paymentInfoList.size()>0){
				for(AcPaymentInfo paymentInfo :paymentInfoList){
					this.deleteAll(paymentInfo.getAcPaymentInfoSubs());
				}
	            for(AcPaymentInfo paymentInfo :paymentInfoList ){
	            	paymentInfo.setAcPayPerson(null);
	                this.getHibernateTemplate().clear();
	                this.delete(paymentInfo);
	            }
			}
			List<AcPaymentInfo> paymentInfoListtemp = new ArrayList<AcPaymentInfo>();
			List<AcPaymentQuick> paymentInfoQuicks = firstAuditPayService.findpaymentInfoQuicks(aCBpmMain.getReportNo());
			List<AcPaymentInfoVo> payCostList = null;
			List<AcPaymentInfoVo> compensationList = null;
			payCostList = paymentInfoService.findCostList(acCompensateTmp.getId());
			compensationList = paymentInfoService.findCompensationList(acCompensateTmp.getId());
			List<AcPayPerson> payPersonC = new ArrayList<AcPayPerson>();//辅助人
			List<AcPayPerson> payPersonP = new ArrayList<AcPayPerson>();//非辅助人
			for (AcPayPerson acPayPerson : personList) {
				if(acPayPerson.getAgAuxiliaryPersonBankid()!=null && !"".equals(acPayPerson.getAgAuxiliaryPersonBankid())){
					payPersonC.add(acPayPerson);
				}else{
					payPersonP.add(acPayPerson);
				}
			}
			for (AcPaymentInfoVo infoVo : payCostList) {//费用
				infoVo.setPlanFee(infoVo.getReparatamount());
				infoVo.setPayRefReason(infoVo.getChargeCode());
				infoVo.setCertiNo(acCompensateTmp.getCompensateNo());
				infoVo.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_C);
				for(AcPaymentQuick paymentInfoQuick:paymentInfoQuicks){
					if(infoVo.getRiskCode().equals(paymentInfoQuick.getRiskCode()) 
							&& infoVo.getChargeCode().equals(paymentInfoQuick.getChargeCode())){
						payCostPerson = this.get(AcPayPerson.class, paymentInfoQuick.getPersonId());
						break;
					}
				}
				if(payCostPerson==null){
					payCostPerson=payPersonC.get(0);
				}
				AcPaymentInfo paymentinfo = paymentInfoService.addPaymentinfo(infoVo, payCostPerson, acClaim);
				paymentInfoListtemp.add(paymentinfo);
			}
			for (AcPaymentInfoVo infoVo : compensationList) {//赔款
				infoVo.setPlanFee(infoVo.getReparatamount());
				infoVo.setPayRefReason(DataDictionary.PAYMENTINFO_PAYREFREASON_LOSS_Y);
				infoVo.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_C);
				infoVo.setCertiNo(acCompensateTmp.getCompensateNo());
				for(AcPaymentQuick paymentInfoQuick:paymentInfoQuicks){
					if(infoVo.getRiskCode().equals(paymentInfoQuick.getRiskCode()) 
							&& infoVo.getLossType().equals(paymentInfoQuick.getLossType())){
						compensationPerson = this.get(AcPayPerson.class, paymentInfoQuick.getPersonId());
						break;
					}
				}
				if(compensationPerson==null){
					compensationPerson=payPersonP.get(0);
				}
				AcPaymentInfo paymentinfo = paymentInfoService.addPaymentinfo(infoVo, compensationPerson, acClaim);
				paymentInfoListtemp.add(paymentinfo);
			}
//			this.mergeList(paymentInfoListtemp, paymentInfoList, "id");
//			for (AcPaymentInfo p : paymentInfoList) {
//				this.save(p);
//			}
			this.saveAll(paymentInfoListtemp);
			//初始化险别赔款信息
			List<AcPaymentSubVo> subVoList=null;
			if(!BpmConstants.CICOMPENSATE_NODEID.equals(nodeId)){
				subVoList = paymentInfoService.initAcPaymentSubVo(acCompensateTmp);
			}
			paymentInfoService.addPaymentSub(paymentInfoListtemp,subVoList,aCBpmMain.getReportNo());
			
			// 操作记录
			String modifyContent = "";
			if (aCBpmMain.getNodeId() != null) {
				modifyContent = "本次赔款总金额: " + acCompensateTmp.getSumThisDutyPaid() + " 本次费用总金额: " + acCompensateTmp.getSumRealPayCharge()
						+ " 本次赔付总金额:" + acCompensateTmp.getSumThisPaidFee();
			}
			operateRecordService.saveAcOperateRecordInfoUnderWriteAndCompensente(acCompensateTmp.getId(), "自动理算完成", acCompensateTmp.getRemark(), modifyContent,
					taskId,0L);
			//REQ-3212  清空F01 add by duan 20171127 begin
			AcUnpaidCause acUnpaidCause = commonService.findAcUnpaidCause(aCBpmMain.getReportNo());
			if(acUnpaidCause == null){
				acUnpaidCause = new AcUnpaidCause();
				acUnpaidCause.setReportNo(aCBpmMain.getReportNo());
				acUnpaidCause.setD01("1");//案件审核过程中（含理算过程）核赔通过取消 
			}
			acUnpaidCause.setF01(null);
			if(!acUnpaidCause.getAcUnpaidCauseSubs().isEmpty()){
				for (AcUnpaidCauseSub sub : acUnpaidCause.getAcUnpaidCauseSubs()) {
					if("1".equals(sub.getF01())){
						sub.setF01(null);
					}
				}
			}
			commonService.saveAcUnpaidCause(acUnpaidCause);
			//REQ-3212 F01 add by duan 20171127 end
			return acCompensateTmp;
		}
		return null;
	}

	/**
	 * @Title: autoPayeeSplitInfo
	 * @Description: TODO(理算自动拆分)
	 * @author 何颖
	 * @param acPayPerson
	 * @param traCompensate,biCompensate,reportno
	 * @return void
	 * @throws
	 * @date Jan 21, 2013 10:20:46 AM
	 */
	private void autoPayeeSplitInfo(AcCompensate traCompensate, AcCompensate biCompensate, String reportNo, List<AcPayPerson> acpayPesonList) {
		List<AcPaymentInfoVo> biCompensationList = new ArrayList<AcPaymentInfoVo>();
		List<AcPaymentInfoVo> traCompensationList = new ArrayList<AcPaymentInfoVo>();
		List<AcPaymentInfoVo> biPayCostList = new ArrayList<AcPaymentInfoVo>();
		List<AcPaymentInfoVo> traPayCostList = new ArrayList<AcPaymentInfoVo>();
		List<AcPayPerson> auxiliaryPersonList = new ArrayList<AcPayPerson>();
		List<AcPayPerson> payPersonList = new ArrayList<AcPayPerson>();
		BigDecimal biCompensateId = null;
		BigDecimal traCompensateId = null;
		ACBpmCaseInfo caseInfo=acBpmCaseInfoService.findACBpmCaseInfoByReportNo(reportNo);
		//得到维护的辅助人和非辅助人
		for (AcPayPerson acPayPerson : acpayPesonList) {
			if(acPayPerson.getAgAuxiliaryPersonBankid()!=null && !"".equals(acPayPerson.getAgAuxiliaryPersonBankid())){
				auxiliaryPersonList.add(acPayPerson);
			}else{
				payPersonList.add(acPayPerson);
			}
		}
		if (traCompensate != null && !"1".equals(traCompensate.getUnderWriteFlag()) && !"3".equals(traCompensate.getUnderWriteFlag())) {
			traCompensateId = traCompensate.getId();
			// 交强费用
			traPayCostList = paymentInfoService.findCostList(traCompensate.getId());
			// 交强赔偿
			traCompensationList = paymentInfoService.findCompensationList(traCompensate.getId());
		}
		if (biCompensate != null && !"1".equals(biCompensate.getUnderWriteFlag()) && !"3".equals(biCompensate.getUnderWriteFlag())) {
			biCompensateId = biCompensate.getId();
			// 商业赔偿
			biCompensationList = paymentInfoService.findCompensationList(biCompensate.getId());
			// 商业费用
			biPayCostList = paymentInfoService.findCostList(biCompensate.getId());
		}
		if(traPayCostList.size() > 0 || biPayCostList.size() > 0){
			boolean atsCostSwitch = commonService.checkSubComPayment(caseInfo.getComCode(), DataDictionary.SWITCH_ATS_COST);
			if(auxiliaryPersonList.size() == 0){
				throw new BusinessException("未维护辅助人，费用不能自动拆分！", false);
			}else if(auxiliaryPersonList.size() == 1){
				AgAuxiliaryPersonBank auxiliaryPersonBank = this.findUnique(AgAuxiliaryPersonBank.class, "id", auxiliaryPersonList.get(0).getAgAuxiliaryPersonBankid());
				if(atsCostSwitch && (auxiliaryPersonBank.getAtsAreaCode()==null || "".equals(auxiliaryPersonBank.getAtsAreaCode())
						|| auxiliaryPersonBank.getAtsBankCode()==null || "".equals(auxiliaryPersonBank.getAtsBankCode()))){
					throw new BusinessException("辅助人："+auxiliaryPersonBank.getPayeeName()+" 该人员信息不完整，费用不能自动拆分！", false);
				}
				for (AcPaymentInfoVo vo : traPayCostList) {
					if(traCompensate.getIsAdvance()!=null && "1".equals(traCompensate.getIsAdvance())){
						vo.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_D);//垫付
					}else{
						vo.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_C);
					}
					vo.setAcPayPerson(auxiliaryPersonList.get(0));
					vo.setPlanFee(vo.getReparatamount());
				}
				for (AcPaymentInfoVo vo : biPayCostList) {
					vo.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_C);
					vo.setAcPayPerson(auxiliaryPersonList.get(0));
					vo.setPlanFee(vo.getReparatamount());
				}
			}else{
				throw new BusinessException("维护多个辅助人，费用不能自动拆分！", false);
			}
		}
		if(traCompensationList.size() > 0 || biCompensationList.size() > 0){
			boolean atsLossSwitch = commonService.checkSubComPayment(caseInfo.getComCode(), DataDictionary.SWITCH_ATS_LOSS);
			if(payPersonList.size() == 0){
				throw new BusinessException("未维护非辅助人，赔款不能自动拆分！", false);
			}else if(payPersonList.size() == 1){
				AcPayPerson payPerson = payPersonList.get(0);
				if(payPerson.getIdentifyType()==null||"".equals(payPerson.getIdentifyType())||payPerson.getIdentifyNumber()==null||"".equals(payPerson.getIdentifyNumber())){
					throw new BusinessException("收款人："+payPerson.getPayeeName()+" 该人员信息不完整，赔款不能自动拆分！", false);
				}else if(atsLossSwitch && (payPerson.getAtsAreaCode()==null ||"".equals(payPerson.getAtsAreaCode())
						|| payPerson.getCardPassbook()==null ||"".equals(payPerson.getCardPassbook())
						|| payPerson.getSettlementMethod()==null ||"".equals(payPerson.getSettlementMethod()))){
					throw new BusinessException("收款人："+payPerson.getPayeeName()+" 该人员信息不完整，赔款不能自动拆分！", false);
				}
				for (AcPaymentInfoVo vo : traCompensationList) {
					if(traCompensate.getIsAdvance()!=null && "1".equals(traCompensate.getIsAdvance())){
						vo.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_D);//垫付
					}else{
						vo.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_C);
					}
					vo.setPlanFee(vo.getReparatamount());
					vo.setAcPayPerson(payPersonList.get(0));
				}
				for (AcPaymentInfoVo vo : biCompensationList) {
					vo.setCertiType(DataDictionary.PAYMENTINFO_CERTITYPE_C);
					vo.setPlanFee(vo.getReparatamount());
					vo.setAcPayPerson(payPersonList.get(0));
				}
			}else{
				throw new BusinessException("维护多个非辅助人，赔款不能自动拆分！", false);
			}
		}
		paymentInfoService.savePaymentInfoList(traCompensationList, biCompensationList, traPayCostList, biPayCostList, biCompensateId,
				traCompensateId, reportNo);
	}

	/**
	 * @Title: initCompensateChild
	 * @Description: TODO(赋值理算子表信息)
	 * @author 莫浩锋
	 * @param traCompensate
	 * @return void
	 * @throws
	 * @date Jan 21, 2013 10:20:46 AM
	 */
	private void initCompensateChild(AcCompensate compensate) {
		for (AcCharge charge : compensate.getAcCharges()) {
			charge.setCompensateNo(compensate.getCompensateNo());
		}
		for (AcLoss loss : compensate.getAcLosses()) {
			loss.setCompensateNo(compensate.getCompensateNo());
		}
		for (AcPersonLoss personLoss : compensate.getAcPersonLosses()) {
			personLoss.setCompensateNo(compensate.getCompensateNo());
		}
		for (AcDeductcond deductcond : compensate.getAcDeductconds()) {
			deductcond.setCompensateNo(compensate.getCompensateNo());
		}

	}

	/**
	 * @Title: checkKindCode
	 * @Description: TODO(判断费用类型是否相同)
	 * @author 莫浩锋
	 * @param tmpChargeList
	 * @param charge
	 * @return
	 * @return AcCharge
	 * @throws
	 * @date Nov 23, 2012 12:28:54 PM
	 */
	private AcCharge checkChargeCode(List<AcCharge> tmpChargeList, AcCharge charge) {
		for (AcCharge acCharge : tmpChargeList) {
			if (acCharge.getChargeCode().equals(charge.getChargeCode())) {
				return acCharge;
			}
		}
		return null;
	}

	/**
	 * @Title: deleteLossQuicks
	 * @Description: TODO(清空aclossQuicks、acpersonLossQuicks、AcChargeQuick数据)
	 * @author 莫浩锋
	 * @param acLossQuicks
	 * @param acPersonLossQuicks
	 * @return void
	 * @throws
	 * @date Nov 25, 2012 11:18:39 AM
	 */
	public void deleteLossQuicks(BigDecimal id) {
		String lossHql = "from AcLossQuick where acCompensateQuick.id =?";
		String personHql = "from AcPersonLossQuick where acCompensateQuick.id =?";
		String chargeHql = "from AcChargeQuick where acCompensateQuick.id =?";
		String coinsQuickHql = "from AcCoinsQuick where acCompensateQuick.id =?";
		List<AcLossQuick> lossQuicksList = this.findByHql(lossHql, id);
		List<AcPersonLossQuick> personLossQuicksList = this.findByHql(personHql, id);
		List<AcChargeQuick> chargeQuicksList = this.findByHql(chargeHql, id);
		List<AcCoinsQuick> coinsQuickList = this.findByHql(coinsQuickHql, id);
		if (lossQuicksList != null) {
			this.deleteAll(lossQuicksList);
		}
		if (personLossQuicksList != null) {
			this.deleteAll(personLossQuicksList);
		}
		if (chargeQuicksList != null) {
			this.deleteAll(chargeQuicksList);
		}
		if (coinsQuickList != null) {
			this.deleteAll(coinsQuickList);
		}
	}

	/**
	 * @Title: deleteCompensate
	 * @Description: TODO(清空acloss、acpersonLoss、AcCharge、AcCoins)
	 * @author 莫浩锋
	 * @param acLossQuicks
	 * @param acPersonLossQuicks
	 * @return void
	 * @throws
	 * @date Nov 25, 2012 11:18:39 AM
	 */
	public void deleteCompensate(BigDecimal id) {

		String lossHql = "from AcLoss where acCompensate.id =?";
		String personHql = "from AcPersonLoss where acCompensate.id =?";
		String chargeHql = "from AcCharge where acCompensate.id =?";
		String coinsHql = "from AcCoins where acCompensate.id =?";
		String deductcondHql = "from AcDeductcond where acCompensate.id =?";

		List<AcLoss> lossList = this.findByHql(lossHql, id);
		List<AcPersonLoss> personLossList = this.findByHql(personHql, id);
		List<AcCharge> chargeList = this.findByHql(chargeHql, id);
		List<AcCoins> coinsList = this.findByHql(coinsHql, id);
		List<AcCoins> deductcondList = this.findByHql(deductcondHql, id);

		if (lossList != null) {
			this.deleteAll(lossList);
		}
		if (personLossList != null) {
			this.deleteAll(personLossList);
		}
		if (chargeList != null) {
			this.deleteAll(chargeList);
		}
		if (coinsList != null) {
			this.deleteAll(coinsList);
		}
		if (deductcondList != null) {
			this.deleteAll(deductcondList);
		}
	}

	/**
	 * @Title: closeTask
	 * @Description: TODO(关闭当前无效理算任务)
	 * @author 莫浩锋
	 * @param bitaskId
	 * @return void
	 * @throws
	 * @date Nov 29, 2012 8:45:07 PM
	 */
	public void closeTask(Long taskId) {
		bpmService.cancelTask(taskId);
	}

	/**
	 * @Title: initTraProcess
	 * @Description: TODO(交强计算过程)
	 * @author 莫浩锋
	 * @param travoList
	 * @param travoNoDutyList
	 * @param mesnePayAmount
	 * @param sumPrePaid
	 * @return
	 * @return String
	 * @throws
	 * @date Dec 17, 2012 4:32:48 PM
	 */
	public String initBiProcess(List<AcpayItemVo> bivoList, Double mesnePayAmount, Double sumPrePaid) {
		Iterator<String> kindcodes = findAllKindCode(bivoList);
		StringBuffer biProcessText = new StringBuffer();
		while (kindcodes.hasNext()) {
			String kindcode = kindcodes.next();
			// 进行三者险计算
			if (DataDictionary.KINDCODE_B.equals(kindcode)) {
				StringBuffer tmpText = calculateB(bivoList, kindcode);
				biProcessText.append(tmpText);
			}
			// 车辆损失险
			if (DataDictionary.KINDCODE_A.equals(kindcode)||DataDictionary.KINDCODE_A1.equals(kindcode)) {
				StringBuffer tmpText = calculateA(bivoList, kindcode);
				biProcessText.append(tmpText);
			}
			// 粤港、粤澳两地车区域扩展条款
			if (DataDictionary.KINDCODE_AH.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_AH_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 节假日行驶区域扩展特约条款
			if (DataDictionary.KINDCODE_C10.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_C10_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 异地出险住宿交通费特约条款
			if (DataDictionary.KINDCODE_C5.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_C5_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 车上货物责任险
			if (DataDictionary.KINDCODE_D2.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_D2_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 驾驶员责任险
			if (DataDictionary.KINDCODE_D3.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_D3_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 乘客责任险
			if (DataDictionary.KINDCODE_D4.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_D4_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 火灾、爆炸、自燃损失险
			if (DataDictionary.KINDCODE_E.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_E_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 玻璃单独破碎险
			if (DataDictionary.KINDCODE_F.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_F_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 全车盗抢附加高尔夫球具盗窃险//全车盗抢附加高尔夫球具盗窃险
			if (DataDictionary.KINDCODE_G0.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_G0_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 全车盗抢保险
			if (DataDictionary.KINDCODE_G1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_G1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 救助特约条款
			if (DataDictionary.KINDCODE_J.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_J_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 起重、装卸、挖掘车辆损失扩展条款
			if (DataDictionary.KINDCODE_K1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_K1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 特种车辆固定设备、仪器损坏扩展条款
			if (DataDictionary.KINDCODE_K2.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_K2_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 车身划痕损失险
			if (DataDictionary.KINDCODE_L.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_L_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约险
			if (DataDictionary.KINDCODE_M.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_M_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款(机动车损失险)
			if (DataDictionary.KINDCODE_MA.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MA_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 附加险不计免赔率特约条款
			if (DataDictionary.KINDCODE_M3.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_M3_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款(机动车第三者责任险)
			if (DataDictionary.KINDCODE_MB.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MB_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款（车上货物责任险）
			if (DataDictionary.KINDCODE_MD2.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MD2_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款(机动车车上人员责任险（驾驶员）)
			if (DataDictionary.KINDCODE_MD3.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MD3_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款(机动车车上人员责任保险（乘客）)
			if (DataDictionary.KINDCODE_MD4.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MD4_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款(盗抢险)
			if (DataDictionary.KINDCODE_MG1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MG1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款（车身划痕损失险）
			if (DataDictionary.KINDCODE_ML.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_ML_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款（机动车污染责任险）
			if (DataDictionary.KINDCODE_MV1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MV1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款（新增加设备损失险）
			if (DataDictionary.KINDCODE_MX.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MX_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 不计免赔率特约条款（发动机特别损失险）
			if (DataDictionary.KINDCODE_MX1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_MX1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 免税车辆关税责任险
			if (DataDictionary.KINDCODE_PA.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_PA_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 可选免赔额特约条款
			if (DataDictionary.KINDCODE_Q.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_Q_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 多次事故增加绝对免赔率保费优待特约条款
			if (DataDictionary.KINDCODE_Q1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_Q1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 指定专修厂特约条款
			if (DataDictionary.KINDCODE_Q3.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_Q3_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 交通事故精神损害赔偿责任险
			if (DataDictionary.KINDCODE_R.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_R_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 机动车出境保险条款
			if (DataDictionary.KINDCODE_S.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_S_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 新车更换特约条款
			if (DataDictionary.KINDCODE_S1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_S1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 车辆停驶损失险
			if (DataDictionary.KINDCODE_T.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_T_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 换件特约条款
			if (DataDictionary.KINDCODE_U.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_U_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 污染责任保险
			if (DataDictionary.KINDCODE_V1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_V1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 发动机特别损失险
			if (DataDictionary.KINDCODE_X1.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_X1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 发动机涉水损失险
			if (DataDictionary.KINDCODE_X3.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_X3_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}			
			// 教练车特约条款
			if (DataDictionary.KINDCODE_Y3.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_Y3_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 教练车特约条款
			if (DataDictionary.KINDCODE_X.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_X_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			// 自燃损失险
			if (DataDictionary.KINDCODE_Z.equals(kindcode)) {
				StringBuffer tmpText = calculate(bivoList, DataDictionary.KINDCODE_Z_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			
			
			if (DataDictionary.KINDCODE_20B.equals(kindcode)) {
				StringBuffer tmpText = calculate20B(bivoList, kindcode);
				biProcessText.append(tmpText);
			}
			// 车辆损失险
			if (DataDictionary.KINDCODE_20A.equals(kindcode)) {
				StringBuffer tmpText = calculate20A(bivoList, kindcode);
				biProcessText.append(tmpText);
			}
			
			//20D3	机动车车上人员责任保险（驾驶员）
			if (DataDictionary.KINDCODE_20D3.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20D3_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20D4	机动车车上人员责任保险（乘客）
			if (DataDictionary.KINDCODE_20D4.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20D4_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20D2	附加车上货物责任险
			if (DataDictionary.KINDCODE_20D2.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20D2_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20X	附加新增加设备损失险
			if (DataDictionary.KINDCODE_20X.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20X_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20R1	附加精神损害抚慰金责任险（机动车第三者责任保险）
			if (DataDictionary.KINDCODE_20R1.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20R1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20R2	附加精神损害抚慰金责任险（机动车车上人员责任保险（司机））
			if (DataDictionary.KINDCODE_20R2.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20R2_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20R3	附加精神损害抚慰金责任险（机动车车上人员责任保险（乘客））
			if (DataDictionary.KINDCODE_20R3.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20R3_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20T1	附加修理期间费用补偿险
			if (DataDictionary.KINDCODE_20T1.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20T1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20Y	附加医保外用药责任险（机动车第三者责任保险）
            if (DataDictionary.KINDCODE_20Y.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20Y_ZHNAME, kindcode);
				biProcessText.append(tmpText);
            }
            //20Y1	附加医保外用药责任险（机动车车上人员责任保险（司机））
            if (DataDictionary.KINDCODE_20Y1.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20Y1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
            }
			//20Y2	附加医保外用药责任险（机动车车上人员责任保险（乘客））            
            if (DataDictionary.KINDCODE_20Y2.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20Y2_ZHNAME, kindcode);
				biProcessText.append(tmpText);
            }

			//20E2	附加车轮单独损失险
			if (DataDictionary.KINDCODE_20E2.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20E2_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20G1	机动车盗抢保险
			if (DataDictionary.KINDCODE_20G1.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20G1_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
			//20L	附加车身划痕损失险
			if (DataDictionary.KINDCODE_20L.equals(kindcode)) {
				StringBuffer tmpText = calculate2020(bivoList, DataDictionary.KINDCODE_20L_ZHNAME, kindcode);
				biProcessText.append(tmpText);
			}
		}
		Double sumRealpay = 0.0;
		StringBuffer sumAcountText = new StringBuffer();
		sumAcountText.append("总实赔金额 = ");
		for (AcpayItemVo payItemVo : bivoList) {
			sumRealpay += payItemVo.getSumRealpay();
			sumAcountText.append(payItemVo.getSumRealpay() + " +");
		}
		Double sumAcount = CommonMethod.doubleRound_Down(sumRealpay);
		Double acount = mesnePayAmount + sumPrePaid;
		Double thisAcount = CommonMethod.doubleRound_Down(acount);
		Double singleAcount = sumAcount - mesnePayAmount - sumPrePaid;
		Double singleSumAcount = CommonMethod.doubleRound_Down(singleAcount);
		if (bivoList.size() == 1) {
			biProcessText.append("总实赔金额 = " + sumAcount + "元 \n");
		} else {
			biProcessText.append(sumAcountText.substring(0, sumAcountText.length() - 1) + " = " + sumAcount + "元 \n");
		}
		biProcessText.append("本次实赔金额 = 总实赔金额 - 已提前支付赔款金额 = " + sumAcount + " - " + thisAcount + " = " + singleSumAcount + "元 \n");

		return biProcessText.toString();
	}

	/**
	 * @Title: calculate_B
	 * @Description: TODO(B险计算)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param kindCode
	 * @return
	 * @return StringBuffer
	 * @throws
	 * @date Nov 26, 2012 8:46:09 PM
	 */
	private StringBuffer calculateB(List<AcpayItemVo> bivoList, String kindCode) {
		StringBuffer tmpText = new StringBuffer();
		tmpText.append(DataDictionary.KINDCODE_B_ZHNAME + "：\n");
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				Double deductKindPaid = acpayItemVo.getExceDeductKindPaid() != null ? acpayItemVo.getExceDeductKindPaid() : 0.0;
				Double acount = deductKindPaid + acpayItemVo.getIndemnityPaid();
				Double thisAcount = CommonMethod.doubleRound_Down(acount);
				tmpText.append(acpayItemVo.getLicenseNo() + "商业三者险赔偿金额 = " + acpayItemVo.getIndemnityPaid() + "元 \n");
				tmpText.append("不计免赔率特约条款 = " + deductKindPaid + "元 \n");
				tmpText.append(acpayItemVo.getLicenseNo() + "实赔金额 = " + thisAcount + "元 \n \n");
			}
		}
		return tmpText;
	}
	/**
	 * @Title: calculate20B
	 * @Description: TODO(2020车险综合改革新条款  三者险计算公司)
	 * @author 李魁服
	 * @param bivoList
	 * @param kindCode
	 * @return
	 * @return StringBuffer
	 * @throws
	 * @date 2020-9-12 下午7:03:08
	 */
	private StringBuffer calculate20B(List<AcpayItemVo> bivoList, String kindCode) {
		StringBuffer tmpText = new StringBuffer();
		tmpText.append(DataDictionary.KINDCODE_20B_ZHNAME + "：\n");
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;
				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				tmpText.append(acpayItemVo.getLicenseNo() + "商业三者险赔偿金额 = " + acpayItemVo.getIndemnityPaid() + "元 \n");
				if(absDeductibleRate>0){
					tmpText.append("绝对免赔率 :" + absDeductibleRate + "% \n");
				}
				if(absDeductibleAmount>0){
					tmpText.append("绝对免赔额:" + absDeductibleAmount + "元 \n");
				}
				tmpText.append(acpayItemVo.getLicenseNo() + "实赔金额 = " + acpayItemVo.getSumRealpay() + "元 \n \n");
			}
		}
		return tmpText;
	}

	/**
	 * @Title: calculate_AH
	 * @Description: TODO(公用计算方法)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 5:27:50 PM
	 */
	private StringBuffer calculate(List<AcpayItemVo> bivoList, String kindName, String kindCode) {
		StringBuffer tmpText = new StringBuffer();
		tmpText.append(kindName + "：\n");
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				Double deductKindPaid = acpayItemVo.getExceDeductKindPaid() != null ? acpayItemVo.getExceDeductKindPaid() : 0.0;
				Double sumAcount = deductKindPaid + acpayItemVo.getIndemnityPaid();
				Double thisAcount = CommonMethod.doubleRound_Down(sumAcount);
				tmpText.append(kindName + "赔偿金额 = " + acpayItemVo.getIndemnityPaid() + "元 \n");
				tmpText.append("不计免赔率特约条款 = " + deductKindPaid + "元 \n");
				tmpText.append(kindName + "实赔金额 = " + thisAcount + "元 \n \n");
			}
		}
		return tmpText;
	}
	/**
	 * @Title: calculate2020
	 * @Description: TODO(2020车险综合改革新条款    公用计算方法)
	 * @author 李魁服
	 * @param bivoList
	 * @param kindName
	 * @param kindCode
	 * @return
	 * @return StringBuffer
	 * @throws
	 * @date 2020-9-12 下午6:47:49
	 */
	private StringBuffer calculate2020(List<AcpayItemVo> bivoList, String kindName, String kindCode) {
		StringBuffer tmpText = new StringBuffer();
		tmpText.append(kindName + "：\n");
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;
				if(absDeductibleRate>0){
					tmpText.append("绝对免赔率 :" + absDeductibleRate + "% \n");
				}
				tmpText.append("实赔金额 = " + acpayItemVo.getIndemnityPaid() + "元 \n \n");
			}
		}
		return tmpText;
	}

	/**
	 * @Title: calculate_A
	 * @Description: TODO(车辆损失险)
	 * @author 莫浩锋
	 * @param bivoList
	 * @return void
	 * @throws
	 * @date Oct 8, 2012 3:49:04 PM
	 */
	private StringBuffer calculateA(List<AcpayItemVo> bivoList, String kindCode) {
		StringBuffer tmpText = new StringBuffer();
		tmpText.append(DataDictionary.KINDCODE_A_ZHNAME + "：\n");
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				Double deductKindPaid = acpayItemVo.getExceDeductKindPaid() != null ? acpayItemVo.getExceDeductKindPaid() : 0.0;
				Double rescueFee = acpayItemVo.getRescueFee() != null ? acpayItemVo.getRescueFee() : 0.0;
				Double sumRealpay = deductKindPaid + acpayItemVo.getIndemnityPaid();
				Double thisSumRealpay = CommonMethod.doubleRound_Down(sumRealpay);
				tmpText.append(acpayItemVo.getLicenseNo() + "车损险赔偿金额 = " + acpayItemVo.getIndemnityPaid() + "元 \n");
				tmpText.append("不计免赔率特约条款 = " + deductKindPaid + "元 \n");
				tmpText.append(acpayItemVo.getLicenseNo() + "实赔金额 = " + thisSumRealpay + "元 \n");
				tmpText.append(acpayItemVo.getLicenseNo() + "施救费 = " + rescueFee + "元 \n \n");
			}
		}
		return tmpText;
	}
	/**
	 * @Title: calculateA
	 * @Description: TODO(2020车险综合改革新条款    车损险计算过程)
	 * @author 李魁服
	 * @param bivoList
	 * @param kindCode
	 * @return
	 * @return StringBuffer
	 * @throws
	 * @date 2020-9-12 下午6:48:21
	 */
	private StringBuffer calculate20A(List<AcpayItemVo> bivoList, String kindCode) {
		StringBuffer tmpText = new StringBuffer();
		tmpText.append(DataDictionary.KINDCODE_20A_ZHNAME + "：\n");
		for (AcpayItemVo acpayItemVo : bivoList) {
			if (acpayItemVo.getKindCode().equals(kindCode)) {
				Double absDeductibleRate = acpayItemVo.getAbsDeductibleRate() != null ? acpayItemVo.getAbsDeductibleRate() : 0.0;
				Double absDeductibleAmount = acpayItemVo.getAbsDeductibleAmount() != null ? acpayItemVo.getAbsDeductibleAmount() : 0.0;
				Double rescueFee = acpayItemVo.getRescueFee() != null ? acpayItemVo.getRescueFee() : 0.0;
				tmpText.append(acpayItemVo.getLicenseNo() + "车损险赔偿金额 = " + acpayItemVo.getIndemnityPaid() + "元 \n");
				if(absDeductibleRate>0){
					tmpText.append("绝对免赔率 :" + absDeductibleRate + "% \n");
				}
				if(absDeductibleAmount>0){
					tmpText.append("绝对免赔额:" + absDeductibleAmount + "元 \n");
				}
				tmpText.append(acpayItemVo.getLicenseNo() + "实赔金额 = " + acpayItemVo.getSumRealpay() + "元 \n");
				tmpText.append(acpayItemVo.getLicenseNo() + "施救费 = " + rescueFee + "元 \n \n");
			}
		}
		return tmpText;
	}

	/**
	 * @Title: initTraProcess
	 * @Description: TODO(交强计算过程)
	 * @author 莫浩锋
	 * @param bivoList
	 * @param mesnePayAmount
	 * @param sumPrePaid
	 * @return
	 * @return String
	 * @throws
	 * @date Dec 17, 2012 4:35:36 PM
	 */
	public String initTraProcess(List<AcpayItemVo> travoList, List<AcpayItemVo> travoNoDutyList, Double mesnePayAmount, Double sumPrePaid) {
		StringBuffer process = new StringBuffer();
		StringBuffer acLoss = new StringBuffer();
		StringBuffer medical = new StringBuffer();
		StringBuffer death = new StringBuffer();
		StringBuffer noDuty = new StringBuffer();
		StringBuffer lossCount = new StringBuffer();
		StringBuffer medicalCount = new StringBuffer();
		StringBuffer deathCount = new StringBuffer();
		StringBuffer noDutyCount = new StringBuffer();
		Double lossAmount = 0.0;
		Double medicalAmount = 0.0;
		Double deathAmount = 0.0;
		Double noDutyAmount = 0.0;
		acLoss.append("财产赔款：\n");
		medical.append("医疗赔款：\n");
		death.append("死亡伤残赔款：\n");
		noDuty.append("无责代赔：\n");
		lossCount.append("财产赔款金额：");
		medicalCount.append("医疗赔偿金额：");
		deathCount.append("死亡伤残赔偿金额：");
		noDutyCount.append("无责代赔金额：");
		int acLossFlag = 0;
		int medicalFalg = 0;
		int deathFlag = 0;
		int noDutyFlag = 0;
		for (int i = 0; i < travoList.size(); i++) {
			AcpayItemVo vo = travoList.get(i);
			if (vo.getSumRealpay() == null) {
				vo.setSumRealpay(0.0);
			}
			if (DataDictionary.LOSSTYPE_CAR.equals(vo.getLossType()) || DataDictionary.LOSSTYPE_PROPERTY.equals(vo.getLossType())) {
				acLoss.append(vo.getLossAttrName() + " (" + vo.getLossItemName() + ") ：实赔金额 = " + vo.getSumRealpay() + "元\n");
				lossCount.append(vo.getSumRealpay() + "+");
				lossAmount += vo.getSumRealpay();
				acLossFlag++;
			} else {
				if (DataDictionary.ACPERSONLOSS_MEDICAL.equals(vo.getSubFeeTypeCode())) {
					medical.append(vo.getLossItemName() + " ：实赔金额 = " + vo.getSumRealpay() + "元\n");
					medicalCount.append(vo.getSumRealpay() + "+");
					medicalAmount += vo.getSumRealpay();
					medicalFalg++;
				} else {
					if(!DataDictionary.ACPERSONLOSS_MENTAL.equals(vo.getSubFeeTypeCode())) {
						Double sumRealpay=vo.getSumRealpay();
						Double mental = findMental(vo, travoList);
						sumRealpay +=mental;
						death.append(vo.getLossItemName() + " ：实赔金额 = " + sumRealpay + "元\n");
						if (mental>0.0) {
							death.append("（其中精神损失：" + mental + "元 ）\n");
						}
						deathCount.append(sumRealpay + "+");
						deathAmount += sumRealpay;
						deathFlag++;
						
					}
				}
			}
		}
		for (AcpayItemVo vo : travoNoDutyList) {
			if (vo.getSumRealpay() == null) {
				vo.setSumRealpay(0.0);
			}
			noDuty.append(vo.getLossAttrName() + " (" + vo.getLossItemName() + ") ：无责代赔金额 = " + vo.getSumRealpay() + "元\n");
			noDutyCount.append(vo.getSumRealpay() + "+");
			noDutyAmount += vo.getSumRealpay();
			noDutyFlag++;
		}
		if (acLossFlag > 0) {
			process.append(acLoss);
			if (acLossFlag == 1) {
				process.append("财产赔款金额 = " + CommonMethod.doubleRound_Down(lossAmount) + "元 \n \n");
			} else {
				process.append(lossCount.substring(0, lossCount.length() - 1) + " = " + lossAmount + "元 \n \n");
			}
		}
		if (medicalFalg > 0) {
			process.append(medical);
			if (medicalFalg == 1) {
				process.append("医疗赔款金额 = " + CommonMethod.doubleRound_Down(medicalAmount) + "元 \n \n");
			} else {
				process.append(medicalCount.substring(0, medicalCount.length() - 1) + " = " + medicalAmount + "元 \n \n");
			}
		}
		if (deathFlag > 0) {
			process.append(death);
			if (deathFlag == 1) {
				process.append("死亡伤残赔款金额 = " + CommonMethod.doubleRound_Down(deathAmount) + "元 \n \n");
			} else {
				process.append(deathCount.substring(0, deathCount.length() - 1) + " = " + deathAmount + "元 \n \n");
			}
		}
		if (noDutyFlag > 0) {
			process.append(noDuty);
			if (noDutyFlag == 1) {
				process.append("无责代赔金额 = " + CommonMethod.doubleRound_Down(noDutyAmount) + "元 \n \n");
			} else {
				process.append(noDutyCount.substring(0, noDutyCount.length() - 1) + " = " + noDutyAmount + "元 \n \n");
			}
		}
		Double sumAcount = CommonMethod.doubleRound_Down(lossAmount + medicalAmount + deathAmount + noDutyAmount);
		Double acount = CommonMethod.doubleRound_Down(mesnePayAmount + sumPrePaid);
		Double singleSumAcount = CommonMethod.doubleRound_Down(sumAcount - mesnePayAmount - sumPrePaid);
		process.append("总实赔金额 = 财产赔款金额 + 医疗赔款金额 + 死亡伤残赔款金额 + 无责代赔 = " + CommonMethod.doubleRound_Down(lossAmount) + " + "
				+ CommonMethod.doubleRound_Down(medicalAmount) + " + " + CommonMethod.doubleRound_Down(deathAmount) + " + "
				+ CommonMethod.doubleRound_Down(noDutyAmount) + " = " + sumAcount + "元 \n");
		process.append("本次赔款金额 = 实赔合计 - 已提前支付赔款 = " + sumAcount + " - " + acount + " = " + singleSumAcount + "元 \n");

		return process.toString();
	}

	/**
	 * @Title: findMental
	 * @Description: TODO(判断是否存在精神损失)
	 * @author 莫浩锋
	 * @param vo
	 * @param travoList
	 * @return
	 * @return String
	 * @throws
	 * @date Oct 24, 2012 4:21:51 PM
	 */
	private Double findMental(AcpayItemVo vo, List<AcpayItemVo> travoList) {
		for (AcpayItemVo itemVo : travoList) {
			if (itemVo.getDefLossTaskId().equals(vo.getDefLossTaskId())
					&& DataDictionary.ACPERSONLOSS_MENTAL.equals(itemVo.getSubFeeTypeCode())) {
				return itemVo.getSumRealpay();
			}
		}
		return 0.0;
	}

	/**
	 * @Title: initChargeText
	 * @Description: TODO(费用计算过程)
	 * @author 莫浩锋
	 * @param chargeList
	 * @return
	 * @return String
	 * @throws
	 * @date Dec 18, 2012 11:02:00 AM
	 */
	public String initChargeText(List<AcCharge> chargeList) {
		StringBuffer processText = new StringBuffer();
		if (chargeList.size() > 0) {
			StringBuffer feeAmountText = new StringBuffer();
			StringBuffer chargeText = new StringBuffer();
			Double chargeAmount = 0.0;
			Double preChargeFee = 0.0;
			chargeText.append("费用：\n");
			for (AcCharge charge : chargeList) {
				if (DataDictionary.KINDCODE_BZ9.equals(charge.getKindCode())) {
					continue;
				}
				if (DataDictionary.KINDCODE_BZ.equals(charge.getKindCode()) || DataDictionary.KINDCODE_20BZ.equals(charge.getKindCode())) {
					chargeText.append(charge.getChargeName() + "金额 = " + charge.getChargeAmount() + "元 \n");
				} else {
					String kindName = CommonMethod.findKindNameByKindCode(charge.getKindCode());
					chargeText.append(kindName + "：" + charge.getChargeName() + "金额 = " + charge.getChargeAmount() + "元 \n");
				}
				feeAmountText.append(charge.getChargeAmount() + " +");
				chargeAmount += charge.getChargeAmount();
				preChargeFee += charge.getPreChargeFee();
			}
			Double sumAcoumt = CommonMethod.doubleRound_Down(chargeAmount - preChargeFee);
			processText.append(chargeText + "\n");
			if (chargeList.size() == 1) {
				processText.append("费用金额 = " + chargeAmount + "元 \n");
			} else {
				processText.append("费用金额 = " + feeAmountText.substring(0, feeAmountText.length() - 1) + " = " + chargeAmount + "元 \n");
			}
			processText.append("本次费用金额 = 费用金额 - 已提前支付费用金额 = " + CommonMethod.doubleRound_Down(chargeAmount) + " - " + preChargeFee + " = "
					+ sumAcoumt + "元 \n");
		}
		return processText.toString();
	}

	/**
	 * 
	 * @Title: checkTrafficResult
	 * @Description: TODO(检查交强险是否超限额)
	 * @author 李科
	 * @param travoList
	 * @return
	 * @return String
	 * @throws
	 * @date 2012-12-24 下午2:29:54
	 */
	private String checkTrafficResult(List<AccarinfoVo> accarinfoList, List<AcpayItemVo> lossList, List<AcpayItemVo> personList) {
		Double lossAmount = 0.0;
		Double medicaAmount = 0.0;
		Double deathAmount = 0.0;
		String message = "";
		AccarinfoVo accarinfoVo = findItemCar(accarinfoList);
		if (accarinfoVo == null) {
			return message;
		}
		boolean dutyFlag = accarinfoVo.isDutyFlag();

		for (AcpayItemVo acpayItemVo : lossList) {
			if (acpayItemVo.getIndemnityPaid() == null) {
				acpayItemVo.setIndemnityPaid(0.0);
			}
			if (acpayItemVo.getType().equals(DataDictionary.ACPAYITEMVO_TYPE_LOSS)) {
				lossAmount += acpayItemVo.getIndemnityPaid();
			}
		}
		for (AcpayItemVo acpayItemVo : personList) {
			if (acpayItemVo.getIndemnityPaid() == null) {
				acpayItemVo.setIndemnityPaid(0.0);
			}

			if (DataDictionary.ACPERSONLOSS_DEATH.equals(acpayItemVo.getFeeTypeCode())) {
				deathAmount += acpayItemVo.getIndemnityPaid();
			} else {
				medicaAmount += acpayItemVo.getIndemnityPaid();
			}
		}
		String BZlimitFlag = commonService.find2020BZSwithcValue(accarinfoVo.getReportNo());
		// 如果有责
		if (dutyFlag) {
			if (lossAmount > DataDictionary.LOSS_LIMIT + 0.001) {
				message += " 物损赔付超限额(" + DataDictionary.LOSS_LIMIT + ")";
			}
			if(DataDictionary.BZ_2020_LIMIT_FLAG.equals(BZlimitFlag)){
				if (medicaAmount > DataDictionary.MEDICAL_LIMIT2020 + 0.001) {
					message += " 医疗赔付超限额(" + DataDictionary.MEDICAL_LIMIT2020 + ")";
				}
				if (deathAmount > DataDictionary.DEATH_LIMIT2020 + 0.001) {
					message += " 死亡伤残赔付超限额(" + DataDictionary.DEATH_LIMIT2020 + ")";
				}				
			}else{
				if (medicaAmount > DataDictionary.MEDICAL_LIMIT + 0.001) {
					message += " 医疗赔付超限额(" + DataDictionary.MEDICAL_LIMIT + ")";
				}
				if (deathAmount > DataDictionary.DEATH_LIMIT + 0.001) {
					message += " 死亡伤残赔付超限额(" + DataDictionary.DEATH_LIMIT + ")";
				}
			}
		} else {
			if (lossAmount > DataDictionary.NODUTY_LOSS_LIMIT + 0.001) {
				message += " 物损赔付超限额(" + DataDictionary.NODUTY_LOSS_LIMIT + ")";
			}
			if(DataDictionary.BZ_2020_LIMIT_FLAG.equals(BZlimitFlag)){
				if (medicaAmount > DataDictionary.NODUTY_MEDICAL_LIMIT2020 + 0.001) {
					message += " 医疗赔付超限额(" + DataDictionary.NODUTY_MEDICAL_LIMIT2020 + ")";
				}
				if (deathAmount > DataDictionary.NODUTY_DEATH_LIMIT2020 + 0.001) {
					message += " 死亡伤残赔付超限额(" + DataDictionary.NODUTY_DEATH_LIMIT2020 + ")";
				}				
			}else{
				if (medicaAmount > DataDictionary.NODUTY_MEDICAL_LIMIT + 0.001) {
					message += " 医疗赔付超限额(" + DataDictionary.NODUTY_MEDICAL_LIMIT + ")";
				}
				if (deathAmount > DataDictionary.NODUTY_DEATH_LIMIT + 0.001) {
					message += " 死亡伤残赔付超限额(" + DataDictionary.NODUTY_DEATH_LIMIT + ")";
				}
			}
		}
		return message;

	}

	/**
	 * @Title: findItemCar
	 * @Description: TODO(查找标的车)
	 * @param aclossVo
	 * @param accarinfoVoList
	 * @return
	 * @return boolean
	 * @throws
	 * @date 2012-9-6 下午5:24:33
	 */
	private AccarinfoVo findItemCar(List<AccarinfoVo> accarinfoVoList) {
		for (AccarinfoVo accarinfoVo : accarinfoVoList) {
			if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(accarinfoVo.getLossAttrCode())) {
				return accarinfoVo;
			}
		}
		return null;
	}

	/**
	 * 
	 * @Title: checkTrafficResult
	 * @Description: TODO(检查交强险是否超限额)
	 * @author 李科
	 * @param travoList
	 * @return
	 * @return String
	 * @throws
	 * @date 2012-12-24 下午2:29:54
	 */
	public String checkBiDeductbzamount(List<AcpayItemVo> traffilossList, List<AcpayItemVo> biLossList,Map<String, String> kindCodeMap) {
		Double lossAmount = 0.0;
		Double medicaAmount = 0.0;
		Double deathAmount = 0.0;
		Double bilossAmount = 0.0;
		Double bimedicaAmount = 0.0;
		Double bideathAmount = 0.0;
		String message = "";
		for (AcpayItemVo acpayItemVo : traffilossList) {
			if (acpayItemVo.getIndemnityPaid() == null) {
				acpayItemVo.setIndemnityPaid(0.0);
			}
			if (acpayItemVo.getDeductBzamount() == null) {
				acpayItemVo.setDeductBzamount(0.0);
			}
			String B_kindcode=DataDictionary.KINDCODE_B;
			if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20B)){
				B_kindcode = DataDictionary.KINDCODE_20B;
			}
			// 检查这项损失在商业险是否存在
			String kindCode = acpayItemVo.getKindCode();
			if (kindCode.equals(DataDictionary.KINDCODE_BZ)||kindCode.equals(DataDictionary.KINDCODE_20BZ)) {
				kindCode = B_kindcode;
			}
			for (AcpayItemVo biAcpayItemVo : biLossList) {
				if (biAcpayItemVo.getFeeTypeCode() == null)
					biAcpayItemVo.setFeeTypeCode("");
				if (acpayItemVo.getFeeTypeCode() == null)
					acpayItemVo.setFeeTypeCode("");

				if (biAcpayItemVo.getKindCode().equals(kindCode) && biAcpayItemVo.getDefLossTaskId().equals(acpayItemVo.getDefLossTaskId())
						&& biAcpayItemVo.getFeeTypeCode().equals(acpayItemVo.getFeeTypeCode())) {
					if (acpayItemVo.getType().equals(DataDictionary.ACPAYITEMVO_TYPE_LOSS)) {
						lossAmount += acpayItemVo.getIndemnityPaid();
					} else {
						if (DataDictionary.ACPERSONLOSS_DEATH.equals(acpayItemVo.getFeeTypeCode())) {
							deathAmount += acpayItemVo.getIndemnityPaid();
						} else {
							medicaAmount += acpayItemVo.getIndemnityPaid();
						}
					}
				}
			}

		}
		for (AcpayItemVo acpayItemVo : biLossList) {
			if (acpayItemVo.getIndemnityPaid() == null) {
				acpayItemVo.setIndemnityPaid(0.0);
			}
			if (acpayItemVo.getDeductBzamount() == null) {
				acpayItemVo.setDeductBzamount(0.0);
			}
			if (acpayItemVo.getType().equals(DataDictionary.ACPAYITEMVO_TYPE_LOSS)) {
				bilossAmount += acpayItemVo.getDeductBzamount();
			} else {
				if (DataDictionary.ACPERSONLOSS_DEATH.equals(acpayItemVo.getFeeTypeCode())) {
					bideathAmount += acpayItemVo.getDeductBzamount();
				} else {
					bimedicaAmount += acpayItemVo.getDeductBzamount();
				}
			}
		}
		if (bilossAmount + 0.001 < lossAmount) {
			message += " 物损商业险扣交强金额(" + bilossAmount + ") < 交强险计算结果(" + lossAmount + ")";
		}
		if (bideathAmount + 0.001 < deathAmount) {
			message += " 死亡伤残商业险扣交强金额(" + bideathAmount + ") < 交强险计算结果(" + deathAmount + ")";
		}
		if (bimedicaAmount + 0.001 < medicaAmount) {
			message += " 医疗商业险扣交强金额(" + bimedicaAmount + ") < 交强险计算结果(" + medicaAmount + ")";
		}
		return message;
	}

	/**
	 * @Title: checkBiIndemnityPaid
	 * @Description: TODO(检测商业赔偿金额是否超保额)
	 * @author 莫浩锋
	 * @param traffilossList
	 * @param biLossList
	 * @return
	 * @return String
	 * @throws
	 * @date Dec 24, 2012 5:41:21 PM
	 */
	public String checkBiIndemnityPaid(List<AcpayItemVo> biLossList) {
		StringBuffer message = new StringBuffer();
		if (biLossList.size() > 0) {
			Iterator<String> kindcodes = findAllKindCode(biLossList);
			List<AclcItemKind> lcItemKindList = findLcItemKindList(biLossList.get(0).getReportNo());
			while (kindcodes.hasNext()) {

				String kindcode = kindcodes.next();
				if (DataDictionary.KINDCODE_F.equals(kindcode)||DataDictionary.KINDCODE_I.equals(kindcode)) {
					continue;
				}
				if (DataDictionary.KINDCODE_A.equals(kindcode)
						||DataDictionary.KINDCODE_A1.equals(kindcode)
						||DataDictionary.KINDCODE_20A.equals(kindcode)) {
					for (AcpayItemVo payItemVo : biLossList) {
						if (payItemVo.getKindCode().equals(kindcode)) {
							for (AclcItemKind lcItemKind : lcItemKindList) {
								if (lcItemKind.getKindCode().equals(kindcode)) {
									if (payItemVo.getIndemnityPaid() > lcItemKind.getAmount() + 0.001) {
										// kindeCode转换中文名称
										String kindName = CommonMethod.findKindNameByKindCode(kindcode);
										message.append(kindName + " 赔偿金额(" + payItemVo.getIndemnityPaid() + ") 超出承保限额("
												+ lcItemKind.getAmount() + ") ");
									}
									break;
								}
							}
						}
					}
				} else {
					Double sumPay = 0.0;
					for (AcpayItemVo payItemVo : biLossList) {
						if (payItemVo.getKindCode().equals(kindcode))
							sumPay += payItemVo.getIndemnityPaid();
					}
					String KindCode_J ="0";
					//判断是否投保第三者责任保险法定节假日限额翻倍险并且是法定节假日
					for (AclcItemKind lcItemKind : lcItemKindList) {
						if(DataDictionary.RISKCODE_0518.equals(lcItemKind.getRiskCode())&&(DataDictionary.KINDCODE_J.equals(lcItemKind.getKindCode())
								||DataDictionary.KINDCODE_20J.equals(lcItemKind.getKindCode()))) {
							AcReport acReport = reportService.findByReportNo(lcItemKind.getReportNo());
							SimpleDateFormat fmt=new SimpleDateFormat("yyyy-MM-dd");
							AgWorkDate  startDate = this.findUnique(AgWorkDate.class, "day", fmt.format(acReport.getDamageTime()));
							if(startDate==null ||startDate.getIsWorkDay()==null){
								throw new BusinessException("出险日期"+acReport.getDamageTime()+"未维护法定节假日基础数据，请联系管理员!", null);
							}							
							if("1".equals(startDate.getIsWorkDay())){
								KindCode_J = "1";
							}
							break;
						}
					}
					for (AclcItemKind lcItemKind : lcItemKindList) {
						if (lcItemKind.getKindCode().equals(kindcode)) {
							Double limitPay = 0.0;
							// 设置限额
							if ((DataDictionary.KINDCODE_B.equals(lcItemKind.getKindCode())
									||DataDictionary.KINDCODE_20B.equals(lcItemKind.getKindCode()))
									&&"1".equals(KindCode_J)){
								limitPay = lcItemKind.getAmount()*2;
								logger.debug("报案号："+lcItemKind.getReportNo()+",投保第三者责任保险法定节假日限额翻倍险并且是法定节假日，限额："+limitPay);
							}else{
								if(DataDictionary.KINDCODE_X1.equals(kindcode)||DataDictionary.KINDCODE_X3.equals(kindcode)){//发动机涉水损失险使用车险保险金额
									for (AclcItemKind tmpaclcitemKind : lcItemKindList) {
										if (tmpaclcitemKind.getKindCode().equals(DataDictionary.KINDCODE_A)) {
											limitPay = tmpaclcitemKind.getAmount();
											break;
										}
									}
								}else{
									limitPay = lcItemKind.getAmount();		
								}
							}
							if (sumPay > limitPay + 0.001) {
								// kindeCode转换中文名称
								String kindName = CommonMethod.findKindNameByKindCode(kindcode);
								message.append(kindName + " 赔偿金额(" + sumPay + ") 超出承保限额(" + limitPay + ") ");
							}
							break;
						}
					}
				}
			}
		}
		return message.toString();
	}

	/**
	 * @Title: findAcCompensateByRiskCodeAndReportNo
	 * @Description: TODO(根据报案号和险种获取计算书列表，主要用于结案回写档案编号)
	 * @author 李魁服
	 * @param reportNo
	 * @param riskCode
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Dec 25, 2012 8:04:59 PM
	 */
	public List<AcCompensate> findCompensateByRiskCodeReportNo(String reportNo, String riskCode) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		queryRule.addEqual("riskCode", riskCode);
		List<AcCompensate> acCompensateList = super.find(queryRule);
		return acCompensateList;
	}

	/**
	 * @Title: findCompensateByReportNo
	 * @Description: TODO(根据报案号获取计算书列表)
	 * @author 李魁服
	 * @param reportNo
	 * @return
	 * @return List<AcCompensate>
	 * @throws
	 * @date Dec 27, 2012 8:43:55 PM
	 */
	public List<AcCompensate> findCompensateByReportNo(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		List<AcCompensate> acCompensateList = super.find(queryRule);
		return acCompensateList;
	}

	/**
	 * @Title: findUWBiCompensateByReportNo
	 * @Description: TODO(根据报案号获取已核赔通过的商业计算书)
	 * @author 李魁服
	 * @param reportNo
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findUWBiCompensateByReportNo(java.lang.String)
	 * @date Jan 16, 2013 9:10:52 PM
	 */
	public List<AcCompensate> findUWBiCompensateByReportNo(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		queryRule.addNotEqual("riskCode", DataDictionary.RISKCODE_CI);
		queryRule.addSql(" underWriteFlag in ('1','3') ");
		List<AcCompensate> acCompensateList = super.find(queryRule);
		return acCompensateList;
	}

	/**
	 * @Title: findUWCiCompensateByReportNo
	 * @Description: TODO(根据报案号获取已核赔通过的交强计算书)
	 * @author 李魁服
	 * @param reportNo
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findUWCiCompensateByReportNo(java.lang.String)
	 * @date Jan 16, 2013 9:11:34 PM
	 */
	public List<AcCompensate> findUWCiCompensateByReportNo(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		queryRule.addEqual("riskCode", DataDictionary.RISKCODE_CI);
		queryRule.addSql(" underWriteFlag in ('1','3') ");
		List<AcCompensate> acCompensateList = super.find(queryRule);
		return acCompensateList;
	}

	/**
	 * @Title: findUWAllCompensateByReportNo
	 * @Description: TODO(根据报案号获取所有已核赔通过的计算书)
	 * @author 李魁服
	 * @param reportNo
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findUWAllCompensateByReportNo(java.lang.String)
	 * @date Jan 20, 2013 7:28:44 PM
	 */
	public List<AcCompensate> findUWAllCompensateByReportNo(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		queryRule.addSql(" underWriteFlag in ('1','3') ");
		List<AcCompensate> acCompensateList = super.find(queryRule);
		return acCompensateList;
	}
	/**
	 * @Title: findUWAllCompensateByReportNoAndClaimNo
	 * @Description: TODO(根据立案号获取所有已核赔通过的计算书)
	 * @param claimno
	 * @return
	 * @date 2014年8月13日16:52:15
	 */
	public List<AcCompensate> findUWAllCompensateByReportNoAndClaimNo(String claimNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("claimNo", claimNo);
		queryRule.addSql(" underWriteFlag in ('1','3') ");
		List<AcCompensate> acCompensateList = super.find(queryRule);
		return acCompensateList;
	}
	/**
	 * 
	 * @Title: checkPaymentInfo
	 * @Description: TODO(判断核赔拆分金额是否正确)
	 * @author 何颖
	 * @param AcCompensate
	 *            acCompensate
	 * @return boolean
	 * @date Dec 11, 2012 11:36:16 AM
	 */
	public boolean checkPaymentInfo(AcCompensate acCompensate) {
		// TODO Auto-generated method stub
		acCompensate = this.get(AcCompensate.class, acCompensate.getId());
		if (acCompensate.getSumDutyPaid() != null || acCompensate.getSumRealPayCharge() != null) {
			if ((acCompensate.getSumDutyPaid() > 0) || (acCompensate.getSumRealPayCharge() > 0)) {
				List<AcPaymentInfo> acPaymentinfo = new ArrayList<AcPaymentInfo>();
				acPaymentinfo = paymentInfoService.findAcpaymentinfo(acCompensate.getReportNo());
				if (acPaymentinfo.size() > 0) {
					return true;
				} else {
					return false;
				}
			}
		}
		return true;
	}

	/**
	 * 
	 * @Title: checkPaymentInfo
	 * @Description: TODO(是否是主挂车互赔)
	 * @author 李科
	 * @param AcCompensate
	 *            acCompensate
	 * @return boolean
	 * @date Dec 11, 2012 11:36:16 AM
	 */
	public boolean IsMainTrailer(AccarinfoVo accarinfoVo1, AccarinfoVo accarinfoVo2) {
		if (accarinfoVo1.getMainTrailerCode() != null && accarinfoVo1.getMainTrailerCode().equals(DataDictionary.MAINTRAILERCODE_MAIN)
				&& accarinfoVo1.getTrailerLicenseCode().equals(accarinfoVo2.getAcReportCarInfoId())
				&& accarinfoVo1.getPayEachOtherFlag() != null
				&& accarinfoVo1.getPayEachOtherFlag().equals(DataDictionary.PAEACHOTHERFLAG_NO)) {
			return true;
		}
		if (accarinfoVo2.getMainTrailerCode() != null && accarinfoVo2.getMainTrailerCode().equals(DataDictionary.MAINTRAILERCODE_MAIN)
				&& accarinfoVo2.getTrailerLicenseCode().equals(accarinfoVo1.getAcReportCarInfoId())
				&& accarinfoVo2.getPayEachOtherFlag() != null
				&& accarinfoVo2.getPayEachOtherFlag().equals(DataDictionary.PAEACHOTHERFLAG_NO)) {
			return true;
		}
		return false;
	}

	/**
	 * 
	 * @Title: saveAcBpmCaseInfoCaseSummaryFlag
	 * @Description: TODO(案件摘要确认)
	 * @author jiayanbo
	 * @param reportNo
	 * @return void
	 * @throws
	 * @date Apr 17, 2013 5:10:28 PM
	 */
	public void saveAcBpmCaseInfoCaseSummaryFlag(String reportNo) {
		List<AcBpmCaseInfo> acBpmCaseInfoList = this.findByHql("from AcBpmCaseInfo where reportNo=?", reportNo);
		if (acBpmCaseInfoList != null && acBpmCaseInfoList.size() > 0) {
			AcBpmCaseInfo AcBpmCaseInfo = acBpmCaseInfoList.get(0);
			AcBpmCaseInfo.setCaseSummaryFlag("1");
		}

	}

	/**
	 * 
	 * @Title: saveAcBpmCaseInfoCaseSummaryFlag
	 * @Description: TODO(判断是否确认案件摘要)
	 * @author jiayanbo
	 * @param reportNo
	 * @return void
	 * @throws
	 * @date Apr 17, 2013 5:10:28 PM
	 */
	public String isSaveAcBpmCaseInfoCaseSummaryFlag(String reportNo) {
		List<AcBpmCaseInfo> acBpmCaseInfoList = this.findByHql("from AcBpmCaseInfo where reportNo=? and caseSummaryFlag='1'", reportNo);
		if (acBpmCaseInfoList != null && acBpmCaseInfoList.size() > 0) {
			return "S";
		} else
			return "F";

	}

	/**
	 * 
	 * @Title: findTaskACBpmMainByReportNo
	 * @Description: TODO(查询车物人节点的任务)
	 * @author jiayanbo
	 * @param reportNo
	 * @return
	 * @return List<ACBpmMain>
	 * @throws
	 * @date Apr 23, 2013 5:15:08 PM
	 */
	@SuppressWarnings("unchecked")
	public List<ACBpmMain> findTaskACBpmMainByReportNo(String reportNo) {
		@SuppressWarnings("unused")
		List<ACBpmMain> ACBpmMainListFinal = new ArrayList<ACBpmMain>();
		List<ACBpmMain> ACBpmMainList = this.findByHql("from ACBpmMain  where reportNo=? and parentNodeId in(?,?) and nodeId in (?,?,?) ",
				reportNo, BpmConstants.SCHEDULE_NODEID, BpmConstants.SURVEY_NODEID, BpmConstants.CARDEFLOSS_NODEID,
				BpmConstants.PROPDEFLOSS_NODEID, BpmConstants.PERSONDEFLOSS_NODEID);
		if (ACBpmMainList != null && ACBpmMainList.size() > 0) {
			for (ACBpmMain aCBpmMain : ACBpmMainList) {
				ACBpmMain aCBpmMainNew = new ACBpmMain();
				// 损失名称
				aCBpmMainNew.setTaskTitle(aCBpmMain.getTaskTitle());
				// 是否增减
				if (BpmConstants.SCHEDULE_NODEID.equals(aCBpmMain.getParentNodeId())) {
					aCBpmMainNew.setFlag("否");
				} else {
					// 1、2、0属于正常案件（新增的），其他的属于注销的
					if ("1".equals(aCBpmMain.getTaskStatus()) || "2".equals(aCBpmMain.getTaskStatus())
							|| "0".equals(aCBpmMain.getTaskStatus())) {
						aCBpmMainNew.setFlag("增加");
					} else {
						aCBpmMainNew.setFlag("减少");
					}
				}
				aCBpmMainNew.setHandlerName(aCBpmMain.getHandlerName());
				if (aCBpmMain.getCreateTime() != null) {
					DateTime operatorTime = new DateTime(aCBpmMain.getCreateTime(), DateTime.YEAR_TO_SECOND);
					aCBpmMainNew.setCreateTime(operatorTime);
				}
				ACBpmMainListFinal.add(aCBpmMainNew);
			}
		}
		return ACBpmMainListFinal;
	}

	/**
	 * @Title: initCiLossSumAcountVo
	 * @Description: TODO(初始化交强总金额信息)
	 * @author 莫浩锋
	 * @param traList
	 * @return
	 * @return SumAcountVo
	 * @throws
	 * @date Apr 15, 2013 10:29:10 AM
	 */

	public SumAcountVo initCiLossSumAcountVo(List<AcpayItemVo> traList) {
		SumAcountVo sumAcountVo = new SumAcountVo();
		Double sumLossAcount = 0.0;
		Double sumRejectamount = 0.0;
		Double sumIndemnityPaid = 0.0;
		for (AcpayItemVo payItemVo : traList) {
			sumLossAcount += payItemVo.getSumLossAmount();
			sumRejectamount += payItemVo.getRejectAmount() != null ? payItemVo.getRejectAmount() : 0.0;
			sumIndemnityPaid += payItemVo.getIndemnityPaid() != null ? payItemVo.getIndemnityPaid() : 0.0;
		}
		sumAcountVo.setSumLossAcount(CommonMethod.doubleRound_Down(sumLossAcount));
		sumAcountVo.setSumRejectamount(CommonMethod.doubleRound_Down(sumRejectamount));
		sumAcountVo.setSumIndemnityPaid(CommonMethod.doubleRound_Down(sumIndemnityPaid));
		return sumAcountVo;
	}

	/**
	 * @Title: initBiLossSumAcountVo
	 * @Description: TODO(初始化商业总金额信息)
	 * @author 莫浩锋
	 * @param traList
	 * @return
	 * @return SumAcountVo
	 * @throws
	 * @date Apr 15, 2013 10:29:12 AM
	 */
	public SumAcountVo initBiLossSumAcountVo(List<AcpayItemVo> biList) {
		SumAcountVo sumAcountVo = new SumAcountVo();
		Double sumLossAcount = 0.0;
		Double sumRejectamount = 0.0;
		Double sumIndemnityPaid = 0.0;
		Double sumDeductBzamount = 0.0;
		Double sumAbsDeductibleAmount = 0.0;
		for (AcpayItemVo payItemVo : biList) {
			sumLossAcount += payItemVo.getSumLossAmount();
			sumRejectamount += payItemVo.getRejectAmount() != null ? payItemVo.getRejectAmount() : 0.0;
			sumIndemnityPaid += payItemVo.getIndemnityPaid() != null ? payItemVo.getIndemnityPaid() : 0.0;
			sumDeductBzamount += payItemVo.getDeductBzamount() != null ? payItemVo.getDeductBzamount() : 0.0;
			sumAbsDeductibleAmount += payItemVo.getAbsDeductibleAmount() != null ? payItemVo.getAbsDeductibleAmount() : 0.0;
		}
		sumAcountVo.setSumLossAcount(CommonMethod.doubleRound_Down(sumLossAcount));
		sumAcountVo.setSumRejectamount(CommonMethod.doubleRound_Down(sumRejectamount));
		sumAcountVo.setSumIndemnityPaid(CommonMethod.doubleRound_Down(sumIndemnityPaid));
		sumAcountVo.setSumDeductBzamount(CommonMethod.doubleRound_Down(sumDeductBzamount));
		sumAcountVo.setSumAbsDeductibleAmount(CommonMethod.doubleRound_Down(sumAbsDeductibleAmount));
		return sumAcountVo;
	}

	/**
	 * @Title: initCiNoDutySumAcountVo
	 * @Description: TODO(初始化无责代赔总金额信息)
	 * @author 莫浩锋
	 * @param travoNoDutyList
	 * @return
	 * @return SumAcountVo
	 * @throws
	 * @date Apr 15, 2013 10:29:19 AM
	 */
	public SumAcountVo initCiNoDutySumAcountVo(List<AcpayItemVo> travoNoDutyList) {
		SumAcountVo sumAcountVo = new SumAcountVo();
		Double sumIndemnityPaid = 0.0;
		for (AcpayItemVo payItemVo : travoNoDutyList) {
			sumIndemnityPaid += payItemVo.getIndemnityPaid() != null ? payItemVo.getSumRealpay() : 0.0;
		}
		sumAcountVo.setSumIndemnityPaid(CommonMethod.doubleRound_Down(sumIndemnityPaid));
		return sumAcountVo;
	}

	/**
	 * @Title: initFeeSumAcountVo
	 * @Description: TODO(初始化费用金额汇总)
	 * @author 莫浩锋
	 * @param trachargeList
	 * @param bichargeList
	 * @return
	 * @return SumAcountVo
	 * @throws
	 * @date Apr 15, 2013 11:13:54 AM
	 */
	public SumAcountVo initFeeSumAcountVo(List<AcCharge> trachargeList, List<AcCharge> bichargeList) {
		SumAcountVo sumAcountVo = new SumAcountVo();
		Double sumFeeAmount = 0.0;
		Double sumRejectamount = 0.0;
		Double sumChargeAmount = 0.0;
		Double sumPreChargeFee = 0.0;
		Double sumRealPayAmount = 0.0;
		for (AcCharge charge : trachargeList) {
			sumFeeAmount += charge.getFeeAmount();
			sumRejectamount += charge.getRejectAmount() != null ? charge.getRejectAmount() : 0.0;
			sumChargeAmount += charge.getChargeAmount() != null ? charge.getChargeAmount() : 0.0;
			sumPreChargeFee += charge.getPreChargeFee() != null ? charge.getPreChargeFee() : 0.0;
			sumRealPayAmount += charge.getSumRealPayAmount() != null ? charge.getSumRealPayAmount() : 0.0;
		}
		for (AcCharge charge : bichargeList) {
			sumFeeAmount += charge.getFeeAmount();
			sumRejectamount += charge.getRejectAmount() != null ? charge.getRejectAmount() : 0.0;
			sumChargeAmount += charge.getChargeAmount() != null ? charge.getChargeAmount() : 0.0;
			sumPreChargeFee += charge.getPreChargeFee() != null ? charge.getPreChargeFee() : 0.0;
			sumRealPayAmount += charge.getSumRealPayAmount() != null ? charge.getSumRealPayAmount() : 0.0;
		}
		sumAcountVo.setSumFeeAmount(CommonMethod.doubleRound_Down(sumFeeAmount));
		sumAcountVo.setSumRejectamount(CommonMethod.doubleRound_Down(sumRejectamount));
		sumAcountVo.setSumChargeAmount(CommonMethod.doubleRound_Down(sumChargeAmount));
		sumAcountVo.setSumPreChargeFee(CommonMethod.doubleRound_Down(sumPreChargeFee));
		sumAcountVo.setSumRealPayAmount(CommonMethod.doubleRound_Down(sumRealPayAmount));
		return sumAcountVo;
	}

	public SumAcountVo initFeeQuickSumAcountVo(List<AcChargeQuick> trachargeList, List<AcChargeQuick> bichargeList) {
		SumAcountVo sumAcountVo = new SumAcountVo();
		Double sumFeeAmount = 0.0;
		Double sumRejectamount = 0.0;
		Double sumChargeAmount = 0.0;
		Double sumPreChargeFee = 0.0;
		Double sumRealPayAmount = 0.0;
		for (AcChargeQuick charge : trachargeList) {
			sumFeeAmount += charge.getFeeAmount();
			sumRejectamount += charge.getRejectAmount() != null ? charge.getRejectAmount() : 0.0;
			sumChargeAmount += charge.getChargeAmount() != null ? charge.getChargeAmount() : 0.0;
			sumPreChargeFee += charge.getPreChargeFee() != null ? charge.getPreChargeFee() : 0.0;
			sumRealPayAmount += charge.getSumRealPayAmount() != null ? charge.getSumRealPayAmount() : 0.0;
		}
		for (AcChargeQuick charge : bichargeList) {
			sumFeeAmount += charge.getFeeAmount();
			sumRejectamount += charge.getRejectAmount() != null ? charge.getRejectAmount() : 0.0;
			sumChargeAmount += charge.getChargeAmount() != null ? charge.getChargeAmount() : 0.0;
			sumPreChargeFee += charge.getPreChargeFee() != null ? charge.getPreChargeFee() : 0.0;
			sumRealPayAmount += charge.getSumRealPayAmount() != null ? charge.getSumRealPayAmount() : 0.0;
		}
		sumAcountVo.setSumFeeAmount(CommonMethod.doubleRound_Down(sumFeeAmount));
		sumAcountVo.setSumRejectamount(CommonMethod.doubleRound_Down(sumRejectamount));
		sumAcountVo.setSumChargeAmount(CommonMethod.doubleRound_Down(sumChargeAmount));
		sumAcountVo.setSumPreChargeFee(CommonMethod.doubleRound_Down(sumPreChargeFee));
		sumAcountVo.setSumRealPayAmount(CommonMethod.doubleRound_Down(sumRealPayAmount));
		return sumAcountVo;
	}

	/**
	 * @Title: updateLockFlag
	 * @Description: TODO(初始化lockFlag)
	 * @author 莫浩锋
	 * @param traList
	 * @param biList
	 * @param travoNoDutyList
	 * @param subrogationLockList
	 * @return void
	 * @throws
	 * @date Jun 8, 2013 4:00:57 PM
	 */
	public void updateLockFlag(List<List<AcpayItemVo>> traList, List<List<AcpayItemVo>> biList, List<AcpayItemVo> travoNoDutyList,
			List<ACSubrogationLockMain> subrogationLockList) {
		for (ACSubrogationLockMain lockMain : subrogationLockList) {
			for (int j = 0; j < traList.size(); j++) {
				List<AcpayItemVo> ciListVo = traList.get(j);
				for (AcpayItemVo vo : ciListVo) {
					if (lockMain.getOppoentThirdLincenseNo().equals(vo.getLicenseNo())) {
						vo.setLockFlag(DataDictionary.FLAG_1);
					}
				}
			}
			for (int j = 0; j < biList.size(); j++) {
				List<AcpayItemVo> biListVo = biList.get(j);
				for (AcpayItemVo vo : biListVo) {
					if (lockMain.getOppoentThirdLincenseNo().equals(vo.getLicenseNo())) {
						vo.setLockFlag(DataDictionary.FLAG_1);
					}
				}
			}

			for (AcpayItemVo vo : travoNoDutyList) {
				if (lockMain.getOppoentThirdLincenseNo().equals(vo.getLicenseNo())) {
					vo.setLockFlag(DataDictionary.FLAG_1);
				}
			}
		}
	}

	/**
	 * @Title: initShareRate
	 * @Description: TODO(初始化标的车B险分摊比例)
	 * @author 莫浩锋
	 * @param biList
	 * @return void
	 * @throws
	 * @date Jul 29, 2013 1:06:04 PM
	 */
	public void initShareRate(List<List<AcpayItemVo>> biList, Double shareRate) {
		for (int i = 0; i < biList.size(); i++) {
			List<AcpayItemVo> list = biList.get(i);
			for (AcpayItemVo vo : list) {
				if (DataDictionary.KINDCODE_B.equals(vo.getKindCode())) {
					vo.setShareRate(shareRate);
				}
			}
		}
	}

	/**
	 * @Title: initShareRate
	 * @Description: TODO(查询核赔作废的赔款计算书表 ,即underwriteflag=5的)
	 * @author 莫浩锋
	 * @param biList
	 * @return void
	 * @throws
	 * @date Jul 29, 2013 1:06:04 PM
	 */
	public List<AcCompensate> findAllCompensateByReportNo(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		queryRule.addEqual("underWriteFlag", "5");
		List<AcCompensate> acCompensateList = super.find(queryRule);
		return acCompensateList;
	}

	/**
	 * @Title: removeNullCharge
	 * @Description: TODO(删除null的理赔费用)
	 * @author 莫浩锋
	 * @param trachargeList
	 * @param bichargeList
	 * @return void
	 * @throws
	 * @date Nov 1, 2013 10:32:30 AM
	 */
	public void removeNullCharge(List<AcCharge> trachargeList, List<AcCharge> bichargeList) {
		for (int i = 0; i < trachargeList.size(); i++) {
			AcCharge charge = trachargeList.get(i);
			if (charge == null) {
				trachargeList.remove(i);
				i--;
			}
		}
		for (int i = 0; i < bichargeList.size(); i++) {
			AcCharge charge = bichargeList.get(i);
			if (charge == null) {
				bichargeList.remove(i);
				i--;
			}
		}
	}

	/**
	 * @Title: removeNullChargeQuick
	 * @Description: TODO(删除null的理赔费用)
	 * @author 莫浩锋
	 * @param trachargeList
	 * @param bichargeList
	 * @return void
	 * @throws
	 * @date Nov 1, 2013 10:32:30 AM
	 */
	public void removeNullChargeQuick(List<AcChargeQuick> trachargeList, List<AcChargeQuick> bichargeList) {
		for (int i = 0; i < trachargeList.size(); i++) {
			AcChargeQuick charge = trachargeList.get(i);
			if (charge == null) {
				trachargeList.remove(i);
				i--;
			}
		}
		for (int i = 0; i < bichargeList.size(); i++) {
			AcChargeQuick charge = bichargeList.get(i);
			if (charge == null) {
				bichargeList.remove(i);
				i--;
			}
		}
	}

	/**
	 * @Title: findAllAcLossBillByReportNo
	 * @Description: TODO(初始化索赔票据情况)
	 * @author 康嘉鑫
	 * @param reportNo
	 * @return List<AcLossBill>
	 * @throws
	 * @date 2013-12-11 15:53:10
	 */
	public List<AcLossBill> findAllAcLossBillByReportNo(String reportNo) {
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportno", reportNo);
		return this.find(AcLossBill.class, queryRule);
	}

	/**
	 * @Title: findAllAcLossBillByReportNo
	 * @Description: KJX(保存索赔票据情况)
	 * @author 康嘉鑫
	 * @param List
	 *            <AcLossBill>
	 * @return void
	 * @throws
	 * @date 2013-12-11 15:53:10
	 */
	public void saveAcLossBillInfo(List<AcLossBill> acLossBillList) {
		if (acLossBillList != null && acLossBillList.size() > 0) {
			AcLossBill acLossBill = acLossBillList.get(0);
			String reportNo = acLossBill.getReportno();
			if (acLossBill.getId() == null)// 1.0 从定损哪里重新加载来的数据
			{
				// 1.1 删除AcLossBill表中老数据
				this.deleteAll(this.findAllAcLossBillByReportNo(reportNo));
			}
			// 1.2 插人新数据 OR 2.0 更新旧数据
			this.saveAll(acLossBillList);
		}

	}

	/**
	 * @Title: findChargeQuick
	 * @Description: TODO(初审支付出去的手动添加的理赔费用需加载到理算)
	 * @author 莫浩锋
	 * @param defLosschargeList
	 * @param reportNo
	 * @return void
	 * @throws
	 * @date Jan 20, 2014 11:17:25 AM
	 */
	public void findChargeQuick(List<AcDefLossCharge> defLosschargeList, String reportNo) {
		String hql = "from AcChargeQuick where reportNo=? and fromDeflossFlag=?";
		List<AcChargeQuick> chargeQuickList = this.findByHql(hql, reportNo, DataDictionary.FLAG_0);
		for (AcChargeQuick charge : chargeQuickList) {
			AcDefLossCharge temCharge = new AcDefLossCharge();
			temCharge.setKindCode(charge.getKindCode());
			temCharge.setChargeCode(charge.getChargeCode());
			temCharge.setVerifyLossAmount(charge.getFeeAmount());
			defLosschargeList.add(temCharge);
		}
	}

	/**
	 * @Title: aotoCompensateTask
	 * @Description: TODO(零结案自动理算)
	 * @author 莫浩锋
	 * @param reportNo
	 * @param bmpList 
	 * @return void
	 * @throws
	 * @date Mar 27, 2014 7:23:31 PM
	 */
	public void aotoCompensateTask(String reportNo, List<ACBpmMain> bmpList) {
		// 查看是否存交强在理算书
		List<AcCompensate> ciCompensate = this.findCiCompensateByReportNo(bmpList);
		// 查看是否存商业在理算书
		List<AcCompensate> biCompensate = this.findBiCompensateByReportNo(bmpList);
		// 查勘信息
		AcSurvey survey = surveyService.findAcSurveyByReportNo(reportNo);
		for (ACBpmMain bpm : bmpList) {
			AcCompensate compensate = new AcCompensate();
			if (BpmConstants.CICOMPENSATE_NODEID.equals(bpm.getNodeId())) {
				// 初始化交强理算书
				if (ciCompensate.size() > 0) {
					compensate = ciCompensate.get(0);
				}
				compensate.setIsAdvance(survey.getIsAdvance());
				compensate.setAdvanceReasonCode(survey.getAdvanceReasonCode());
				compensate.setAdvanceReasonName(survey.getAdvanceReasonName());
				// 交强立案信息
				AcClaim ciClaim = claimService.findTraClaimNoByReportNo(reportNo);
				compensate = this.initCompensate(reportNo, ciClaim, compensate);
				compensate.setTaskId(bpm.getTaskId());
				if(compensate.getIsAdvance()!=null && DataDictionary.FLAG_1.equals(compensate.getIsAdvance())){
					compensate.setCompensateType(DataDictionary.FLAG_3);
				}else{
					compensate.setCompensateType(DataDictionary.FLAG_2);
				}
				this.save(compensate);
				
			} else {
				// 初始化商业理算书
				if (biCompensate.size() > 0) {
					compensate = biCompensate.get(0);
				}
				
				// 商业立案信息
				AcClaim biClaim = claimService.findBiClaimNoByReportNo(reportNo);
				compensate = this.initCompensate(reportNo, biClaim,compensate);
				compensate.setTaskId(bpm.getTaskId());
				compensate.setCompensateType(DataDictionary.FLAG_1);
				this.save(compensate);
			
			}
		}
		
		//已经支付拆分的数据需清0
		List<AcPaymentInfo> infoList = paymentInfoService.findAcpaymentinfo(reportNo);
		for (AcPaymentInfo info : infoList) {
			info.setPlanFee(0.0);
			this.save(info);
		}
	}
	/**
	 * @Title: initZeroChargeToCompensate
	 * @Description: TODO(零结案提交理算，存在理算书，移除票据，已支付拆分清零)
	 * @param reportNo
	 * @param bmpList
	 * @throws
	 * @author duanshuyuan
	 * @date 2016-4-28 上午10:48:05
	 */
	public void initZeroChargeToCompensate(String reportNo, List<ACBpmMain> bmpList) {
		// 查看是否存交强在理算书
		List<AcCompensate> ciCompensate = this.findCiCompensateByReportNo(bmpList);
		// 查看是否存商业在理算书
		List<AcCompensate> biCompensate = this.findBiCompensateByReportNo(bmpList);
		boolean haveCompensateFlag = false; //存在理算书
		for (ACBpmMain bpm : bmpList) {
			AcCompensate compensate = new AcCompensate();
			if (BpmConstants.CICOMPENSATE_NODEID.equals(bpm.getNodeId())) {
				// 存在交强理算书
				if (ciCompensate.size() > 0) {
					haveCompensateFlag = true;
					compensate = ciCompensate.get(0);
					compensate.setTaskId(bpm.getTaskId());
					compensate.setZeroFlag(DataDictionary.COMPENSATE_ZEROFLAG_YES);
					compensate.setUnderWriteFlag(DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_ZERO);
					this.save(compensate);
				}
			} else {
				// 存在商业理算书
				if (biCompensate.size() > 0) {
					haveCompensateFlag = true;
					compensate = biCompensate.get(0);
					compensate.setTaskId(bpm.getTaskId());
					compensate.setZeroFlag(DataDictionary.COMPENSATE_ZEROFLAG_YES);
					compensate.setUnderWriteFlag(DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_ZERO);
					this.save(compensate);
				}
			
			}
		}
		if(haveCompensateFlag){
			//移除赔款票据
			List<AcLossBill> acLossBillList = this.findAllAcLossBillByReportNo(reportNo);
			if (acLossBillList != null) {
				this.deleteAll(acLossBillList);
			}
			//已经支付拆分的数据需清0
			List<AcPaymentInfo> infoList = paymentInfoService.findAcpaymentinfo(reportNo);
			for (AcPaymentInfo info : infoList) {
				info.setPlanFee(0.0);
				this.save(info);
			}
		}
	}
	
	/**
	 * @Title: closeCompensate
	 * @Description: TODO(零结案理算提交)
	 * @author 莫浩锋
	 * @param reportNo
	 * @param biCompensate 
	 * @param ciCompensate 
	 * @param bmpList 
	 * @return void
	 * @throws
	 * @date Mar 28, 2014 5:11:29 PM
	 */
	public void closeCompensate(String reportNo, List<ACBpmMain> bmpList) {
		DealUserInfoVo dealUserInfoVo = new DealUserInfoVo();
		dealUserInfoVo.setUserCode(DataDictionary.AUTO_VERIFYPAY);
		dealUserInfoVo.setUserName("自动核赔");
		dealUserInfoVo.setDealComCode(CommonMethod.getComCode());
		// 获取当前报案号下的立案
		List<AcClaim> acClaims = claimService.findAcclaimByReportNo(reportNo);
		AcClaim ciAcClaim = null;
		AcClaim biAcClaim = null;
		for (AcClaim acClaim : acClaims) {
			if (acClaim != null && (acClaim.getRiskCode().equals(DataDictionary.RISKCODE_CI))) {
				ciAcClaim = acClaim;
			} else {
				biAcClaim = acClaim;
			}
		}
		AcPayInfoVo payInfoVo = new AcPayInfoVo();
		payInfoVo.setSinglesumdutypay(0.0);
		payInfoVo.setSinglesumrealpay(0.0);
		payInfoVo.setSinglesumpaidfee(0.0);
		
		Long taskId1 = 0L,taskId2 = 0L;
		if(bmpList != null && bmpList.size() == 2){
			taskId1 = bmpList.get(0).getTaskId();
			taskId2 = bmpList.get(1).getTaskId();
		} else {
			taskId1 = bmpList.get(0).getTaskId();
		}
		for (ACBpmMain acBpmMain : bmpList) {
			if (acBpmMain.getNodeId().equals(BpmConstants.CICOMPENSATE_NODEID)) {
				if (acClaims.isEmpty() || ciAcClaim == null) {
					if (!BpmConstants.TASKSTATUS_1.equals(acBpmMain.getTaskStatus())) {
						bpmService.cancelTask(acBpmMain.getTaskId());
					}
				} else {
					List<AcCompensate> traAcompensate = findCiAccompensate(acBpmMain);
					// 封装任务列表
					List<BpmTask> bpmTaskList = new ArrayList<BpmTask>();
					BpmTask bpmTask = new BpmTask();
					bpmTask.setReportNo(reportNo);
					bpmTask.setBusinessNo(traAcompensate.get(0).getCompensateNo());
					bpmTask.setFeeAmount(traAcompensate.get(0).getSumThisDutyPaid());
					bpmTask.setBusinessId(traAcompensate.get(0).getId());
					bpmTask.setPolicyFlag(DataDictionary.FLAG_1);
					bpmTask.setBusinessTable(DataDictionary.ACCOMPENSTATE);
					// 任务时效的核赔的预超时时间和超时时间
					TaskAgingVo time = taskAgingService.getTaskAgingCommon(BpmConstants.VERIFYPAY_NODEID, traAcompensate.get(0)
							.getSumThisDutyPaid(), dealUserInfoVo.getDealComCode());
					if(time.getPreAging()!=null){
						bpmTask.setOutTime(time.getAging());
						bpmTask.setPreOutTime(time.getPreAging());
					}
					bpmTask.setTaskType(BpmConstants.VERIFYPAY);
					bpmTask.setNodeId(BpmConstants.VERIFYPAY_NODEID);
					bpmTask.setParentNodeId(BpmConstants.CICOMPENSATE_NODEID);
					bpmTask.setHandler(dealUserInfoVo.getUserCode());
					bpmTask.setHandlerName(dealUserInfoVo.getUserName());
					bpmTask.setHandlerCom(dealUserInfoVo.getDealComCode());
					bpmTask.setTaskTitle("交强核赔");
					bpmTaskList.add(bpmTask);
					bpmService.setVariable(acBpmMain.getTaskId(), BpmConstants.TASKNAMEVAR, "自动=" + BpmConstants.VERIFYPAY);
					bpmService.setVariable(acBpmMain.getTaskId(), BpmConstants.ISVERIFYPAYOVERVAR, "");
					// 添加操作记录
					this.generateUnOperateRecordInfo(acBpmMain, traAcompensate.get(0), "理算完成", payInfoVo,taskId1,taskId2);
					/** ------------------获取任务处理人和机构----------------- */
					// 结束当前任务，开启下个工作流任务
					bpmService.endTask(acBpmMain.getTaskId(), "", dealUserInfoVo.getUserCode(), dealUserInfoVo.getDealComCode(),bpmTaskList);// 按模板走nodeName可以传""或null
				}
			}

			if (acBpmMain.getNodeId().equals(BpmConstants.BICOMPENSATE_NODEID)) {
				if (acClaims.isEmpty() || biAcClaim == null) {
					if (!BpmConstants.TASKSTATUS_1.equals(acBpmMain.getTaskStatus())) {
						bpmService.cancelTask(acBpmMain.getTaskId());
					}
				} else {
					List<AcCompensate> biAccompensate = findBiAccompensate(acBpmMain);
					// 封装任务列表
					List<BpmTask> bpmTaskList = new ArrayList<BpmTask>();
					BpmTask bpmTask = new BpmTask();
					bpmTask.setReportNo(reportNo);
					bpmTask.setBusinessNo(biAccompensate.get(0).getCompensateNo());
					bpmTask.setFeeAmount(biAccompensate.get(0).getSumThisDutyPaid());
					bpmTask.setBusinessId(biAccompensate.get(0).getId());
					bpmTask.setPolicyFlag(DataDictionary.FLAG_2);
					bpmTask.setBusinessTable(DataDictionary.ACCOMPENSTATE);
					// 任务时效核赔的预超时时间和超时时间
					TaskAgingVo time = taskAgingService.getTaskAgingCommon(BpmConstants.VERIFYPAY_NODEID, biAccompensate.get(0)
							.getSumThisDutyPaid(), dealUserInfoVo.getDealComCode());
					if(time.getPreAging()!=null){
						bpmTask.setOutTime(time.getAging());
						bpmTask.setPreOutTime(time.getPreAging());
					}
					bpmTask.setTaskType(BpmConstants.VERIFYPAY);
					bpmTask.setNodeId(BpmConstants.VERIFYPAY_NODEID);
					bpmTask.setParentNodeId(BpmConstants.BICOMPENSATE_NODEID);
					bpmTask.setHandler(dealUserInfoVo.getUserCode());
					bpmTask.setHandlerName(dealUserInfoVo.getUserName());
					bpmTask.setHandlerCom(dealUserInfoVo.getDealComCode());
					bpmTask.setTaskTitle("商业核赔");
					bpmTaskList.add(bpmTask);
					bpmService.setVariable(acBpmMain.getTaskId(), BpmConstants.TASKNAMEVAR, "自动=" + BpmConstants.VERIFYPAY);
					bpmService.setVariable(acBpmMain.getTaskId(), BpmConstants.ISVERIFYPAYOVERVAR, "");
					// 添加操作记录
					this.generateUnOperateRecordInfo(acBpmMain, biAccompensate.get(0), "理算完成", payInfoVo,taskId1,taskId2);

					/** ------------------获取任务处理人和机构----------------- */
					// 结束当前任务，开启下个工作流任务
					bpmService.endTask(acBpmMain.getTaskId(), "", dealUserInfoVo.getUserCode(), dealUserInfoVo.getDealComCode(),bpmTaskList);
				}
			}
		}
	}
	

	/**
	 * @Title: initCompensate
	 * @Description: TODO(零结案初始化理算数据)
	 * @author 莫浩锋
	 * @param reportNo
	 * @param compensate 
	 * @return
	 * @return AcCompensate
	 * @throws
	 * @date Mar 27, 2014 8:07:47 PM
	 */
	private AcCompensate initCompensate(String reportNo, AcClaim claim, AcCompensate compensate) {
		if(compensate.getId() != null){
			for (AcLoss vo:compensate.getAcLosses()) {
				Double rejectAmount = vo.getRejectAmount() != null ? vo.getRejectAmount() : 0.0;
				vo.setRejectAmount(CommonMethod.doubleRound_Down(rejectAmount - vo.getIndemnityPaid()));
				vo.setExceDeductKindPaid(0.0);
				vo.setIndemnityPaid(0.0);
				vo.setSumRealpay(0.0);
			}
			for (AcPersonLoss vo:compensate.getAcPersonLosses()) {
				Double rejectAmount = vo.getRejectAmount() != null ? vo.getRejectAmount() : 0.0;
				vo.setRejectAmount(CommonMethod.doubleRound_Down(rejectAmount - vo.getIndemnityPaid()));
				vo.setExceDeductKindPaid(0.0);
				vo.setIndemnityPaid(0.0);
				vo.setSumRealpay(0.0);
			}
			for (AcCharge vo:compensate.getAcCharges()) {
				vo.setChargeAmount(0.0);
				vo.setSumRealPayAmount(0.0);
			}
		}else{
			String compensateNo = commonService.findMaxBookNo(claim.getClaimNo());
			compensate.setCompensateNo(compensateNo);
			compensate.setAccidentCaseNo(claim.getAccidentCaseNo());
			compensate.setManualFlag(DataDictionary.FLAG_0);
			compensate.setClauseType(claim.getClauseType());
			compensate.setClaimType(claim.getClaimType());
			compensate.setPolicyNo(claim.getPolicyNo());
			compensate.setReportNo(claim.getReportNo());
			compensate.setRiskCode(claim.getRiskCode());
			compensate.setClaimNo(claim.getClaimNo());
			compensate.setComCode(claim.getComCode());
			compensate.setCaseNo(claim.getCaseNo());
			compensate.setLflag(claim.getLflag());
			compensate.setAccidentDutyRate(100.0);
			compensate.setIndemnityDealWay("7");
			compensate.setUnderWriteFlag("1");
			compensate.setInputDate(new Date());
			compensate.setMakeCom(CommonMethod.getComCode());
			compensate.setOperatorCode(CommonMethod.getUserCode());
			compensate.setCurrency(DataDictionary.CURRENCY_CNY);
		}
		compensate.setCompensateText("*");
		compensate.setChargeText("*");
		compensate.setSumLoss(0.0);
		compensate.setSumPaid(0.0);
		compensate.setSumPrePaid(0.0);
		compensate.setSumDutyPaid(0.0);
		compensate.setSumThisPaidFee(0.0);
		compensate.setMesnePayAmount(0.0);
		compensate.setSumThisDutyPaid(0.0);
		compensate.setSumChargeAmount(0.0);
		compensate.setSumKindDutyPaid(0.0);
		compensate.setSumRealPayCharge(0.0);
		compensate.setSumExceDeductPaid(0.0);
		compensate.setPreSumChargeAmount(0.0);
		compensate.setZeroFlag(DataDictionary.COMPENSATE_ZEROFLAG_YES);
		return compensate;
	}
	
	/**
	 * @Title: findUniqueAcCompensateHis
	 * @Description: TODO(根据taskId查询历史表)
	 * @author 任海周
	 * @param taskId
	 * @return
	 * @return AcCompensateHis
	 * @throws
	 * @date May 12, 2014 11:03:07 AM
	 */
	public AcCompensateHis findUniqueAcCompensateHis(Long taskId){
		AcCompensateHis acCompensateHis = this.findUnique(AcCompensateHis.class,"taskId",taskId);
		return acCompensateHis;
	}
	
	/**
	 * @Title: findBpmMain
	 * @Description: TODO(查询最新工作流数据(交强))
	 * @author 任海周
	 * @param reportNo
	 * @return
	 * @return ACBpmMain
	 * @throws
	 * @date May 12, 2014 3:16:47 PM
	 */
	public ACBpmMain findBpmMainByTraffic(String reportNo){
		
		List<ACBpmMain> bpmMainList = new ArrayList<ACBpmMain>();
		String ciHql = "from ACBpmMain where reportNo =? and nodeId =? order by createtime desc ";
		List<ACBpmMain> ciBpmMainList = findByHql(ciHql, reportNo, BpmConstants.CICOMPENSATE_NODEID);
		if (ciBpmMainList.size() > 0) {
			if (!BpmConstants.TASKSTATUS_9.equals(ciBpmMainList.get(0).getTaskStatus())) {
				bpmMainList.add(ciBpmMainList.get(0));
			}
		}
		return bpmMainList.get(0);
		
	}
	
	/**
	 * @Title: findBpmMainByBi
	 * @Description: TODO(查询最新工作流数据(商业))
	 * @author 任海周
	 * @param reportNo
	 * @return
	 * @return ACBpmMain
	 * @throws
	 * @date May 12, 2014 3:22:02 PM
	 */
	public ACBpmMain findBpmMainByBi(String reportNo){
		List<ACBpmMain> bpmMainList = new ArrayList<ACBpmMain>();
		String biHql = "from ACBpmMain where reportNo =? and nodeId =? order by createtime desc ";
		List<ACBpmMain> biBpmMainList = findByHql(biHql, reportNo, BpmConstants.BICOMPENSATE_NODEID);
		if (biBpmMainList.size() > 0) {
			if (!BpmConstants.TASKSTATUS_9.equals(biBpmMainList.get(0).getTaskStatus())) {
				bpmMainList.add(biBpmMainList.get(0));
			}
		}
		return bpmMainList.get(0);
	}
	
	/**
	 * @Title: findACBpmMainByTaskId
	 * @Description: TODO(根据taskId查询apcbmmain表)
	 * @author 任海周
	 * @param taskIdList
	 * @return
	 * @return List<ACBpmMain>
	 * @throws
	 * @date May 16, 2014 4:07:40 PM
	 */
	public List<ACBpmMain> findACBpmMainByTaskId(List<Long> taskIdList){
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addIn("taskId", taskIdList);
		List<ACBpmMain> bpmList = this.find(ACBpmMain.class, queryRule);
		return bpmList;
	}
	/**
	 * @Title: initNewBiList
	 * @Description: TODO(初始化新添加的商业险)
	 * @author 张东磊
	 * @return void
	 * @throws
	 * @date 2014-6-20 上午10:51:43
	 */
	public void initNewBiList(List<AcpayItemVo> newBivoList,String reportNo) {
		Map<String,String> kindCodeMap = policyService.findLcItemkindByReport(reportNo);
		String A_kindcode=DataDictionary.KINDCODE_A;
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_A1)){
			 A_kindcode = DataDictionary.KINDCODE_A1;
		}
		if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20A)){
			A_kindcode = DataDictionary.KINDCODE_20A;
		}
		
		
		for(AcpayItemVo bilossVo :newBivoList){
			BigDecimal deflossid= new BigDecimal(bilossVo.getLossItemName());
			//得到车损信息
			AcCarDefLoss aclossItem =carLossService.findAccarlossById(deflossid);
			bilossVo.setCompensateRate(100.0);
			bilossVo.setAccessoriesFee(0.0);  //辅料费
			bilossVo.setOuterRepairFee(0.0);//外修费用
			bilossVo.setManagerFee(0.0);
			bilossVo.setHourFee(0.0);
			bilossVo.setMaterialFee(0.0);
			bilossVo.setOtherFee(0.0);
			bilossVo.setDutyDeductibleRate(0.0);
			bilossVo.setAbsDeductibleRate(0.0);
			bilossVo.setAbsDeductibleAmount(0.0);
			bilossVo.setSumRealpay(0.0);
			bilossVo.setExceDeductKindPaid(0.0);
			bilossVo.setPreSinglePay(0.0);
			bilossVo.setReportNo(reportNo);
			bilossVo.setLicenseNo(aclossItem.getLicenseNo());
			bilossVo.setSumLossAmount(bilossVo.getSumLossAmount() != null ? bilossVo.getSumLossAmount() : 0.0);
			bilossVo.setRescueFee(bilossVo.getSumLossAmount() != null ? bilossVo.getSumLossAmount() : 0.0);
			bilossVo.setRiskCode(DataDictionary.RISKCODE_BI);
			bilossVo.setShareRate(aclossItem.getShareRate());
			bilossVo.setDefLossTaskId(deflossid);
			bilossVo.setLossItemName(aclossItem.getLicenseNo());
			bilossVo.setLossAttrCode(aclossItem.getLossAttrCode());
			bilossVo.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);//设置为财产损失	
			bilossVo.setLossType(DataDictionary.LOSSTYPE_CAR);//设置为财产损失
			//是否是互碰自赔
			List<AcCarDefLoss> carLossList = carLossService.findAcCarDefLossByReportNo(reportNo);
			// 车辆信息
			List<AcCarInfo> carInfoList = carLossService.findAccarinfoByReportNo(reportNo);
			// 判断是否标的车并且是互碰自赔
			List<AcCarDefLoss> isPaidSelfLossList = findIsPaidSelfFlag(carLossList, carInfoList);
			boolean isPaidSelfLoss = false;
			if (isPaidSelfLossList.size() > 0) {
				// 互碰自赔不投保A险则不赔付商业险
				isPaidSelfLoss = true;
				bilossVo.setLiabilityRate(100.0);
			}else{
				bilossVo.setLiabilityRate(aclossItem.getLiabilityRate()==null?100.0:aclossItem.getLiabilityRate());//责任比例
			}
			AcCarInfo carInfo = carLossService.findAccarinfoByAcReportCarInfoId(aclossItem.getAcReportCarInfoId());
			bilossVo.setLossAttrName(carInfo.getLossAttrName());
			//报案信息
			AcReport report = reportService.findByReportNo(reportNo);
			// 查勘信息
			AcSurvey survey = surveyService.findAcSurveyByReportNo(reportNo);
			String dentDutyCode = report.getAccidentDutyCode();
			if (survey != null) {
				dentDutyCode = survey.getAccidentDutyCode();
			}
			if (DataDictionary.CARDEFLOSS_ISPAIDSELF_YES.equals(aclossItem.getIsPaidSelf())
					&& DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())) {
				 dentDutyCode = DataDictionary.FLAG_1;
			}
			if(!bilossVo.getKindCode().startsWith(DataDictionary.KINDCODE_20)){
				// 根据报案号和事故责任比例获取责任免赔率列表
				List<AgDutyDeductible> dutyDeductibleRateList = commonService.getDutyDeductibleRate(reportNo, dentDutyCode);
				// 责任免赔率
				if (dutyDeductibleRateList != null) {
					for (AgDutyDeductible agDutyDeductible : dutyDeductibleRateList) {
						if (agDutyDeductible.getId().getKindCode().trim().equals(bilossVo.getKindCode())) {
							bilossVo.setDutyDeductibleRate(agDutyDeductible.getDeductibleRate());
						}
					}
				}
			}
			bilossVo.setAbsDeductibleAmount(0.0);
			// 绝对免赔额
			if (A_kindcode.equals(bilossVo.getKindCode())&& (bilossVo.getRescueFee() != null ? bilossVo.getRescueFee() : 0.0) <= 0.005) {
				List<AclcItemKind>  aclcItemKindList = policyService.findItemKindByReportNoAndKindcode(reportNo, bilossVo.getRiskCode(),A_kindcode);
				if(!aclcItemKindList.isEmpty()&&aclcItemKindList.size()>0){//0518
					if(aclcItemKindList.get(0).getDeductible()!=null &&aclcItemKindList.get(0).getDeductible()>0){
						bilossVo.setAbsDeductibleAmount(aclcItemKindList.get(0).getDeductible());
					}else{
						// Q险绝对免赔额
						Boolean deductibleFlag = this.findKindCodeInMap(kindCodeMap, DataDictionary.KINDCODE_Q);//0508
						if (deductibleFlag) {// Q险绝对免赔额
							List<AclcItemKind>  aclcItemKinds = policyService.findItemKindByReportNoAndKindcode(reportNo, bilossVo.getRiskCode(),DataDictionary.KINDCODE_Q);
							if(!aclcItemKinds.isEmpty()&&aclcItemKinds.size()>0){
								bilossVo.setAbsDeductibleAmount(aclcItemKinds.get(0).getValue());
							}
						}
					}
				}
			}
		}
	}
	/**
	 * @Title: initNewTraList
	 * @Description: TODO(初始化新添加的交强险)
	 * @author 张东磊
	 * @return void
	 * @throws
	 * @date 2014-6-20 下午4:42:39
	 */
	public void initNewTraList(List<AcpayItemVo> newTravoList,String reportNo) {
		for(AcpayItemVo aclossItem :newTravoList){
			BigDecimal deflossid= new BigDecimal(aclossItem.getLossItemName());
			//得到车损信息
			AcCarDefLoss acCarDefLoss =carLossService.findAccarlossById(deflossid);
			aclossItem.setCompensateRate(100.0);
			aclossItem.setAccessoriesFee(0.0);  //辅料费
			aclossItem.setOuterRepairFee(0.0);//外修费用
			aclossItem.setManagerFee(0.0);
			aclossItem.setHourFee(0.0);
			aclossItem.setMaterialFee(0.0);
			aclossItem.setOtherFee(0.0);
			aclossItem.setRescueFee(0.0);
			aclossItem.setDutyDeductibleRate(0.0);
			aclossItem.setAbsDeductibleRate(0.0);
			aclossItem.setAbsDeductibleAmount(0.0);
			aclossItem.setSumRealpay(0.0);
			aclossItem.setExceDeductKindPaid(0.0);
			aclossItem.setPreSinglePay(0.0);
			AcCarInfo acCarInfo = carLossService.findAccarinfoByAcReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
			aclossItem.setReportNo(acCarDefLoss.getReportNo());
			String isciDuty = "";
			if (DataDictionary.ACCARINFO_CIDUTYFLAG.equals(acCarInfo.getCiDutyFlag())) {
				isciDuty = DataDictionary.ACCOMPENSATE_LOSS_ISDUTY;
			} else {
				isciDuty = DataDictionary.ACCOMPENSATE_LOSS_NODUTY;
			}
			aclossItem.setIsciduty(isciDuty);// 是否有责
			aclossItem.setLimitAmount(DataDictionary.LOSS_LIMIT);
			aclossItem.setLossType(DataDictionary.LOSSTYPE_CAR);
			aclossItem.setType(DataDictionary.ACPAYITEMVO_TYPE_LOSS);
			aclossItem.setLossAttrCode(acCarInfo.getLossAttrCode());
			aclossItem.setLossAttrName(acCarInfo.getLossAttrName());
			aclossItem.setDefLossTaskId(acCarDefLoss.getId());
			aclossItem.setLossItemName(acCarDefLoss.getLicenseNo());
			aclossItem.setRiskCode(DataDictionary.RISKCODE_CI);
			aclossItem.setLicenseNo(acCarDefLoss.getLicenseNo());// 车牌号
			aclossItem.setLiabilityRate(acCarDefLoss.getLiabilityRate());// 赔偿责任比例
			aclossItem.setInsuredName(acCarInfo.getDriverName());
			aclossItem.setThirdPartyPolicy(acCarInfo.getThridCarCipolicy());
			aclossItem.setThirdPartyCompName(acCarInfo.getThridCarCIComName());
			aclossItem.setReportCarInfoId(acCarDefLoss.getAcReportCarInfoId());
			if (DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(aclossItem.getLossAttrCode())) {
				aclossItem.setFeeTypeCode(DataDictionary.FEETYPECODE_CARSAVE);
			}
			aclossItem.setShareRate(acCarDefLoss.getShareRate());// 赔偿分摊比例
			aclossItem.setFeeTypeName(aclossItem.getLicenseNo());// 受损车辆属性
			aclossItem.setSurplusSumLossAmount(aclossItem.getSumLossAmount() != null ? aclossItem.getSumLossAmount() : 0.0);
			aclossItem.setSumLossAmount(aclossItem.getSumLossAmount() != null ? aclossItem.getSumLossAmount() : 0.0);
			aclossItem.setRescueFee(aclossItem.getSumLossAmount() != null ? aclossItem.getSumLossAmount() : 0.0);
			aclossItem.setSumLossAmount(aclossItem.getRescueFee());// 总定损金额，初始化时设金额等于施救费
		}
	}
	
	/**
	 * 
	 * @Title: compensateStartCaseSuvery
	 * @Description: TODO(理算发起案件调查)
	 * @author 任海周
	 * @param reportNo
	 * @param trafficAccompensate
	 * @param biAccompensate
	 * @return void
	 * @throws
	 * @date Aug 15, 2014 12:33:30 PM
	 */
	public void compensateStartCaseSuvery(String reportNo,AcCompensate trafficAccompensate,AcCompensate biAccompensate){
		
		String ciCompensateNo = "",biCompensateNo = "";
		if(trafficAccompensate != null ){
			ciCompensateNo = trafficAccompensate.getCompensateNo();
		}
		if(biAccompensate != null){
			biCompensateNo = biAccompensate.getCompensateNo();
		}
		
		Map<String,String> responsibilityAvoidMap = DataDictionary.responsibilityAvoidMap;
		AclcItemCar itemCar = policyService.getAclcItemCarByReport(reportNo);
		String clauseType = itemCar.getClauseType();
		
		//机动车第三者责任保险、机动车车上人员责任保险
		String thirdPartyType = "";
		String personOnCarType = "";
		List<AclcItemKind> lcItemKindList = policyService.findLcItemKindIsSelectedList(reportNo);
		
		for(AclcItemKind aclcItemKind : lcItemKindList){
			if(DataDictionary.KINDCODE_B.equals(aclcItemKind.getKindCode())){
				thirdPartyType = "B";
				continue;
			} else if (DataDictionary.KINDCODE_D3.equals(aclcItemKind.getKindCode()) 
					|| DataDictionary.KINDCODE_D4.equals(aclcItemKind.getKindCode())
					|| DataDictionary.KINDCODE_20D3.equals(aclcItemKind.getKindCode())
					|| DataDictionary.KINDCODE_20D4.equals(aclcItemKind.getKindCode())
					|| "D1".equals(aclcItemKind.getKindCode())){
				personOnCarType = "D3";
				continue;
			}
		}
		String caseSurveyReason = "",caseSurveyReasonItem="";
		//家庭自用汽车损失保险条款
		if("F44".equals(clauseType) || "F54".equals(clauseType)){
			caseSurveyReasonItem = responsibilityAvoidMap.get("M1")+"\n";
			caseSurveyReason = responsibilityAvoidMap.get("M1")+"\n";
		}
		//营业用汽车损失保险条款
		if("F46".equals(clauseType) || "F56".equals(clauseType)){
			caseSurveyReasonItem += responsibilityAvoidMap.get("M2")+"\n";
			caseSurveyReason += responsibilityAvoidMap.get("M2")+"\n";
		}
		//非营业用汽车损失保险条款
		if("F45".equals(clauseType) || "F55".equals(clauseType)){
			caseSurveyReasonItem += responsibilityAvoidMap.get("M3")+"\n";
			caseSurveyReason += responsibilityAvoidMap.get("M3")+"\n";
		} 
		//特种车保险条款
		if("F47".equals(clauseType) || "F57".equals(clauseType)){
			caseSurveyReasonItem += responsibilityAvoidMap.get("M4")+"\n";
			caseSurveyReason += responsibilityAvoidMap.get("M4")+"\n";
		}
		//机动车第三者责任保险
		if("B".equals(thirdPartyType)){
			caseSurveyReasonItem += responsibilityAvoidMap.get("M5")+"\n";
			caseSurveyReason += responsibilityAvoidMap.get("M5")+"\n";
		}
		//机动车车上人员责任保险
		if("D3".equals(personOnCarType)){
			caseSurveyReasonItem += responsibilityAvoidMap.get("M6")+"\n";
			caseSurveyReason += responsibilityAvoidMap.get("M6")+"\n";
		}
		
		boolean startCaseSuveryFlag = commonService.isCompensateAndPrepraystartCaseSuvery(reportNo, null, "2",ciCompensateNo , biCompensateNo);
		if(startCaseSuveryFlag){
			//保存该节点记录
			AcCaseSurveyRecord acCaseSurveyRecord = new AcCaseSurveyRecord();
			acCaseSurveyRecord.setCaseSurveyReason(caseSurveyReason);
			acCaseSurveyRecord.setInputTime(new DateTime(new Date(), DateTime.YEAR_TO_MILLISECOND));
			acCaseSurveyRecord.setNodeId(BpmConstants.BICOMPENSATE_NODEID);
			acCaseSurveyRecord.setReportNo(reportNo);
			acCaseSurveyRecord.setCaseSurveyReasonItem(caseSurveyReasonItem);
			
			boolean b = caseSurveyService.compareIsSameReasonStartCaseSurvey(reportNo, acCaseSurveyRecord.getCaseSurveyReasonItem(),acCaseSurveyRecord.getInputTime());
			if(b){
				boolean bool = caseSurveyService.compareIsSameReasonSameNode(reportNo, acCaseSurveyRecord.getCaseSurveyReasonItem(), acCaseSurveyRecord.getInputTime(), acCaseSurveyRecord.getNodeId());
				if(bool){
					//相同原因，相同节点不保存不发起
				} else {
					//相同原因，不同节点只保存不发起
					caseSurveyService.saveAcCaseSurveyRecord(acCaseSurveyRecord);
				}
			} else {
				caseSurveyService.saveAcCaseSurveyRecord(acCaseSurveyRecord);
				String checkTask = caseSurveyService.checkTask(reportNo);
				if("".equals(checkTask)){
					acCaseSurveyRecord.setCaseSurveyStartTime(new DateTime(new Date(), DateTime.YEAR_TO_MILLISECOND));
					//符合反欺诈条件,发起案件调查
					AcCaseSurvey acCaseSurvey = new AcCaseSurvey();
					if(biAccompensate != null){
						acCaseSurvey.setTaskId(biAccompensate.getTaskId());
					}
					if(trafficAccompensate != null){
						acCaseSurvey.setTaskId(trafficAccompensate.getTaskId());
					}
					acCaseSurvey.setCaseSurveyReason(acCaseSurveyRecord.getCaseSurveyReason());
					acCaseSurvey.setReportNo(reportNo);
					caseSurveyService.startCaseSurvey(acCaseSurvey, BpmConstants.CETIFYCOLLECT_NODEID);
					}
			}
		} else {
			//什么也不做
		}
	}
	
	
	/**
	 * @Title: findAllAccounts
	 * @Description: TODO(根据CodeType查找银行信息)
	 * @author 李魁服
	 * @param codeType
	 * @return
	 * @see flex.claim.compensate.service.facade.CompensateService#findAllAccounts(java.lang.String)
	 * @date 2014-9-4 上午11:01:25
	 */
	public String findAllAccounts(String codeType) {
		StringBuffer sb = new StringBuffer("");
		List<AgCode> codeList = commonService.obtainDiclistByType(codeType);
		for (AgCode agCode : codeList) {
			sb.append(agCode.getCodeCode()+",");
		}
		return sb.toString();
	}
	/**
	 * @Title: checkAutoUnderRule
	 * @Description: TODO(判断是否满足自动核赔FLEXREQUIRE-301 第一种情况：单独交强险赔付类型赔案（不含人伤）)
	 * @author zhaoyingpu
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @date 2014年11月12日10:07:33
	 */
	private boolean  checkAutoSingleTra(List<AcCompensate> compensateNoList,AcReport report,AutoUnderWriteVo ruleVo){
		AcCompensate busi=null;
		AcCompensate tra=null;
		for(AcCompensate com:compensateNoList){
			if("0507".equals(com.getRiskCode())){
				tra=com;
			}else{
				busi=com;
			}
		}
		//是否有手工增加的赔付信息
		if(!checkFromDefloss(compensateNoList,ruleVo)){
			return false;
		}
		//（1）单独交强险赔付,商业赔款金额 为0赔款金额是指所有赔付
		if(tra==null){
			return false;
		}
		if(busi!=null&&(busi.getSumDutyPaid()!=0||busi.getSumChargeAmount()!=0)){
			return false;
		}
		//1.交强是否有人伤赔款 
		if(!checkIsPersonLoss(compensateNoList)){
			return false;
		}
		//（2）交强险只涉及车物损失赔款且赔款金额小于等于2000元；
		if(tra.getSumDutyPaid()>2000){
			return false;
		}
		//（4）直接理赔费用金额小于等于500元；
		if(!checkSurveyFee(compensateNoList)){
			return false;
		}
		//（3）非0的车物损失任务均是总公司集中核损人员审核通过的；？  deflosstaskid 有的是在 历史表里,如果查找不到怎么办？
		if(!checkIsCenterCom(compensateNoList,ruleVo)){
			return false;
		}
		//（5）理算提交后未生成调查任务，或生成调查任务后调查任务已经审核通过。   
	    if(checkCaseSurvey(report.getReportNo(),ruleVo)){
	    	return false;
	    }
		return true;
	}
	/**
	 * @Title: checkAutoSingleAccident
	 * @Description: TODO(判断是否满足自动核赔FLEXREQUIRE-301 第二种情况：单方事故（含玻璃单独破碎、划痕险）)
	 * @author zhaoyingpu
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @date 2014年11月12日10:07:33
	 */
	private boolean  checkAutoSingleAccident(List<AcCompensate> compensateNoList,AcReport report,AutoUnderWriteVo ruleVo){
		//是否有手工增加的赔付信息
		if(!checkFromDefloss(compensateNoList,ruleVo)){
			return false;
		}
		//单方事故
	    if(!checkIsSingleCar(report,ruleVo)){
	    	return false;
	    }
		//出险次数小于2
		if(!checkDamageCount(report)){
			return false;
		}
		//非特级案件
//		FLEXREQUIRE-312自动核赔规则调整；（改为不限案件类型）
//		if(checkIsSpec(report.getReportNo(),ruleVo)){
//			return false;
//		}
		//总公司集中核损 
		if(!checkIsCenterCom(compensateNoList,ruleVo)){
			return false;
		}
		//且本案无核赔回退记录的
		if(checkVerifyPayBack(report.getReportNo(),ruleVo)){
			return false;
		}
		//（4）直接理赔费用金额小于等于500元
		if(!checkSurveyFee(compensateNoList)){
			return false;
		}
		//理算提交后未生成调查任务，或生成调查任务后调查任务已经审核通过。 同1
		if(checkCaseSurvey(report.getReportNo(),ruleVo)){
            return false;			
		}
		//理算计算中调整比例小于等于100%、调整金额小于等于0的；
		if(!checkRejectAmount(compensateNoList)){
			return false;
		}
		//约定了驾驶员且系统判断出险驾驶员与约定驾驶员一致或虽不一致但理算增加了非约定驾驶员免赔的；未约定驾驶员系统判断默认为一致。判断勾选?
		if(!checkAppontDriver(report,ruleVo)){
			return false;
		}
		//损失金额在5000元（含）以下 ,单方事故只有标的车 车损
		if(ruleVo.getCarloss()==null){
			ruleVo.setCarloss(carLossService.findAcCarDefLossByReportNo(report.getReportNo()));
		}
		List<AcCarDefLoss> carloss=ruleVo.getCarloss();
		for(AcCarDefLoss loss: carloss){
			if("11".equals(loss.getLossAttrCode())&&loss.getSumVerifyLoss()>5000){
				return false;
			}
		}
		return true;
	}
	/**
	 * @Title: checkAutoManyAccident
	 * @Description: TODO(判断是否满足自动核赔FLEXREQUIRE-301 第三种情况：双方或多方事故（不含人伤）)
	 * @author zhaoyingpu
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @date 2014年11月12日10:07:33
	 */
	private boolean  checkAutoManyAccident(List<AcCompensate> compensateNoList,AcReport report,AutoUnderWriteVo ruleVo){
		//是否有手工增加的赔付信息
		if(!checkFromDefloss(compensateNoList,ruleVo)){
			return false;
		}
//		3.双方或多方事故（不含人伤），同时满足以下条件则自动核赔通过。
		if(checkIsSingleCar(report,ruleVo)){
		     return false;	
		}
		// 不含人伤
		if(!checkIsPersonLoss(compensateNoList)){
			 return false;
		}
//		 （1）非特级案件；
//		FLEXREQUIRE-312自动核赔规则调整；（改为不限案件类型）
//		if(checkIsSpec(report.getReportNo(),ruleVo)){
//			 return false;
//		}
//		 （2）出险次数2次（含）以内的；
		if(!checkDamageCount(report)){
			 return false;
		}
//		 （3）整案赔付金额小于等于5000元的；
		double lossAmount=0;
		for(AcCompensate com: compensateNoList){
			lossAmount+=com.getSumDutyPaid();
		}
		if(lossAmount>5000){
			return false;
		}
//		 （5）非0的各损失任务均为总公司集中核损人员审核通过的,
		if(!checkIsCenterCom(compensateNoList,ruleVo)){
			return false;
		}
		//且本案无核赔回退记录的；
		if(checkVerifyPayBack(report.getReportNo(),ruleVo)){
			return false;
		}
//		 （6）直接理赔费用金额小于等于500元；
		if(!checkSurveyFee(compensateNoList)){
			return false;
		}
//		 （7）查勘以及各损失任务项下录入的事故责任及责任比例均为一致;
		 if(!isSameRate(report.getReportNo(),ruleVo)){
			  return false;
		  }
//		（8）理算计算中调整比例小于等于100%、调整金额小于等于0的；
		if(!checkRejectAmount(compensateNoList)){
			return false;
		}
//		（9）约定了驾驶员且系统判断出险驾驶员与约定驾驶员一致或虽不一致但理算增加了非约定驾驶员免赔的；未约定驾驶员系统判断默认为一致。
		if(!checkAppontDriver(report,ruleVo)){
			return false;
		}
//		（10）理算提交后未生成调查任务，或生成调查任务后调查任务已经审核通过。
		if(checkCaseSurvey(report.getReportNo(),ruleVo)){
			return false;
		}
//		 （4）各损失项金额均在3000元（含）以内；
	    if(ruleVo.getProploss()==null){
	    	ruleVo.setProploss(propLossService.findAcPropDefLossByReportNo(report.getReportNo()));  
	    }
	    if(ruleVo.getCarloss()==null){
	    	ruleVo.setCarloss(carLossService.findAcCarDefLossByReportNo(report.getReportNo()));
	    }
	    if(ruleVo.getPersonloss()==null){
	    	ruleVo.setPersonloss(personService.findAcPersonTrackMainByReportNo(report.getReportNo()));
	    }
	    List<AcCarDefLoss> carloss=ruleVo.getCarloss();
		List<AcPersonTrackMain> personloss=ruleVo.getPersonloss();
		List<AcPropDefLoss> proploss=ruleVo.getProploss();
		for(AcCarDefLoss loss: carloss){
			if(loss.getSumVerifyLoss()>3000){
				return false;
			}
		}
		for(AcPersonTrackMain person:personloss){
			if(person.getSumVerifyLossAmount()>3000){
				return false;
			}
		}
		for(AcPropDefLoss prop :proploss){
			if(prop.getSumVerifyLoss()>3000){
				return false;
			}
		}
		return true;
	}
	/**
	 * @Title: checkAutoPersonTra
	 * @Description: TODO(判断是否满足自动核赔FLEXREQUIRE-301 第四种情况：交强险小额人伤赔案)
	 * @author zhaoyingpu
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @date 2014年11月12日10:07:33
	 */
	private boolean  checkAutoPersonTra(List<AcCompensate> compensateNoList,AcReport report,AutoUnderWriteVo ruleVo){
		//是否有手工增加的赔付信息
		if(!checkFromDefloss(compensateNoList,ruleVo)){
			return false;
		}
//		 （1）只涉及交强险内赔付； 商业险 金额为0 
		AcCompensate busi=null;
		AcCompensate tra=null;
		for(AcCompensate com:compensateNoList){
			if("0507".equals(com.getRiskCode())){
				tra=com;
			}else{
				busi=com;
			}
		}
		if(tra==null){
			return false;
		}
		if(busi!=null&&(busi.getSumDutyPaid()!=0||busi.getSumChargeAmount()!=0)){
			return false;
		}
//		（8）理算计算中调整比例小于等于100%、调整金额小于等于0的；
		if(!checkRejectAmount(compensateNoList)){
			return false;
		}
//		 （3）人伤核损由总公司人伤核损审核通过的
//		 （4）三者财产损失2000元（含）以内且由总公司核损人员审核通过的；
		//3 4 合并为 财产和人伤由总公司审核通过
		if(!checkIsCenterCom(compensateNoList,ruleVo)){
			return false;
		}
		//且本案无核赔回退记录的；
		if(checkVerifyPayBack(report.getReportNo(),ruleVo)){
			return false;
		}
//		 （5）查勘以及各损失任务项下录入的事故责任及责任比例均为一致;
		  if(!isSameRate(report.getReportNo(),ruleVo)){
			  return false;
		  }
//		（6）直接理赔费用金额小于等于500元；
		  if(!checkSurveyFee(compensateNoList)){
			  return false;
		  }
//		 （7）理算提交后未生成调查任务，或生成调查任务后调查任务已经审核通过。
		  if(checkCaseSurvey(report.getReportNo(),ruleVo)){
			  return false;
		  }
//	           （2）人伤损失金额小于等于1000元或仅存在医疗费用损失且在10000元（含）以内的；
		    if(ruleVo.getProploss()==null){
		    	ruleVo.setProploss(propLossService.findAcPropDefLossByReportNo(report.getReportNo()));  
		    }
		    if(ruleVo.getCarloss()==null){
		    	ruleVo.setCarloss(carLossService.findAcCarDefLossByReportNo(report.getReportNo()));
		    }
		    if(ruleVo.getPersonloss()==null){
		    	ruleVo.setPersonloss(personService.findAcPersonTrackMainByReportNo(report.getReportNo()));
		    }
		    List<AcCarDefLoss> carloss=ruleVo.getCarloss();
			List<AcPersonTrackMain> personloss=ruleVo.getPersonloss();
			List<AcPropDefLoss> proploss=ruleVo.getProploss();
			double personAmount=0;
			//boolean isSignleCure=true;
			for(AcPersonTrackMain person: personloss){
				personAmount+=person.getSumVerifyLossAmount();
				/**MODIFY BY  LIKUIFU  20150611  FLEXREQUIRE-344  自动核赔人伤损失判断金额1000调整为50000，不再区分医疗或死亡伤残    
				for(AcPersonInjuryCharge loss:person.getAcPersonInjuryCharges()){
					if(!"100".equals(loss.getSubFeeTypeCode())&&loss.getSuAmountTotal()!=null&&loss.getSuAmountTotal()>0&&!"0".equals(loss.getValidFlag())){
						isSignleCure=false;
					}
				}*/
			}
			//MODIFY BY  LIKUIFU  20150611  FLEXREQUIRE-344  自动核赔人伤损失判断金额1000调整为50000，不再区分医疗或死亡伤残
			if(personAmount>50000){
				return false;
			}
			//三者财产损失2000以内
			double lossamount=0;
			for(AcPropDefLoss prop:proploss){
				if(!"12".equals(prop.getLossAttrCode())){
					lossamount+=prop.getSumVerifyLoss();
				}
			}
			for(AcCarDefLoss car: carloss){
				if("21".equals(car.getLossAttrCode())){
					lossamount+=car.getSumVerifyLoss();
				}
			}
			if(lossamount>2000){
				return false;
			}
		return true;
	}
	/**
	 * @Title: checkAutoGoodUser
	 * @Description: TODO(判断是否满足自动核赔FLEXREQUIRE-314  第五种情况：优秀理算人员)
	 * @author zhaoyingpu
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @date 2015年1月13日14:52:54
	 */
	private boolean  checkAutoGoodUser(List<AcCompensate> compensateNoList,AcReport report,AutoUnderWriteVo ruleVo){
		//1、整案赔款金额小于等于3000元，并且直接理赔费用金额小于等于500元。
		double lossAmount=0;
		double chargeAmount=0;
		for(AcCompensate com: compensateNoList){
			lossAmount+=com.getSumDutyPaid();
			chargeAmount+=com.getSumChargeAmount();
		}
		AgCustomerParameter agcustPara = commonService.checkExistAgcustPara(DataDictionary.AGCUSTOMER_GOODCOMPENTUSER,CommonMethod.getUserCode());
		double sumdefloss=0;
		if(agcustPara!=null){
			sumdefloss = agcustPara.getSumDefLoss()!=null ? agcustPara.getSumDefLoss() :3000;
		}else{//非优秀理算人员
			return false;
		}
		if(lossAmount>sumdefloss||chargeAmount>500){
			return false;
		}
        //（2）理算计算中调整比例小于等于100%、调整金额小于等于0的；
		if(!checkRejectAmount(compensateNoList)){
			return false;
		}
		//（3）约定了驾驶员且系统判断出险驾驶员与约定驾驶员一致或虽不一致但理算增加了非约定驾驶员免赔的；未约定驾驶员系统判断默认为一致。
		if(!checkAppontDriver(report,ruleVo)){
			return false;
		}
		return true;
	}
	/**
	 * @Title: checkIsPersonLoss
	 * @Description: TODO(人伤损失是否为0,人伤损失为0true，不为0false)
	 * @author zhaoyingpu
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkIsPersonLoss(List<AcCompensate> compensateNoList){
		for(AcCompensate com:compensateNoList){
			if(com.getAcPersonLosses()==null||com.getAcPersonLosses().size()==0){
			}else{
				double personloss=0d;
				for(AcPersonLoss person:com.getAcPersonLosses()){
					personloss+=person.getIndemnityPaid();
				}
				if(personloss!=0){
					return false;
				}
			}
		}
		return true;
	}
	/**
	 * @Title: checkRejectAmount
	 * @Description: TODO(理算计算中调整比例小于等于100%、调整金额小于等于0的, 小于等于为true，大于为false)
	 * @author zhaoyingpu
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private  boolean checkRejectAmount(List<AcCompensate> compensateNoList){
		for(AcCompensate com:compensateNoList){
			for(AcPersonLoss person: com.getAcPersonLosses()){
				if(person.getCompensateRate()<=100&&person.getRejectAmount()<=0){
				}else{
					return false;
				}
			}
			for(AcLoss loss: com.getAcLosses()){
				if(loss.getCompensateRate()<=100&&loss.getRejectAmount()<=0){
				}else{
					return false;
				}
			}
		}
		return true;
	}
	/**
	 * @Title: checkAppontDriver
	 * @Description: TODO(一致为true，不一致为false，约定了驾驶员且系统判断出险驾驶员与约定驾驶员一致或虽不一致但理算增加了非约定驾驶员免赔的；未约定驾驶员系统判断默认为一致)
	 * @author zhaoyingpu
	 * @param AcReport report
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkAppontDriver(AcReport report,AutoUnderWriteVo ruleVo){
		if(ruleVo.getIsSameDriver()!=null){
			return ruleVo.getIsSameDriver();
		}
		QueryRule queryRule1=QueryRule.getInstance();
		queryRule1.addEqual("reportNo",report.getReportNo());
		queryRule1.addEqual("deductCondtionCode", "170");
		queryRule1.addEqual("isSelected","1");
		List<AcDeductcond>  deList=this.find(AcDeductcond.class, queryRule1);
		if(deList!=null&&deList.size()>0){
		}else{
			List<AcCarInfo> carloss=this.findByHql("from AcCarInfo  where reportNo=? and lossAttrCode='11' ", report.getReportNo());
			String cardriver=carloss.get(0).getDriverName();
			List<AclcCarDriver> aclccars=this.findByHql("from AclcCarDriver  where reportNo=? ", report.getReportNo());
			if(aclccars!=null&&aclccars.size()>0&&cardriver!=null){
				for(AclcCarDriver sum:aclccars){
					if(cardriver.equals(sum.getDriverName())){
						ruleVo.setIsSameDriver(true);
					  	return true;
					}
				}
				ruleVo.setIsSameDriver(false);
			  	return false;
			}
		}
		ruleVo.setIsSameDriver(true);
		return true;
	}
	/**
	 * @Title: checkFromDefloss
	 * @Description: TODO(校验是否有理算手工增加的赔付信息)
	 * @author zhaoyingpu
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkFromDefloss(List<AcCompensate> compensateNoList,AutoUnderWriteVo ruleVo){
		  if(ruleVo.getIsFromDefloss()!=null){
			  return ruleVo.getIsFromDefloss();
		  }
		  for(AcCompensate com: compensateNoList){
			  for(AcLoss loss:com.getAcLosses()){
				  if(loss.getFromDeflossFlag()!=null&&"0".equals(loss.getFromDeflossFlag())){
					  ruleVo.setIsFromDefloss(false);
					  return false;
				  }
			  }
		  }
		  ruleVo.setIsFromDefloss(true);
		return true;
	}
	/**
	 * @Title: checkSurveyFee
	 * @Description: TODO(直接理赔费金额小于等于500元 ，小于等于500为true，大于为false)
	 * @author zhaoyingpu
	 * @param List<AcCompensate> compensateNoList
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkSurveyFee(List<AcCompensate> compensateNoList){
		double sum=0;
		for(AcCompensate com:compensateNoList){
			for (AcCharge charge : com.getAcCharges()) {
				sum+=charge.getChargeAmount();
			}
		}
		if(sum>500){
			return false;
		}
		return true;
	}
	/**
	 * @Title: checkCaseSurvey
	 * @Description: TODO(理算提交后未生成调查任务，或生成调查任务后调查任务已经审核通过,true为有调查任务，false为无调查任务)
	 * @author zhaoyingpu
	 * @param String reportNo
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkCaseSurvey(String reportNo,AutoUnderWriteVo ruleVo){
		  if(ruleVo.getIsCaseSurevey()!=null){
			  return ruleVo.getIsCaseSurevey();
		  }
		  List<ACBpmMain> bpmList=this.findByHql("from ACBpmMain m where m.reportNo=? and nodeId in(480,490)  and taskStatus in(0,2,7)", reportNo);
			if(bpmList!=null&&bpmList.size()>0){
				ruleVo.setIsCaseSurevey(true);
				return true;
			}
			ruleVo.setIsCaseSurevey(false);
			return false;
	}
	/**
	 * @Title: checkVerifyPayBack
	 * @Description: TODO(本案无核赔回退记录的,true为有退回，false为无退回)
	 * @author zhaoyingpu
	 * @param String reportNo
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkVerifyPayBack(String reportNo,AutoUnderWriteVo ruleVo){
		if(ruleVo.getIsVerifyBack()!=null){
			return ruleVo.getIsVerifyBack();
		}
		List<AcOperateRecordInfo> opreaList=this.findByHql("from AcOperateRecordInfo where reportNo=? and dealResult  like '核赔退回%' ", reportNo);
		if(opreaList!=null&&opreaList.size()>0){
			ruleVo.setIsVerifyBack(true);
			return true;
		}
		ruleVo.setIsVerifyBack(false);
		return false;
	}
	
	/**
	 * @Title: checkIsSpec
	 * @Description: TODO(是否特级案件，特级案件为true，非特级为false)
	 * @author zhaoyingpu
	 * @param String reportNo
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkIsSpec(String reportNo,AutoUnderWriteVo ruleVo){
		if(ruleVo.getIsSpeCase()!=null){
			return ruleVo.getIsSpeCase();
		}
		List<AcSpCaseRule> spList=this.findByHql("from AcSpCaseRule  where reportNo=? and isspCase='1' ", reportNo);
		if(spList!=null&&spList.size()>0){
			ruleVo.setIsSpeCase(true);
			return true;
		}
		ruleVo.setIsSpeCase(false);
		return false;
	}
	/**
	 * @Title: checkDamageCount
	 * @Description: TODO(是否小于等于2次，小于等于2为true，大于2为false)
	 * @author zhaoyingpu
	 * @param String reportNo
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkDamageCount(AcReport report){
		int damageCount=0;
		for(AcPolicySummary  summary:report.getAcPolicySummaries()){
			if(summary.getDamageCount()!=null&&!"".equals(summary.getDamageCount())){
			  int temp=Integer.parseInt(summary.getDamageCount());	
			  damageCount=temp>damageCount?temp:damageCount;
			}
		}
		if(damageCount>2){
			return false;
		}
		return true;
	}
	/**
	 * @Title: checkIsSingleCar
	 * @Description: TODO(是否是单车事故，单车true，其他false)
	 * @author zhaoyingpu
	 * @param String reportNo
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkIsSingleCar(AcReport report,AutoUnderWriteVo ruleVo){
		if(ruleVo.getIsSingleCar()!=null){
			return ruleVo.getIsSingleCar();
		}
		if((report.getAcReportPersonInfos()!=null&&report.getAcReportPersonInfos().size()>0)||
				(report.getAcReportPropInfos()!=null&&report.getAcReportPropInfos().size()>0)||
				(report.getAcReportCarInfos()!=null&&report.getAcReportCarInfos().size()>1)){
			ruleVo.setIsSingleCar(false);
        	return false;
		}
        ruleVo.setIsSingleCar(true);
		return true;
	}
	/**
	 * @Title: checkIsCenterCom
	 * @Description: TODO(损失不为0车物人任务是否总公司核损，总公司为true，其他为false)
	 * @author zhaoyingpu
	 * @param String reportNo
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean checkIsCenterCom(List<AcCompensate> compensateNoList,AutoUnderWriteVo ruleVo){
		if(ruleVo.getIsCenterCom()!=null){
			return ruleVo.getIsCenterCom();
		}
		Map<BigDecimal,String> deflossids=new HashMap<BigDecimal,String>();
		for(AcCompensate com:compensateNoList){
			for(AcLoss loss:com.getAcLosses()){
				if(loss.getIndemnityPaid()>0){
				deflossids.put(loss.getDefLossTaskId(),loss.getLossAttrCode());
				}
			}
			for(AcPersonLoss loss:com.getAcPersonLosses()){
				if(loss.getIndemnityPaid()>0){
					deflossids.put(loss.getDefLossTaskId(),loss.getLossAttrCode());
				}
			}
		}
		for(BigDecimal defLossId:deflossids.keySet()){
			if(deflossids.get(defLossId).endsWith("1")){
				AcCarDefLoss defloss=this.get(AcCarDefLoss.class, defLossId);
				if(!"00000000".equals(defloss.getVerifyLossDealCom())||DataDictionary.AUTO_VERIFYLOSS.equals(defloss.getVerifyLossCode())){
					ruleVo.setIsCenterCom(false);
					return false;
				}
			}else if(deflossids.get(defLossId).endsWith("2")){
				AcPropDefLoss defloss=this.get(AcPropDefLoss.class, defLossId);
				if(!"00000000".equals(defloss.getVerifyLossDealCom())||DataDictionary.AUTO_VERIFYLOSS.equals(defloss.getVerifyLossCode())){
					ruleVo.setIsCenterCom(false);
					return false;
				}
			}else{
				AcPersonTrackMain defloss=this.get(AcPersonTrackMain.class, defLossId);
				if(!"00000000".equals(defloss.getVerifyLossDealCom())||DataDictionary.AUTO_VERIFYLOSS.equals(defloss.getVerifyLossPersonCode())){
					ruleVo.setIsCenterCom(false);
					return false;
				}
			}
		}
		ruleVo.setIsCenterCom(true);
		return true;
	}
	/**
	 * @Title: isSameRate
	 * @Description: TODO(查勘以及各损失任务项下录入的事故责任及责任比例均为一致,true为一致)
	 * @author zhaoyingpu
	 * @param String reportNo
	 * @return boolean
	 * @date 2014年11月17日14:12:30
	 */
	private boolean isSameRate(String reportNo,AutoUnderWriteVo ruleVo){
		if(ruleVo.getIsSameRate()!=null){
			return ruleVo.getIsSameRate();
		}
		// 查看是否存在商业理算书
		AcCompensateQuick biCompensate = firstVerifyService.findBiAcCompensateQuickByReportNo(reportNo);
		if(biCompensate!=null){
			String accidentDutyCode = biCompensate.getAccidentDutyCode();
			Double accidentDutyRate = biCompensate.getAccidentDutyRate();
			String result=checkAccidentDutyCode(accidentDutyCode,accidentDutyRate,reportNo);
			if((result.split("_")[0]=="2"||result.split("_")[2]=="2")||(result.split("_")[1]=="2"||result.split("_")[3]=="2")){
				//("案件责任或责任比例与各损失项及查勘录入存在不一致，请校验！");
				ruleVo.setIsSameRate(false);
				return false;
			}
		}
		ruleVo.setIsSameRate(true);
		return true;
	}
	/**
	 * 校验事故责任和事故比例是否相同
	 * @param accidentDutyCode
	 * @param accidentDutyRate
	 * @param reportNo
	 * @return
	 */
	public String checkAccidentDutyCode(String accidentDutyCode,Double accidentDutyRate,String reportNo){
		// 查看是否存在交强险理算书
		AcCompensateQuick trafficAcCompensateTemp = firstVerifyService.findTrafficAcCompensateQuickByReportNo(reportNo);
		// 查看是否存在商业理算书
		AcCompensateQuick biAcCompensateTemp = firstVerifyService.findBiAcCompensateQuickByReportNo(reportNo);
		
		AcCompensateQuick trafficAccompensate = null;
		AcCompensateQuick biAccompensate = null;
		if (trafficAcCompensateTemp != null) {
			trafficAccompensate = trafficAcCompensateTemp;
		}
		if (biAcCompensateTemp != null) {
			biAccompensate = biAcCompensateTemp;
		}
		String nameFlag = "1";
		String rateFlag = "1";
		String surveyNameFlag = "1";
		String surveyRateFlag = "1";
		// 交强立案信息
		AcClaim traClaim = claimService.findTraClaimNoByReportNo(reportNo);
		// 商业立案信息
		AcClaim biClaim = claimService.findBiClaimNoByReportNo(reportNo);
		// 查勘信息
		AcSurvey survey = surveyService.findAcSurveyByReportNo(reportNo);
		String accidentDutyCodeSurvey=null;
		Double accidentDutyRatesurvey=null;
		if(survey==null){//查勘没有取报案信息
			AcReport report = reportService.findByReportNo(reportNo);
			accidentDutyCodeSurvey = report.getAccidentDutyCode();
			accidentDutyRatesurvey = report.getAccidentDutyRate();
		}else{
			accidentDutyCodeSurvey = survey.getAccidentDutyCode();
			accidentDutyRatesurvey = survey.getAccidentDutyRate();
		}
		List<AcCarDefLoss> carLossList = new ArrayList<AcCarDefLoss>();
		List<AcPropDefLoss> proplossList = new ArrayList<AcPropDefLoss>();
		List<AcPersonTrackMain> personLossList = new ArrayList<AcPersonTrackMain>();
		if (traClaim.getClaimNo() != null || biClaim.getClaimNo() != null) {
			carLossList = carLossService.findAllAcCarDefLossByReportNo(reportNo);
			if ((traClaim.getClaimNo() != null && (trafficAccompensate == null || DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_RETURN
					.equals(trafficAccompensate.getUnderWriteFlag())))
					|| (biClaim.getClaimNo() != null && (biAccompensate == null || DataDictionary.ACCOMPENSATE_UNDERWRITEFLAG_RETURN
							.equals(biAccompensate.getUnderWriteFlag())))) {
				proplossList = propLossService.findAllAcPropDefLossByReportNo(reportNo);
				personLossList = personService.findAllAcPersonTrackMainByReportNo(reportNo);

			}
		}
		if(!accidentDutyCode.equals(accidentDutyCodeSurvey)){
			surveyNameFlag = "2";//与查勘事故责任不同
		}
		if(!accidentDutyRate.equals(accidentDutyRatesurvey)){
			surveyRateFlag = "2";//与查勘的比例不同
		}
		for (AcCarDefLoss acCarDefLoss : carLossList) {
			if(!accidentDutyCode.equals(acCarDefLoss.getAccidentDutyCode())){
				nameFlag = "2";//事故责任不相同
			}
			if(!accidentDutyRate.equals(acCarDefLoss.getLiabilityRate())){
				rateFlag = "2";//责任比例不相同
			}
		}
		for (AcPropDefLoss acproploss : proplossList) {
			if(!accidentDutyCode.equals(acproploss.getAccidentDutyCode())){
				nameFlag = "2";//事故责任不相同
			}
			if(!accidentDutyRate.equals(acproploss.getLiabilityRate())){
				rateFlag = "2";//责任比例不相同
			}
		}
		for (AcPersonTrackMain personLoss : personLossList) {
			if(!accidentDutyCode.equals(personLoss.getAccidentDutyCode())){
				nameFlag = "2";//事故责任不相同
			}
			if(!accidentDutyRate.equals(personLoss.getLiabilityRate())){
				rateFlag = "2";//责任比例不相同
			}
		}
		return nameFlag+"_"+rateFlag+"_"+surveyNameFlag+"_"+surveyRateFlag;
	}
	/**
	 * @Title: findMaxSumClaim
	 * @Description: TODO(查询acClaimHis最大未决金额)
	 * @param compensateNoList
	 * @return Double  
	 * @throws
	 * @author duanshuyuan
	 * @date 2016-7-1 下午3:59:11
	 */
	private Double findMaxSumClaim(String reportNo){
		Double sumMaxClaim = 0.0;
		QueryRule queryRule = QueryRule.getInstance();
		queryRule.addEqual("reportNo", reportNo);
		queryRule.addEqual("manualFlag", "2");
		queryRule.addAscOrder("times");
		List<AcClaimHis> acClaimList = commonService.find(AcClaimHis.class, queryRule);
		Map<Integer, Double> sumMap = new HashMap<Integer, Double>();
		if(acClaimList!=null&&acClaimList.size()>0){
			for (AcClaimHis acClaimHis : acClaimList) {
				Double sumClaim = 0.0;
				List<AcClaimLossHis> AcClaimLossList = acClaimHis.getAcClaimLossHises();
				for (AcClaimLossHis acClaimLossHis : AcClaimLossList) {
					if(DataDictionary.LOSSFEETYPE_P.equals(acClaimLossHis.getLossFeeType())){
						sumClaim += acClaimLossHis.getSumClaim();
					}
				}
				if(sumMap.containsKey(acClaimHis.getTimes())){//同一次相加
					sumMap.put(acClaimHis.getTimes(), sumClaim +sumMap.get(acClaimHis.getTimes()));
				}else{
					sumMap.put(acClaimHis.getTimes(), sumClaim);
				}
			}
	        for(Entry<Integer, Double> entry  :sumMap.entrySet()){//遍历每次取最大值
	        	sumMaxClaim = entry.getValue() > sumMaxClaim ? entry.getValue() : sumMaxClaim;
	        }
		}
		return sumMaxClaim;
	}
	/**
	 * @Title: isHaveUnderWriteTask
	 * @Description: TODO(判断是否有未处理核赔任务)
	 * @param reportNo
	 * @param parentNodeId
	 * @return boolean
	 * @throws
	 * @author duanshuyuan
	 * @date 2019-6-11 下午4:19:23
	 */
	public boolean isHaveUnderWriteTask(String reportNo, Long parentNodeId){
		String hql = "from ACBpmMain where reportNo = ? and nodeId = ? and parentNodeId = ? and taskStatus in ('0','2')";
		List<ACBpmMain> list = this.findByHql(hql, reportNo, BpmConstants.VERIFYPAY_NODEID, parentNodeId);
		if(list != null && list.size() > 0){
			return true;
		}
		return false;
	}
	
	public List<AcCharge> findAcChargeListByReportNo(String reportNo,String compensateNo) {
		String chargeHql = "from AcCharge where reportNo=? and compensateNo=? order by riskCode,kindCode,chargeCode,chargeAmount desc ";
		List<AcCharge> chargeList = this.findByHql(chargeHql, reportNo,compensateNo);
	    if (chargeList != null) {
	    	return chargeList;
	    }
		return null;
	}
	public String checkHideNewChargeFee(String reportNo, String comCodeL2){
		boolean onFlag = commonService.checkTurnOn(DataDictionary.SWITCH_HIDENEWCHARGEFEE, comCodeL2, null, "1");
		if(onFlag){
			onFlag = commonService.checkTurnOn(DataDictionary.SWITCH_HIDENEWCHARGEFEE, DataDictionary.SuperComCode, null, "1");
		}
		if(!onFlag){
			List<ACBpmMain> list = acBpmMainService.findACBpmMainByReportNo(reportNo, "all", BpmConstants.CICOMPENSATE, BpmConstants.BICOMPENSATE, BpmConstants.VERIFYPAY);
			if(list != null && list.size() > 0){
				String userCode = CommonMethod.getUserCode();
				for (ACBpmMain acBpmMain : list) {
					if(userCode != null && userCode.equals(acBpmMain.getHandlerCode())){
						return null;
					}
				}
			}
			//自动理算
			String hql = "from ACBpmMain where reportNo =? and taskStatus <> '9' and nodeId in(?,?) order by createtime desc ";
			List<ACBpmMain> bpmMainList = findByHql(hql, reportNo, BpmConstants.CICOMPENSATE_NODEID, BpmConstants.BICOMPENSATE_NODEID);
			if(bpmMainList != null && bpmMainList.size() > 0){
				if(DataDictionary.AUTO_COMPENSATE.equals(bpmMainList.get(0).getHandlerCode())){
					return null;
				}
			}
			return "1";
		}
		return null;
	}
	
	public LossAdjustmentService getLossAdjustmentService() {
		return lossAdjustmentService;
	}

	public void setLossAdjustmentService(LossAdjustmentService lossAdjustmentService) {
		this.lossAdjustmentService = lossAdjustmentService;
	}

	public DeathAdjustmentService getDeathAdjustmentService() {
		return deathAdjustmentService;
	}

	public void setDeathAdjustmentService(DeathAdjustmentService deathAdjustmentService) {
		this.deathAdjustmentService = deathAdjustmentService;
	}

	public MedicalLossService getMedicalLossService() {
		return medicalLossService;
	}

	public void setMedicalLossService(MedicalLossService medicalLossService) {
		this.medicalLossService = medicalLossService;
	}

	public BusinessInsuranceAdjustmentService getBusinessInsuranceAdjustmentService() {
		return businessInsuranceAdjustmentService;
	}

	public ClaimService getClaimService() {
		return claimService;
	}

	public void setClaimService(ClaimService claimService) {
		this.claimService = claimService;
	}

	public CarLossService getCarLossService() {
		return carLossService;
	}

	public void setCarLossService(CarLossService carLossService) {
		this.carLossService = carLossService;
	}

	public PropLossService getPropLossService() {
		return propLossService;
	}

	public void setPropLossService(PropLossService propLossService) {
		this.propLossService = propLossService;
	}

	public PersonTraceService getPersonService() {
		return personService;
	}

	public void setPersonService(PersonTraceService personService) {
		this.personService = personService;
	}

	public DefCommonService getDefCommonService() {
		return defCommonService;
	}

	public void setDefCommonService(DefCommonService defCommonService) {
		this.defCommonService = defCommonService;
	}

	public BpmService getBpmService() {
		return bpmService;
	}

	public void setBpmService(BpmService bpmService) {
		this.bpmService = bpmService;
	}

	/** 属性acBpmMainService的Getter方法 */
	public ACBpmMainService getAcBpmMainService() {
		return acBpmMainService;
	}

	/** 属性acBpmMainService的Setter方法 */
	public void setAcBpmMainService(ACBpmMainService acBpmMainService) {
		this.acBpmMainService = acBpmMainService;
	}

	public PolicyService getPolicyService() {
		return policyService;
	}

	public void setPolicyService(PolicyService policyService) {
		this.policyService = policyService;
	}

	public PrePayService getPrePayService() {
		return prePayService;
	}

	public void setPrePayService(PrePayService prePayService) {
		this.prePayService = prePayService;
	}

	public CommonService getCommonService() {
		return commonService;
	}

	public void setCommonService(CommonService commonService) {
		this.commonService = commonService;
	}

	public OperateRecordService getOperateRecordService() {
		return operateRecordService;
	}

	public void setOperateRecordService(OperateRecordService operateRecordService) {
		this.operateRecordService = operateRecordService;
	}

	public FirstVerifyService getFirstVerifyService() {
		return firstVerifyService;
	}

	public void setFirstVerifyService(FirstVerifyService firstVerifyService) {
		this.firstVerifyService = firstVerifyService;
	}

	public PaymentInfoService getPaymentInfoService() {
		return paymentInfoService;
	}

	public void setPaymentInfoService(PaymentInfoService paymentInfoService) {
		this.paymentInfoService = paymentInfoService;
	}

	public ReportService getReportService() {
		return reportService;
	}

	public void setReportService(ReportService reportService) {
		this.reportService = reportService;
	}

	public ACBpmCaseInfoService getAcBpmCaseInfoService() {
		return acBpmCaseInfoService;
	}

	public void setAcBpmCaseInfoService(ACBpmCaseInfoService acBpmCaseInfoService) {
		this.acBpmCaseInfoService = acBpmCaseInfoService;
	}

	public RuleInterface getRuleInterface() {
		return ruleInterface;
	}

	public void setRuleInterface(RuleInterface ruleInterface) {
		this.ruleInterface = ruleInterface;
	}

	public LcitemCarService getLcitemCarService() {
		return lcitemCarService;
	}

	public void setLcitemCarService(LcitemCarService lcitemCarService) {
		this.lcitemCarService = lcitemCarService;
	}

	public UnderWriteService getUnderWriteService() {
		return underWriteService;
	}

	public void setUnderWriteService(UnderWriteService underWriteService) {
		this.underWriteService = underWriteService;
	}

	public RecaseService getRecaseService() {
		return recaseService;
	}

	public void setRecaseService(RecaseService recaseService) {
		this.recaseService = recaseService;
	}

	public FirstAuditPayService getFirstAuditPayService() {
		return firstAuditPayService;
	}

	public void setFirstAuditPayService(FirstAuditPayService firstAuditPayService) {
		this.firstAuditPayService = firstAuditPayService;
	}

	/** 属性taskAgingService的Getter方法 */
	public TaskAgingService getTaskAgingService() {
		return taskAgingService;
	}

	/** 属性taskAgingService的Setter方法 */
	public void setTaskAgingService(TaskAgingService taskAgingService) {
		this.taskAgingService = taskAgingService;
	}

	public void setAutoTaskService(AutoTaskService autoTaskService) {
		this.autoTaskService = autoTaskService;
	}

	public SurveyService getSurveyService() {
		return surveyService;
	}

	public void setSurveyService(SurveyService surveyService) {
		this.surveyService = surveyService;
	}

	public CaseSurveyService getCaseSurveyService() {
		return caseSurveyService;
	}

	public void setCaseSurveyService(CaseSurveyService caseSurveyService) {
		this.caseSurveyService = caseSurveyService;
	}

	public RejectPayService getRejectPayService() {
		return rejectPayService;
	}

	public void setRejectPayService(RejectPayService rejectPayService) {
		this.rejectPayService = rejectPayService;
	}
	public String getDefaultSurveyRiskCode(AcReportCarInfo acReportCarInfo,AcReportPropInfo acReportPropInfo,AcReportPersonInfo acReportPersonInfo,
			Map<String, String> kindCodeMap, AcSurvey survey,String flag){
		String lossAttrCode ="";
		if(acReportCarInfo!=null){
			lossAttrCode = acReportCarInfo.getLossAttRCode();
		}else if(acReportPropInfo!=null){
			lossAttrCode = acReportPropInfo.getLossAttRCode();
		}else if(acReportPersonInfo!=null){
			lossAttrCode = acReportPersonInfo.getLossAttRCode();
		}
		Map<String, String> sourceMap = DataDictionary.getAttrMap(lossAttrCode);
		//取保单险别和属性险别的公共险别
		Map<String,String> resultMap = new HashMap<String, String>();
		if(sourceMap!=null){
			if(kindCodeMap.size() > 0){
				Iterator it = kindCodeMap.entrySet().iterator();   
				while(it.hasNext()){
					Map.Entry pairs = (Map.Entry)it.next();    
					if(sourceMap.containsKey(pairs.getKey())){
						if(!pairs.getKey().toString().startsWith("M")&&
								!pairs.getKey().toString().startsWith("J")&&
								!pairs.getKey().toString().startsWith("20J")&&
								!pairs.getKey().toString().startsWith("E1")&&
								!pairs.getKey().toString().startsWith("20E1")&&
								!pairs.getKey().toString().startsWith("20E2")&&
								!pairs.getKey().toString().startsWith("E2")){
							resultMap.put(pairs.getKey().toString(), pairs.getValue().toString());
						}
					}
				}
				if(DataDictionary.RISK_SURVEY_FLAG_CI.equals(flag)){
					if(DataDictionary.RISK_SURVEY_FLAG_GG.equals(flag)&& resultMap.containsKey(DataDictionary.KINDCODE_BZ)){
						return DataDictionary.KINDCODE_BZ;
					}else if(DataDictionary.RISK_SURVEY_FLAG_GG.equals(flag)&& resultMap.containsKey(DataDictionary.KINDCODE_20BZ)){
						return DataDictionary.KINDCODE_20BZ;
					}
				}else{
					if(DataDictionary.RISK_SURVEY_FLAG_GG.equals(flag)&& resultMap.containsKey(DataDictionary.KINDCODE_B)){
						return DataDictionary.KINDCODE_B;
					}else if(DataDictionary.RISK_SURVEY_FLAG_GG.equals(flag)&& resultMap.containsKey(DataDictionary.KINDCODE_A)){
						return DataDictionary.KINDCODE_A;
					}else if(DataDictionary.RISK_SURVEY_FLAG_GG.equals(flag)&& resultMap.containsKey(DataDictionary.KINDCODE_A1)){
						return DataDictionary.KINDCODE_A1;
					}else if(DataDictionary.RISK_SURVEY_FLAG_GG.equals(flag)&& resultMap.containsKey(DataDictionary.KINDCODE_20B)){
						return DataDictionary.KINDCODE_20B;
					}else if(DataDictionary.RISK_SURVEY_FLAG_GG.equals(flag)&& resultMap.containsKey(DataDictionary.KINDCODE_20A)){
						return DataDictionary.KINDCODE_20A;
					}
				}
				if(lossAttrCode.equals(DataDictionary.LOSSATTRCODE_ITEM_CAR)){
					if(DataDictionary.SURVEY_DamageReasonCode_A06.equals(survey.getDamageReasonCode())){//自燃
						if(resultMap.containsKey(DataDictionary.KINDCODE_E)){
							return DataDictionary.KINDCODE_E;
						}else if(resultMap.containsKey(DataDictionary.KINDCODE_Z)){
							return DataDictionary.KINDCODE_Z;
						}
					}
					if(DataDictionary.SURVEY_DamageReasonCode_A02.equals(survey.getDamageReasonCode())){//玻璃破碎
						if(resultMap.containsKey(DataDictionary.KINDCODE_F)){
							return DataDictionary.KINDCODE_F;
						}
					}
					if(DataDictionary.SURVEY_DamageReasonCode_A03.equals(survey.getDamageReasonCode())){//车身划痕
						if(resultMap.containsKey(DataDictionary.KINDCODE_L)){
							return DataDictionary.KINDCODE_L;
						}else if(resultMap.containsKey(DataDictionary.KINDCODE_20L)){
							return DataDictionary.KINDCODE_20L;
						}
					}
					if(DataDictionary.SURVEY_DamageReasonCode_A05.equals(survey.getDamageReasonCode())){//盗窃抢劫
						if(resultMap.containsKey(DataDictionary.KINDCODE_G1)){
							return DataDictionary.KINDCODE_G1;
						}
						if(resultMap.containsKey(DataDictionary.KINDCODE_20G1)){
							return DataDictionary.KINDCODE_20G1;
						}
						if(resultMap.containsKey(DataDictionary.KINDCODE_G0)){
							return DataDictionary.KINDCODE_G0;
						}
					}
					if(resultMap.containsKey(DataDictionary.KINDCODE_A)){
						return DataDictionary.KINDCODE_A;
					}
					if(resultMap.containsKey(DataDictionary.KINDCODE_20A)){
						return DataDictionary.KINDCODE_20A;
					}
					
				}
				if(DataDictionary.RISK_SURVEY_FLAG_CI.equals(flag)){
					if(resultMap.containsKey(DataDictionary.KINDCODE_BZ)){
						return DataDictionary.KINDCODE_BZ;
					}
					if(resultMap.containsKey(DataDictionary.KINDCODE_20BZ)){
						return DataDictionary.KINDCODE_20BZ;
					}
					if(!lossAttrCode.equals(DataDictionary.LOSSATTRCODE_ITEM_CAR)&&resultMap.containsKey(DataDictionary.KINDCODE_B)){//非标的车上物，三者车有损失，且存在B险，返回BZ
						//调整下新旧条款的交强险险别
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20BZ)){
							return DataDictionary.KINDCODE_20BZ;
						}else{
							return DataDictionary.KINDCODE_BZ;
						}
					}
					if(!lossAttrCode.equals(DataDictionary.LOSSATTRCODE_ITEM_CAR)&&resultMap.containsKey(DataDictionary.KINDCODE_20B)){//非标的车上物，三者车有损失，且存在B险，返回BZ
						//调整下新旧条款的交强险险别
						if(kindCodeMap.containsKey(DataDictionary.KINDCODE_20BZ)){
							return DataDictionary.KINDCODE_20BZ;
						}else{
							return DataDictionary.KINDCODE_BZ;
						}
					}
				}else{
					if(resultMap.containsKey(DataDictionary.KINDCODE_D4)){
						return DataDictionary.KINDCODE_D4;
					}else if(resultMap.containsKey(DataDictionary.KINDCODE_D3)){
						return DataDictionary.KINDCODE_D3;
					}else if(resultMap.containsKey(DataDictionary.KINDCODE_D2)){
						return DataDictionary.KINDCODE_D2;
					}else if(resultMap.containsKey(DataDictionary.KINDCODE_B)){
						return DataDictionary.KINDCODE_B;
					}else if(resultMap.containsKey(DataDictionary.KINDCODE_20D4)){
						return DataDictionary.KINDCODE_20D4;
					}else if(resultMap.containsKey(DataDictionary.KINDCODE_20D3)){
						return DataDictionary.KINDCODE_20D3;
					}else if(resultMap.containsKey(DataDictionary.KINDCODE_20D2)){
						return DataDictionary.KINDCODE_20D2;
					}else if(resultMap.containsKey(DataDictionary.KINDCODE_20B)){
						return DataDictionary.KINDCODE_20B;
					}
				}
			}
		}
		return "";
	}
	/**
	 * 查勘是否有责判断
	 * 		车辆任务存在责任标志，取车辆任务上的；
	 * 		车辆任务没有责任标志，标的车取案件责任，三者车为有责
	 * @param acReportCarInfo
	 * @param accidentDutyCode
	 * @return
	 */
	private String getIsDuty(AcReportCarInfo acReportCarInfo,String accidentDutyCode) {
		String isDuty ="";
		if("1".equals(acReportCarInfo.getIsDuty())){//有责
			isDuty ="1";
		}else if("0".equals(acReportCarInfo.getIsDuty())){//无责
			isDuty ="0";
		}else{
			if(DataDictionary.LOSSATTRCODE_ITEM_CAR.equals(acReportCarInfo.getLossAttRCode())){
				isDuty = "5".equals(accidentDutyCode)?"0":"1";
			}else{
				isDuty = "1";
			}
		}
		return isDuty;
	}
}
